import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology45.hours();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        java.lang.String str63 = locale49.getDisplayLanguage(locale59);
        java.lang.String str64 = locale49.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology45, locale49);
        java.lang.String str66 = dateTimeZone22.getName((long) 999, locale49);
        java.util.TimeZone timeZone67 = dateTimeZone22.toTimeZone();
        long long71 = dateTimeZone22.convertLocalToUTC((-62104060799990L), false, (long) (-292275054));
        boolean boolean73 = dateTimeZone22.isStandardOffset(4039737292748L);
        long long76 = dateTimeZone22.convertLocalToUTC(32452099211988L, true);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str9, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str38, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str58, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tedesco" + "'", str63, "tedesco");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-62104060799990L) + "'", long71 == (-62104060799990L));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 32452099211988L + "'", long76 == 32452099211988L);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology31 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.minuteOfHour();
        org.joda.time.DurationField durationField33 = dateTimeField32.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str10, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNull(durationField33);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean9 = dateTimeField8.isLenient();
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = dateTimeField8.getAsText(readablePartial10, (int) 'x', locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology5, locale14, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology20.hours();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology20, locale23, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, 1L);
        long long32 = dateTimeZone27.adjustOffset(1L, true);
        long long34 = dateTimeZone27.convertUTCToLocal(0L);
        java.lang.String str36 = dateTimeZone27.getNameKey(0L);
        int int38 = dateTimeZone27.getOffset((long) 10);
        org.joda.time.Chronology chronology39 = chronology20.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfWeek();
        org.joda.time.DurationField durationField42 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.millisOfDay();
        org.joda.time.Chronology chronology44 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.millisOfSecond();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale.setDefault(locale46);
        java.lang.String str49 = locale46.getScript();
        java.util.Set<java.lang.String> strSet50 = locale46.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((-58979923200000L), chronology39, locale46, (java.lang.Integer) 8, 31);
        org.joda.time.DateTimeField dateTimeField54 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology39.dayOfWeek();
        boolean boolean56 = dateTimeFieldType0.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField57 = chronology39.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale61 = new java.util.Locale("CHINESE (CHINA)", "French");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeField57.getAsText(readablePartial58, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekOfWeekyear" + "'", str1, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str13, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese (Cina)" + "'", str16, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "120" + "'", str17, "120");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals(locale61.toString(), "chinese (china)_FRENCH");
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long59 = dateTimeZone56.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int65 = dateTimeField63.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField66 = dateTimeField63.getDurationField();
        int int68 = dateTimeField63.getMaximumValue((long) (short) 1);
        long long70 = dateTimeField63.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial71 = null;
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder73.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder77 = builder73.clearExtensions();
        java.util.Locale locale78 = builder77.build();
        java.lang.String str79 = dateTimeField63.getAsShortText(readablePartial71, (int) (byte) 100, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.lang.String str81 = dateTimeZone56.getShortName((long) 1970, locale78);
        long long84 = dateTimeZone56.adjustOffset(3061065600000L, true);
        long long87 = dateTimeZone56.adjustOffset(127L, false);
        long long90 = dateTimeZone56.convertLocalToUTC(7200999L, true);
        org.joda.time.Chronology chronology91 = chronology19.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField92 = chronology91.halfdayOfDay();
        org.joda.time.DurationField durationField93 = chronology91.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4200000L + "'", long59 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100" + "'", str79, "100");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:10" + "'", str81, "-01:10");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3061065600000L + "'", long84 == 3061065600000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 127L + "'", long87 == 127L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 11400999L + "'", long90 == 11400999L);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale locale7 = builder6.build();
        java.lang.String str8 = locale7.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE_Taiwan");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("\u30a4\u30bf\u30ea\u30a2\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone11.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale16 = new java.util.Locale("cinese (Cina)");
        java.lang.String str17 = dateTimeZone11.getShortName(0L, locale16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, 1L);
        long long23 = dateTimeZone11.getMillisKeepLocal(dateTimeZone18, (long) (short) -1);
        long long26 = dateTimeZone11.convertLocalToUTC((-61914758400100L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone11.getOffset(readableInstant28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals(locale16.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61914758400100L) + "'", long26 == (-61914758400100L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        java.lang.Integer int10 = dateTimeParserBucket5.getOffsetInteger();
        dateTimeParserBucket5.setOffset(86399);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField19.getAsText(readablePartial21, (int) 'x', locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology16, locale25, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType14.getField(chronology31);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology31, locale37, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        long long46 = dateTimeZone43.getMillisKeepLocal(dateTimeZone44, 1L);
        int int48 = dateTimeZone43.getOffsetFromLocal((long) (short) 0);
        boolean boolean50 = dateTimeZone43.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology51 = chronology31.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        boolean boolean59 = dateTimeField58.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = dateTimeField58.getAsText(readablePartial60, (int) 'x', locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology55, locale64, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DurationField durationField72 = chronology70.weekyears();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.weekyearOfCentury();
        long long78 = dateTimeField75.add(1439L, 31);
        long long80 = dateTimeField75.roundHalfFloor((long) 2922789);
        int int82 = dateTimeField75.getMinimumValue((long) '4');
        dateTimeParserBucket5.saveField(dateTimeField75, 31);
        dateTimeParserBucket5.setOffset(99);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "120" + "'", str28, "120");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "120" + "'", str67, "120");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 978307201439L + "'", long78 == 978307201439L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str6 = locale3.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(builder4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "German" + "'", str5, "German");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Country();
        java.lang.String str4 = locale0.getLanguage();
        java.util.Locale locale8 = new java.util.Locale("Japan", "ita", "JPN");
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        java.lang.String str26 = locale12.getDisplayLanguage(locale22);
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = locale12.getDisplayScript(locale27);
        java.lang.String str29 = locale8.getDisplayVariant(locale27);
        java.lang.String str31 = locale27.getUnicodeLocaleType("ja");
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int38 = dateTimeField36.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField39 = dateTimeField36.getDurationField();
        int int41 = dateTimeField36.getMaximumValue((long) (short) 1);
        long long43 = dateTimeField36.roundHalfEven((long) ' ');
        int int45 = dateTimeField36.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale50 = new java.util.Locale("", "Chinese (China)");
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = dateTimeField36.getAsShortText(readablePartial46, (int) (short) -1, locale50);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale54);
        java.lang.String str56 = dateTimeField36.getAsShortText((long) (byte) 100, locale54);
        java.util.Locale.setDefault(category32, locale54);
        java.util.Locale locale58 = java.util.Locale.getDefault(category32);
        java.util.Locale locale59 = java.util.Locale.getDefault(category32);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology61, locale62, (java.lang.Integer) 1);
        java.lang.Object obj65 = dateTimeParserBucket64.saveState();
        long long66 = dateTimeParserBucket64.computeMillis();
        dateTimeParserBucket64.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        dateTimeParserBucket64.saveField(dateTimeFieldType69, "zh_CN", locale73);
        java.lang.String str75 = locale59.getDisplayVariant(locale73);
        java.lang.String str76 = locale27.getDisplayVariant(locale59);
        java.lang.String str77 = locale59.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (China)" + "'", str1, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertEquals(locale8.toString(), "japan_ITA_JPN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tedesco" + "'", str26, "tedesco");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JPN" + "'", str29, "JPN");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals(locale50.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1" + "'", str52, "-1");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970" + "'", str56, "1970");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "en_GB" + "'", str77, "en_GB");
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket15.getZone();
        int int22 = dateTimeZone20.getOffsetFromLocal((long) 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((-58979923200001L));
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) -1);
        java.lang.String str15 = dateTimeZone0.getName((long) 9);
        java.lang.String str16 = dateTimeZone0.toString();
        java.lang.String str18 = dateTimeZone0.getNameKey(684060026399L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.secondOfMinute();
        int int41 = dateTimeField40.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setLanguageTag("\u82f1\u6587\u82f1\u570b)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setScript("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ISOChronology[UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.secondOfMinute();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        boolean boolean39 = locale38.hasExtensions();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology9, locale38);
        org.joda.time.DateTimeField dateTimeField42 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology9.weekyear();
        boolean boolean45 = dateTimeField44.isSupported();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.removeUnicodeLocaleAttribute("hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hourOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        dateTimeParserBucket5.setOffset((int) (short) 1);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 86399999);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 1849);
        long long15 = dateTimeParserBucket5.computeMillis();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1849L) + "'", long15 == (-1849L));
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        org.joda.time.DurationField durationField54 = chronology19.millis();
        org.joda.time.DurationField durationField55 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology19.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long59 = dateTimeField56.set((-259113602L), "French (Canada)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"French (Canada)\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        boolean boolean9 = dateTimeZone1.isStandardOffset((long) 'x');
        long long12 = dateTimeZone1.convertLocalToUTC(31536000000L, true);
        java.lang.String str14 = dateTimeZone1.getNameKey((-2L));
        java.lang.String str16 = dateTimeZone1.getNameKey(59L);
        int int18 = dateTimeZone1.getOffset((long) 19);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone1.getOffset(readableInstant19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField27 = dateTimeField24.getDurationField();
        int int29 = dateTimeField24.getMaximumValue((long) (short) 1);
        long long31 = dateTimeField24.roundHalfEven((long) ' ');
        int int33 = dateTimeField24.getMinimumValue((long) 100);
        long long36 = dateTimeField24.add(0L, (long) 0);
        long long38 = dateTimeField24.remainder((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int43 = dateTimeField41.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField44 = dateTimeField41.getDurationField();
        int int46 = dateTimeField41.getMaximumValue((long) (short) 1);
        long long48 = dateTimeField41.roundHalfEven((long) ' ');
        int int50 = dateTimeField41.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale55 = new java.util.Locale("", "Chinese (China)");
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = dateTimeField41.getAsShortText(readablePartial51, (int) (short) -1, locale55);
        java.util.Locale locale59 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = dateTimeField41.getAsShortText((long) (byte) 100, locale59);
        int int62 = dateTimeField24.getMaximumShortTextLength(locale59);
        java.lang.String str63 = dateTimeZone1.getShortName(1009843200012L, locale59);
        long long66 = dateTimeZone1.adjustOffset(229485037334426524L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31536000000L + "'", long12 == 31536000000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278993 + "'", int46 == 292278993);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals(locale55.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 229485037334426524L + "'", long66 == 229485037334426524L);
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale3, locale5, locale8, locale10, locale12, locale14, locale16, locale18, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.String[] strArray30 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayCountry();
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayCountry();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayCountry();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayCountry();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale37, locale39, locale42, locale44, locale46, locale48, locale50, locale52, locale55 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList58, filteringMode61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.parse("zho", strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.parse("zho", strMap67);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap72 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList73 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, strMap72);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.US;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strSet77);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList68, (java.util.Collection<java.lang.String>) strList78);
        java.lang.String str80 = java.util.Locale.lookupTag(languageRangeList65, (java.util.Collection<java.lang.String>) strList78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList65, strMap81);
        java.util.Locale locale85 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology87 = null;
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology87, locale88, (java.lang.Integer) 1);
        java.lang.String str91 = locale88.getScript();
        java.lang.String str92 = locale85.getDisplayScript(locale88);
        java.util.Set<java.lang.String> strSet93 = locale88.getUnicodeLocaleAttributes();
        java.lang.String str94 = java.util.Locale.lookupTag(languageRangeList65, (java.util.Collection<java.lang.String>) strSet93);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "China" + "'", str4, "China");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "China" + "'", str9, "China");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "China" + "'", str15, "China");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "China" + "'", str38, "China");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "China" + "'", str43, "China");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "China" + "'", str45, "China");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "China" + "'", str49, "China");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode61.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(languageRangeList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertEquals(locale85.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        long long8 = dateTimeZone1.convertUTCToLocal(0L);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone12.getMillisKeepLocal(dateTimeZone13, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.TimeZone timeZone17 = dateTimeZone13.toTimeZone();
        java.util.Locale locale22 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str23 = dateTimeZone13.getShortName((long) 'x', locale22);
        java.lang.String str24 = dateTimeZone10.getName(360000000L, locale22);
        long long26 = dateTimeZone10.nextTransition(0L);
        long long28 = dateTimeZone10.convertUTCToLocal((long) 'a');
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale22.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.DurationField durationField4 = dateTimeField2.getDurationField();
        long long7 = dateTimeField2.set(1L, (int) (short) 0);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (byte) 10, (long) (short) 0);
        org.joda.time.ReadablePartial readablePartial11 = null;
        int int12 = dateTimeField2.getMinimumValue(readablePartial11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology14, locale15, (java.lang.Integer) 1);
        java.lang.Object obj18 = dateTimeParserBucket17.saveState();
        long long19 = dateTimeParserBucket17.computeMillis();
        java.lang.Object obj20 = dateTimeParserBucket17.saveState();
        dateTimeParserBucket17.setOffset((java.lang.Integer) 1);
        java.lang.Object obj23 = dateTimeParserBucket17.saveState();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology25, locale26, (java.lang.Integer) 1);
        java.lang.Object obj29 = dateTimeParserBucket28.saveState();
        long long30 = dateTimeParserBucket28.computeMillis();
        dateTimeParserBucket28.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        dateTimeParserBucket28.saveField(dateTimeFieldType33, "zh_CN", locale37);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale40.getISO3Country();
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = locale40.getISO3Language();
        dateTimeParserBucket17.saveField(dateTimeFieldType33, "hi!", locale40);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getCountry();
        java.lang.String str48 = locale40.getDisplayLanguage(locale46);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale53 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale50.getDisplayName(locale53);
        java.lang.String str56 = locale46.getDisplayLanguage(locale50);
        java.lang.String str57 = locale46.getDisplayScript();
        int int58 = dateTimeField2.getMaximumTextLength(locale46);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        boolean boolean64 = dateTimeField63.isLenient();
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale67.getDisplayName();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale67.getDisplayName(locale69);
        java.lang.String str72 = dateTimeField63.getAsText(readablePartial65, (int) 'x', locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology60, locale69, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.seconds();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.secondOfMinute();
        org.joda.time.Chronology chronology82 = null;
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology82, locale83, (java.lang.Integer) 1);
        java.lang.String str86 = locale83.getScript();
        java.lang.String str87 = dateTimeField79.getAsText(31L, locale83);
        org.joda.time.ReadablePartial readablePartial88 = null;
        java.util.Locale.Builder builder90 = new java.util.Locale.Builder();
        java.util.Locale locale91 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder92 = builder90.setLocale(locale91);
        java.lang.String str93 = dateTimeField79.getAsText(readablePartial88, 9, locale91);
        java.lang.String str94 = locale46.getDisplayName(locale91);
        java.lang.String str95 = locale46.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str48, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals(locale53.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japanese" + "'", str56, "Japanese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese (China)" + "'", str68, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "cinese (Cina)" + "'", str71, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "120" + "'", str72, "120");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "9" + "'", str93, "9");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Japanisch" + "'", str94, "Japanisch");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ja" + "'", str95, "ja");
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset((-58979923200000L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        long long13 = dateTimeZone1.convertUTCToLocal((long) 360000000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 360000000L + "'", long13 == 360000000L);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long6 = dateTimeField2.roundHalfFloor(32452012811988L);
        org.joda.time.DurationField durationField7 = dateTimeField2.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32440608000000L + "'", long6 == 32440608000000L);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial8 = null;
        int[] intArray14 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int15 = dateTimeField2.getMaximumValue(readablePartial8, intArray14);
        long long18 = dateTimeField2.addWrapField((long) 12, (int) ' ');
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long25 = dateTimeField23.roundHalfEven((long) 10);
        long long27 = dateTimeField23.roundHalfEven(120001L);
        org.joda.time.DurationField durationField28 = dateTimeField23.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial49 = null;
        int[] intArray50 = null;
        int int51 = dateTimeField48.getMinimumValue(readablePartial49, intArray50);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int58 = dateTimeField56.getLeapAmount((long) 0);
        int int60 = dateTimeField56.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray66 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int67 = dateTimeField56.getMaximumValue(readablePartial61, intArray66);
        int[] intArray69 = dateTimeField48.add(readablePartial52, (int) 'a', intArray66, (int) (short) 0);
        int int70 = dateTimeField23.getMinimumValue(readablePartial29, intArray69);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = dateTimeField2.set(readablePartial19, 36000000, intArray69, 335475);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36000000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1009843200012L + "'", long18 == 1009843200012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 120001L + "'", long27 == 120001L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (China)" + "'", str39, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.halfdayOfDay();
        long long28 = dateTimeField26.roundCeiling(18L);
        int int29 = dateTimeField26.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 43200000L + "'", long28 == 43200000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("3540000", (double) 2067L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2067.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(11201);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale locale21 = builder16.build();
        java.util.Locale.Builder builder23 = builder16.setVariant("86399");
        java.util.Locale.Builder builder26 = builder16.setExtension('x', "Germania");
        java.util.Locale.Builder builder27 = builder16.clearExtensions();
        java.util.Locale.Builder builder28 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder16.setScript("\u5348\u524d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Giappone" + "'", str9, "Giappone");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Cina" + "'", str13, "Cina");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1910);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        boolean boolean30 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType0.getField(chronology27);
        java.lang.String str33 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.hourOfHalfday();
        boolean boolean36 = dateTimeField34.isLeap((-61851603600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cinese (Cina)" + "'", str20, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 4);
        java.util.Locale locale21 = dateTimeParserBucket15.getLocale();
        long long23 = dateTimeParserBucket15.computeMillis(false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        long long11 = dateTimeZone1.previousTransition((long) (-292275054));
        int int13 = dateTimeZone1.getOffset(315532800009L);
        long long15 = dateTimeZone1.nextTransition((-1893456000000L));
        java.lang.String str17 = dateTimeZone1.getName(31535999992L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-292275054L) + "'", long11 == (-292275054L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1893456000000L) + "'", long15 == (-1893456000000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        int int25 = dateTimeField23.get(3376684800000L);
        int int27 = dateTimeField23.getMinimumValue(0L);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str33 = locale29.getExtension('a');
        java.lang.String str34 = dateTimeField23.getAsText(1982, locale29);
        boolean boolean35 = locale29.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2077 + "'", int25 == 2077);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1982" + "'", str34, "1982");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean11 = dateTimeField10.isLenient();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField10.getAsText(readablePartial12, (int) 'x', locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology7, locale16, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.yearOfEra();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder28.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder32 = builder28.setLocale(locale31);
        java.lang.String str33 = dateTimeField25.getAsText(readablePartial26, (int) (byte) 100, locale31);
        java.lang.String str34 = dateTimeField2.getAsText((int) 'u', locale31);
        long long36 = dateTimeField2.roundHalfCeiling((-58979923200001L));
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray38 = null;
        int int39 = dateTimeField2.getMinimumValue(readablePartial37, intArray38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.monthOfYear();
        org.joda.time.DurationField durationField62 = chronology58.hours();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale63.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale63, (java.lang.Integer) 4, 1970);
        java.lang.String str69 = dateTimeField2.getAsShortText((-292275054), locale63);
        int int71 = dateTimeField2.getMaximumValue(32452012816118L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cinese (Cina)" + "'", str18, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "120" + "'", str19, "120");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "117" + "'", str34, "117");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-58979923200000L) + "'", long36 == (-58979923200000L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-292275054" + "'", str69, "-292275054");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology45.hours();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        java.lang.String str63 = locale49.getDisplayLanguage(locale59);
        java.lang.String str64 = locale49.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology45, locale49);
        java.lang.String str66 = dateTimeZone22.getName((long) 999, locale49);
        boolean boolean67 = dateTimeZone22.isFixed();
        long long69 = dateTimeZone22.convertUTCToLocal((-259113602L));
        long long71 = dateTimeZone22.convertUTCToLocal(132539198400000010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese (Cina)" + "'", str58, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tedesco" + "'", str63, "tedesco");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-259113602L) + "'", long69 == (-259113602L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 132539198400000010L + "'", long71 == 132539198400000010L);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.secondOfMinute();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology17.weeks();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology17.add(readablePeriod27, (-58979923200001L), 1969);
        org.joda.time.ReadablePartial readablePartial31 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology17.set(readablePartial31, (-4199969L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-58979923200001L) + "'", long30 == (-58979923200001L));
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("UTC");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale24, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = chronology30.hours();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology30, locale33, (java.lang.Integer) 0);
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale36);
        java.util.Locale.Builder builder40 = builder12.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder40.removeUnicodeLocaleAttribute("1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone1.getOffsetFromLocal((long) (byte) 10);
        int int7 = dateTimeZone1.getOffset(100L);
        boolean boolean8 = dateTimeZone1.isFixed();
        int int10 = dateTimeZone1.getOffset(31L);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        java.lang.String str13 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology17.hourOfHalfday();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = dateTimeField34.getAsShortText(410951478782L, locale36);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        int int20 = dateTimeField19.getMaximumValue();
        boolean boolean21 = dateTimeField19.isSupported();
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField19.getMinimumValue(readablePartial22);
        java.lang.String str24 = dateTimeField19.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str24, "DateTimeField[clockhourOfHalfday]");
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        long long24 = dateTimeField22.remainder(101262L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101262L + "'", long24 == 101262L);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-FR");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology5, locale6, (java.lang.Integer) 1);
        java.lang.Object obj9 = dateTimeParserBucket8.saveState();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale28 = java.util.Locale.UK;
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "Chinese (China)", locale28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.seconds();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType26.getField(chronology46);
        dateTimeParserBucket8.saveField(dateTimeFieldType26, 1439);
        boolean boolean53 = languageRange1.equals((java.lang.Object) dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr-fr" + "'", str3, "fr-fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.joda.time.DurationField durationField31 = chronology26.centuries();
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology26.set(readablePartial32, (-85740002L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.util.Locale locale10 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str11 = dateTimeZone1.getShortName((long) 'x', locale10);
        java.lang.String str12 = locale10.getDisplayVariant();
        java.lang.String str13 = locale10.getVariant();
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals(locale10.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("f\351vr.", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fe?vr.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.hourOfDay();
        long long23 = dateTimeField21.roundFloor(132539513932800001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 132539513932800000L + "'", long23 == 132539513932800000L);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        java.lang.String str45 = chronology41.toString();
        java.lang.String str46 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology41.withZone(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = chronology41.get(readablePeriod50, 946688340000L, (-3L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        long long15 = dateTimeField13.roundCeiling(19800L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 946684800000L + "'", long15 == 946684800000L);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setUnicodeLocaleKeyword("UTC", "\u6728");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: UTC [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        boolean boolean21 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology18.getZone();
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology18.set(readablePartial25, 86399999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyear" + "'", str1, "weekyear");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DurationField durationField39 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField41 = chronology18.centuries();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        java.util.Set<java.lang.Character> charSet47 = locale42.getExtensionKeys();
        java.lang.String str49 = locale42.getExtension('u');
        boolean boolean50 = locale42.hasExtensions();
        java.lang.String str51 = locale42.getScript();
        java.util.Locale locale52 = locale42.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((-110715056928000000L), chronology18, locale52, (java.lang.Integer) (-1));
        org.joda.time.DateTimeField dateTimeField55 = chronology18.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str31, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguage("GB");
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setScript("2");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "gb");
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology19, locale22, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField25 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType0.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.monthOfYear();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean37 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField36.getAsText(readablePartial38, (int) 'x', locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology33, locale42, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.weekyear();
        long long55 = dateTimeField52.set((long) 'u', "439");
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int61 = dateTimeField59.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField62 = dateTimeField59.getDurationField();
        int int64 = dateTimeField59.getMaximumValue((long) (short) 1);
        long long66 = dateTimeField59.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial67 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        int int72 = dateTimeField70.getLeapAmount((long) 0);
        int int74 = dateTimeField70.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial75 = null;
        int[] intArray80 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int81 = dateTimeField70.getMaximumValue(readablePartial75, intArray80);
        int int82 = dateTimeField59.getMinimumValue(readablePartial67, intArray80);
        int int83 = dateTimeField52.getMinimumValue(readablePartial56, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField29.set(readablePartial30, 24, intArray80, 360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "120" + "'", str45, "120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-48313238399883L) + "'", long55 == (-48313238399883L));
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-292275054) + "'", int83 == (-292275054));
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long6 = dateTimeZone1.nextTransition(10L);
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int10 = dateTimeZone1.getOffset(946689000000L);
        long long13 = dateTimeZone1.adjustOffset((long) 0, true);
        boolean boolean14 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        boolean boolean22 = dateTimeField21.isLenient();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = dateTimeField21.getAsText(readablePartial23, (int) 'x', locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology18, locale27, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = chronology33.hours();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology33, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = dateTimeField40.getAsText((int) (byte) 10, locale42);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("\u82f1\u8a9e");
        java.lang.String str48 = dateTimeField40.getAsText(850395L, locale47);
        java.lang.String str49 = dateTimeZone1.getName(43200000L, locale47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "120" + "'", str30, "120");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "USA" + "'", str43, "USA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10" + "'", str44, "10");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        int int21 = dateTimeField19.getMinimumValue(967766400010L);
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField19.getMinimumValue(readablePartial22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.year();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology17.add(readablePeriod28, 100800000L, 12);
        org.joda.time.DateTimeField dateTimeField32 = chronology17.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100800000L + "'", long31 == 100800000L);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology17, locale19, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        java.lang.String str24 = dateTimeField22.getAsShortText((long) 'u');
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        int int27 = dateTimeField22.getMaximumTextLength(locale25);
        int int28 = dateTimeField22.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.year();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology17.add(readablePeriod28, 100800000L, 12);
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = chronology17.get(readablePartial32, (-59011459200001L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100800000L + "'", long31 == 100800000L);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        java.lang.String str10 = dateTimeZone1.getShortName(378691200100L);
        java.lang.String str12 = dateTimeZone1.getNameKey(3155755800000L);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        int int16 = dateTimeZone1.getOffset((long) 1970);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField22.getMaximumValue(readablePartial25);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = dateTimeField22.getAsShortText(0L, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale28);
        org.joda.time.DateTimeField dateTimeField35 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology17.year();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale37.getDisplayCountry();
        java.lang.String str40 = locale37.getISO3Country();
        java.lang.String str41 = locale37.getLanguage();
        java.util.Locale locale45 = new java.util.Locale("Japan", "ita", "JPN");
        java.lang.String str46 = locale37.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.lang.String str52 = locale47.getDisplayVariant();
        java.lang.String str53 = locale47.getVariant();
        java.lang.String str54 = locale47.getVariant();
        java.lang.String str55 = locale45.getDisplayCountry(locale47);
        java.lang.String str56 = locale47.getDisplayLanguage();
        java.lang.String str57 = locale47.getDisplayVariant();
        int int58 = dateTimeField36.getMaximumShortTextLength(locale47);
        java.lang.String str59 = locale47.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Cina" + "'", str39, "Cina");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CHN" + "'", str40, "CHN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals(locale45.toString(), "japan_ITA_JPN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ITA" + "'", str55, "ITA");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "cinese" + "'", str56, "cinese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh_CN" + "'", str59, "zh_CN");
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.millisOfSecond();
        java.util.Locale locale40 = null;
        int int41 = dateTimeField39.getMaximumShortTextLength(locale40);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        java.lang.String str32 = dateTimeZone29.getID();
        long long35 = dateTimeZone29.adjustOffset(31L, false);
        int int37 = dateTimeZone29.getStandardOffset((long) 9);
        long long39 = dateTimeZone29.nextTransition((long) 100);
        dateTimeParserBucket4.setZone(dateTimeZone29);
        java.lang.Object obj41 = dateTimeParserBucket4.saveState();
        long long44 = dateTimeParserBucket4.computeMillis(false, "weekOfWeekyear");
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        long long48 = dateTimeZone45.getMillisKeepLocal(dateTimeZone46, 1L);
        java.lang.String str49 = dateTimeZone46.getID();
        long long52 = dateTimeZone46.adjustOffset(31L, false);
        int int54 = dateTimeZone46.getStandardOffset((long) 9);
        long long56 = dateTimeZone46.nextTransition((long) 100);
        boolean boolean58 = dateTimeZone46.isStandardOffset((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = dateTimeZone46.getOffset(readableInstant59);
        boolean boolean61 = dateTimeParserBucket4.restoreState((java.lang.Object) dateTimeZone46);
        java.lang.String str63 = dateTimeZone46.getShortName(379051200000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 31L + "'", long35 == 31L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-58348771200001L) + "'", long44 == (-58348771200001L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31L + "'", long52 == 31L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Locale locale2 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Collection<java.util.Locale> localeCollection17 = null;
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, localeCollection17, filteringMode18);
        java.util.Locale locale23 = new java.util.Locale("Francia", "Italia", "GERMAN (GERMANY)");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("USA");
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayCountry();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayCountry();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayCountry();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale36, locale38, locale41, locale43, locale45, locale47, locale49, locale51, locale54 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList57);
        java.lang.String[] strArray63 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList64);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = locale75.getDisplayCountry();
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale77.getDisplayCountry();
        java.util.Locale locale79 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str80 = locale79.getDisplayCountry();
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str82 = locale81.getDisplayCountry();
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.lang.String str86 = locale84.getDisplayVariant(locale85);
        java.util.Locale locale87 = java.util.Locale.JAPAN;
        java.util.Locale locale88 = java.util.Locale.JAPAN;
        java.lang.String str89 = locale87.getDisplayVariant(locale88);
        java.util.Locale[] localeArray90 = new java.util.Locale[] { locale70, locale72, locale75, locale77, locale79, locale81, locale83, locale85, locale88 };
        java.util.ArrayList<java.util.Locale> localeList91 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList91, localeArray90);
        java.util.Locale locale93 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList91, filteringMode94);
        java.util.Locale locale96 = java.util.Locale.lookup(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList95);
        java.util.Locale locale98 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList95);
        java.util.Locale locale99 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertEquals(locale23.toString(), "francia_ITALIA_GERMAN (GERMANY)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Cina" + "'", str37, "Cina");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Cina" + "'", str42, "Cina");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Cina" + "'", str44, "Cina");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Cina" + "'", str46, "Cina");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Cina" + "'", str48, "Cina");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Cina" + "'", str71, "Cina");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Cina" + "'", str76, "Cina");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Cina" + "'", str78, "Cina");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Cina" + "'", str80, "Cina");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Cina" + "'", str82, "Cina");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(localeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(locale93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode94.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNull(locale96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNull(locale98);
        org.junit.Assert.assertNull(locale99);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology44.dayOfYear();
        org.joda.time.ReadablePartial readablePartial53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = chronology44.get(readablePartial53, 4860107L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        dateTimeParserBucket22.saveField(dateTimeFieldType25, 12);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket22.getZone();
        java.util.Locale locale29 = dateTimeParserBucket22.getLocale();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        java.lang.String str34 = dateTimeZone31.getID();
        long long37 = dateTimeZone31.adjustOffset(31L, false);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = dateTimeZone31.getName((long) 0, locale39);
        boolean boolean43 = dateTimeZone31.isStandardOffset((long) 360000000);
        long long45 = dateTimeZone31.convertUTCToLocal((long) 1439);
        long long49 = dateTimeZone31.convertLocalToUTC(360000127L, true, (long) 3);
        dateTimeParserBucket22.setZone(dateTimeZone31);
        boolean boolean52 = dateTimeZone31.isStandardOffset((-61820064000001L));
        int int54 = dateTimeZone31.getOffsetFromLocal(2808605517626L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31L + "'", long37 == 31L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1439L + "'", long45 == 1439L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 360000127L + "'", long49 == 360000127L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray12 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int13 = dateTimeField2.getMaximumValue(readablePartial7, intArray12);
        int int14 = dateTimeField2.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField2.getType();
        int int17 = dateTimeField2.getMinimumValue(31536000000L);
        long long19 = dateTimeField2.roundCeiling((long) 97);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale23, (java.lang.Integer) 1);
        java.lang.Object obj26 = dateTimeParserBucket25.saveState();
        long long27 = dateTimeParserBucket25.computeMillis();
        java.lang.Object obj28 = dateTimeParserBucket25.saveState();
        dateTimeParserBucket25.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        org.joda.time.DurationField durationField49 = chronology47.hours();
        boolean boolean50 = dateTimeParserBucket25.restoreState((java.lang.Object) chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfYear();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int[] intArray54 = null;
        int[] intArray56 = dateTimeField51.addWrapPartial(readablePartial52, 366, intArray54, 0);
        int int58 = dateTimeField51.get(4200010L);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63);
        java.lang.String str67 = locale63.getISO3Country();
        java.util.Set<java.lang.String> strSet68 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str69 = dateTimeField51.getAsShortText(readablePartial59, 50, locale63);
        java.lang.String str70 = dateTimeField2.getAsText(1969, locale63);
        boolean boolean71 = dateTimeField2.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31536000000L + "'", long19 == 31536000000L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JPN" + "'", str67, "JPN");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "50" + "'", str69, "50");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1969" + "'", str70, "1969");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        long long16 = dateTimeField2.getDifferenceAsLong((long) (short) 10, (long) 360000000);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int22 = dateTimeField20.getLeapAmount((long) 0);
        int int24 = dateTimeField20.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int[] intArray30 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int31 = dateTimeField20.getMaximumValue(readablePartial25, intArray30);
        int int32 = dateTimeField20.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField20.getType();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37);
        java.lang.String str41 = dateTimeField20.getAsShortText(360000000, locale37);
        java.lang.String str42 = dateTimeField2.getAsShortText((long) 1910, locale37);
        java.lang.String str44 = dateTimeField2.getAsText(967766400000L);
        long long46 = dateTimeField2.roundFloor(31539540012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "360000000" + "'", str41, "360000000");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970" + "'", str42, "1970");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2000" + "'", str44, "2000");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31536000000L + "'", long46 == 31536000000L);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        long long22 = chronology16.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.minuteOfDay();
        long long27 = dateTimeField24.set((long) 13, 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1958L + "'", long22 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5820013L + "'", long27 == 5820013L);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        dateTimeParserBucket29.setOffset((java.lang.Integer) 100);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology49.hours();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology49, locale52, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField55 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone59.getMillisKeepLocal(dateTimeZone60, 1L);
        long long64 = dateTimeZone60.previousTransition(0L);
        org.joda.time.Chronology chronology65 = chronology49.withZone(dateTimeZone60);
        boolean boolean66 = dateTimeParserBucket29.restoreState((java.lang.Object) chronology49);
        org.joda.time.DurationField durationField67 = chronology49.weeks();
        org.joda.time.DateTimeField dateTimeField68 = chronology49.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long5 = dateTimeZone2.convertLocalToUTC(630288005148L, true);
        java.lang.String str7 = dateTimeZone2.getShortName((long) 59);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 630292205148L + "'", long5 == 630292205148L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:10" + "'", str7, "-01:10");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4200000) + "'", int9 == (-4200000));
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        java.util.Locale.Category category0 = null;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getCountry();
        java.util.Locale.setDefault(locale1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int30 = dateTimeField28.getLeapAmount((long) ' ');
        long long32 = dateTimeField28.roundFloor((long) 'x');
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeField28.getAsShortText(59, locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology21, locale34, (java.lang.Integer) 1970, 0);
        java.lang.String str40 = locale1.getDisplayVariant(locale34);
        java.lang.String str41 = locale1.getVariant();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale44 = new java.util.Locale("China");
        java.lang.String str45 = locale42.getDisplayLanguage(locale44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        boolean boolean51 = dateTimeField50.isLenient();
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale54.getDisplayName(locale56);
        java.lang.String str59 = dateTimeField50.getAsText(readablePartial52, (int) 'x', locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology47, locale56, (java.lang.Integer) (-1));
        java.util.Locale locale62 = dateTimeParserBucket61.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.US;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.lang.String str68 = locale65.getCountry();
        java.lang.String str69 = locale65.getISO3Country();
        dateTimeParserBucket61.saveField(dateTimeFieldType63, "CHN", locale65);
        java.lang.String str71 = locale42.getDisplayLanguage(locale65);
        java.lang.String str72 = locale1.getDisplayName(locale65);
        java.lang.String str73 = locale1.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str14, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str35, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "59" + "'", str36, "59");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals(locale44.toString(), "china");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str55, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese (Cina)" + "'", str58, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "120" + "'", str59, "120");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "JP" + "'", str68, "JP");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "JPN" + "'", str69, "JPN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str71, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str72, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        long long43 = chronology17.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology17.getZone();
        java.lang.String str59 = chronology17.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str30, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[UTC]" + "'", str59, "ISOChronology[UTC]");
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale.Builder builder23 = builder16.setUnicodeLocaleKeyword("99", "eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder16.setUnicodeLocaleKeyword("de_DE", "JPN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: de_DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str13, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) ' ');
        long long28 = dateTimeField24.roundFloor((long) 'x');
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = dateTimeField24.getAsShortText(59, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology17, locale30, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = chronology36.add(readablePeriod38, (-61851595800000L), 999);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.era();
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale48 = new java.util.Locale("UTC");
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        java.lang.String str53 = locale49.getDisplayCountry();
        java.lang.String str54 = locale48.getDisplayCountry(locale49);
        boolean boolean55 = locale48.hasExtensions();
        java.util.Locale.setDefault(category45, locale48);
        java.util.Locale locale58 = new java.util.Locale("Chinook jargon");
        java.lang.String str60 = locale58.getExtension('x');
        java.util.Locale.setDefault(category45, locale58);
        java.lang.String str62 = locale58.getDisplayVariant();
        java.lang.String str63 = locale58.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeField42.getAsShortText(readablePartial43, 19, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str31, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-61851595800000L) + "'", long41 == (-61851595800000L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals(locale48.toString(), "utc");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c" + "'", str53, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "chinook jargon");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology18.months();
        org.joda.time.DurationField durationField31 = chronology18.halfdays();
        org.joda.time.DurationField durationField32 = chronology18.halfdays();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfDay();
        org.joda.time.DurationField durationField53 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.millisOfSecond();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getLanguage();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60);
        java.lang.Integer int64 = dateTimeParserBucket63.getPivotYear();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology66, locale67, (java.lang.Integer) 1);
        java.lang.Object obj70 = dateTimeParserBucket69.saveState();
        long long71 = dateTimeParserBucket69.computeMillis();
        dateTimeParserBucket69.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        dateTimeParserBucket69.saveField(dateTimeFieldType74, "zh_CN", locale78);
        boolean boolean80 = dateTimeParserBucket63.restoreState((java.lang.Object) locale78);
        java.lang.String str81 = locale56.getDisplayVariant(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket(967766400010L, chronology50, locale78, (java.lang.Integer) 10);
        long long86 = dateTimeParserBucket83.computeMillis(false, "und");
        org.joda.time.DateTimeZone dateTimeZone87 = dateTimeParserBucket83.getZone();
        java.util.Locale locale91 = new java.util.Locale("888", "giapponese (Giappone)");
        java.util.Locale locale92 = java.util.Locale.JAPAN;
        java.util.Locale locale93 = java.util.Locale.US;
        java.lang.String str94 = locale92.getDisplayVariant(locale93);
        java.lang.String str95 = locale92.getDisplayScript();
        java.lang.String str96 = locale91.getDisplayLanguage(locale92);
        java.lang.String str97 = dateTimeZone87.getName(4039633920000L, locale92);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket98 = new org.joda.time.format.DateTimeParserBucket(5834880489601344L, chronology18, locale92);
        int int99 = dateTimeParserBucket98.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str43, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 967766400010L + "'", long86 == 967766400010L);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertEquals(locale91.toString(), "888_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "888" + "'", str96, "888");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+00:00" + "'", str97, "+00:00");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Collection<java.util.Locale> localeCollection10 = null;
        java.util.Locale.FilteringMode filteringMode11 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection10, filteringMode11);
        java.util.Locale locale16 = new java.util.Locale("Francia", "Italia", "GERMAN (GERMANY)");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleKeys();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("China");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = locale32.getDisplayCountry(locale33);
        java.util.Set<java.lang.String> strSet36 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int45 = dateTimeField43.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField46 = dateTimeField43.getDurationField();
        int int48 = dateTimeField43.getMaximumValue((long) (short) 1);
        long long50 = dateTimeField43.roundHalfEven((long) ' ');
        int int52 = dateTimeField43.getMinimumValue((long) 100);
        int int53 = dateTimeField43.getMinimumValue();
        java.util.Locale locale58 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str59 = dateTimeField43.getAsShortText((int) '#', locale58);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str64 = locale60.getExtension('a');
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.US;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.lang.String str68 = locale65.getCountry();
        java.lang.String str69 = locale65.getScript();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int74 = dateTimeField72.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField75 = dateTimeField72.getDurationField();
        int int77 = dateTimeField72.getMaximumValue((long) (short) 1);
        long long79 = dateTimeField72.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial80 = null;
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder85 = builder82.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder86 = builder82.clearExtensions();
        java.util.Locale locale87 = builder86.build();
        java.lang.String str88 = dateTimeField72.getAsShortText(readablePartial80, (int) (byte) 100, locale87);
        java.util.Set<java.lang.String> strSet89 = locale87.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet90 = locale87.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray91 = new java.util.Locale[] { locale32, locale38, locale40, locale58, locale60, locale65, locale87 };
        java.util.ArrayList<java.util.Locale> localeList92 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList92, localeArray91);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList92, filteringMode94);
        java.util.Locale locale96 = java.util.Locale.lookup(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList95);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + filteringMode11 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode11.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertEquals(locale16.toString(), "francia_ITALIA_GERMAN (GERMANY)");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str20, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "35" + "'", str59, "35");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "JP" + "'", str68, "JP");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 292278993 + "'", int77 == 292278993);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "100" + "'", str88, "100");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(localeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode94.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNull(locale96);
        org.junit.Assert.assertNotNull(localeList97);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        boolean boolean6 = dateTimeZone0.isFixed();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology13, locale14, (java.lang.Integer) 1);
        java.lang.String str17 = locale14.getScript();
        java.lang.String str18 = locale11.getDisplayScript(locale14);
        java.lang.String str19 = locale11.toLanguageTag();
        java.util.Locale.setDefault(category8, locale11);
        java.lang.String str21 = locale11.getDisplayScript();
        java.lang.String str22 = dateTimeZone0.getShortName(259200000L, locale11);
        java.lang.String str24 = locale11.getUnicodeLocaleType("fr");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder27 = builder25.setLocale(locale26);
        java.util.Locale locale29 = new java.util.Locale("China");
        java.util.Locale.Builder builder30 = builder27.setLocale(locale29);
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("French");
        java.util.Locale locale33 = builder32.build();
        java.util.Locale.Builder builder35 = builder32.setLanguageTag("Japan");
        java.util.Locale.Builder builder37 = builder35.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField43 = dateTimeField40.getDurationField();
        int int45 = dateTimeField40.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial46 = null;
        int[] intArray52 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int53 = dateTimeField40.getMaximumValue(readablePartial46, intArray52);
        java.util.Locale locale57 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology59, locale60, (java.lang.Integer) 1);
        java.lang.String str63 = locale60.getScript();
        java.lang.String str64 = locale57.getDisplayScript(locale60);
        java.util.Set<java.lang.String> strSet65 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str66 = dateTimeField40.getAsText((long) (-1), locale60);
        java.util.Locale.Builder builder67 = builder35.setLocale(locale60);
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = locale68.getVariant();
        java.util.Locale.setDefault(locale68);
        java.util.Locale locale73 = new java.util.Locale("", "tedesco");
        java.lang.String str74 = locale68.getDisplayScript(locale73);
        java.lang.String str75 = locale68.getDisplayCountry();
        java.util.Locale.Builder builder76 = builder35.setLocale(locale68);
        java.util.Locale.Builder builder77 = builder76.clearExtensions();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType80.getField(chronology81);
        boolean boolean83 = dateTimeField82.isLenient();
        org.joda.time.ReadablePartial readablePartial84 = null;
        java.util.Locale locale86 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str87 = locale86.getDisplayName();
        java.util.Locale locale88 = java.util.Locale.ITALY;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = locale86.getDisplayName(locale88);
        java.lang.String str91 = dateTimeField82.getAsText(readablePartial84, (int) 'x', locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology79, locale88, (java.lang.Integer) (-1));
        java.util.Locale locale94 = dateTimeParserBucket93.getLocale();
        java.util.Locale locale95 = dateTimeParserBucket93.getLocale();
        java.util.Locale.Builder builder96 = builder76.setLocale(locale95);
        java.lang.String str97 = locale11.getDisplayLanguage(locale95);
        java.lang.String str98 = locale11.getDisplayVariant();
        java.lang.String str99 = locale11.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale11.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(locale29.toString(), "china");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertEquals(locale57.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1969" + "'", str66, "1969");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals(locale73.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Italia" + "'", str75, "Italia");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "cinese (Cina)" + "'", str87, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "it" + "'", str89, "it");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "cinese (Cina)" + "'", str90, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "120" + "'", str91, "120");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology17, locale19, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.millisOfDay();
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = chronology17.get(readablePartial25, (long) (-16707702));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        long long14 = dateTimeField2.add(0L, (long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int33 = dateTimeField31.getLeapAmount((long) 0);
        int int35 = dateTimeField31.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial36 = null;
        int[] intArray41 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int42 = dateTimeField31.getMaximumValue(readablePartial36, intArray41);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int48 = dateTimeField46.getLeapAmount((long) 0);
        int int50 = dateTimeField46.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial51 = null;
        int[] intArray56 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int57 = dateTimeField46.getMaximumValue(readablePartial51, intArray56);
        int int58 = dateTimeField31.getMinimumValue(readablePartial43, intArray56);
        int int59 = dateTimeField18.getMaximumValue(readablePartial28, intArray56);
        int int60 = dateTimeField2.getMinimumValue(readablePartial15, intArray56);
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = locale62.getDisplayVariant();
        java.lang.String str68 = locale62.getVariant();
        java.lang.String str69 = locale62.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField2.getAsShortText(readablePartial61, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "cinese (Cina)" + "'", str63, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setExtension('4', "zh_cn (CHINA)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.setLanguage("fr");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.setLanguage("France");
        java.util.Locale.Builder builder20 = builder18.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setLanguage("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: zh_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Giappone" + "'", str9, "Giappone");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        int int18 = dateTimeParserBucket15.getOffset();
        dateTimeParserBucket15.setOffset((java.lang.Integer) 365);
        long long22 = dateTimeParserBucket15.computeMillis(false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-355L) + "'", long22 == (-355L));
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long9 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        dateTimeParserBucket4.saveField(dateTimeField28, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.util.TimeZone timeZone36 = dateTimeZone32.toTimeZone();
        java.util.Locale locale41 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str42 = dateTimeZone32.getShortName((long) 'x', locale41);
        java.lang.String str43 = locale41.getDisplayVariant();
        java.lang.String str44 = locale41.getDisplayLanguage();
        int int45 = dateTimeField28.getMaximumShortTextLength(locale41);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeField28.getAsShortText(0, locale47);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals(locale41.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh_cn" + "'", str44, "zh_cn");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale22, (java.lang.Integer) 4, 1970);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology17.add(readablePeriod29, (-1869L), 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology17.add(readablePeriod33, (long) ' ', 36000000);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1869L) + "'", long32 == (-1869L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 32L + "'", long36 == 32L);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.ReadablePartial readablePartial44 = null;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField42.getAsText(readablePartial44, (int) 'x', locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology39, locale48, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.hourOfDay();
        int int59 = dateTimeField56.getDifference((long) 292278993, 0L);
        dateTimeParserBucket36.saveField(dateTimeField56, 0);
        java.lang.Object obj62 = dateTimeParserBucket36.saveState();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cinese (Cina)" + "'", str47, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cinese (Cina)" + "'", str50, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 81 + "'", int59 == 81);
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DateTimeField[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[yearofcentury]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = chronology16.withUTC();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology16.add(readablePeriod25, (long) 360000000, (-292275054));
        org.joda.time.DateTimeField dateTimeField29 = chronology16.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeField29.set(12L, "en_US");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en_US\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 360000000L + "'", long28 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = chronology17.get(readablePeriod28, (-152830368000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zho", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("zho", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap9);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet14);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("zho", strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet28);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.util.Set<java.lang.String> strSet36 = locale31.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale locale40 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale39.getDisplayCountry(locale40);
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strSet43, filteringMode44);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet36, filteringMode44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList15, filteringMode44);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.parse("USA");
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList49, (java.util.Collection<java.lang.String>) strSet51);
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap54);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str32, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeList55);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale locale21 = builder16.build();
        java.util.Locale.Builder builder23 = builder16.setVariant("86399");
        java.util.Locale.Builder builder26 = builder16.setExtension('x', "Germania");
        java.util.Locale.Builder builder27 = builder16.clearExtensions();
        java.util.Locale.Builder builder29 = builder16.setVariant("canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("DateTimeField[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[millisOfSecond] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.eras();
        org.joda.time.DurationField durationField19 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology16.getDateTimeMillis(5, 36000000, 1439, 8, 100, (-1), 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DateTimeField[yearOfEra]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("+00:59");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: +00:59");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.UK;
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "Chinese (China)", locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType16.getField(chronology36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        java.lang.String str59 = chronology58.toString();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfDay();
        org.joda.time.DurationField durationField61 = chronology58.centuries();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long67 = dateTimeZone64.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        int int73 = dateTimeField71.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField74 = dateTimeField71.getDurationField();
        int int76 = dateTimeField71.getMaximumValue((long) (short) 1);
        long long78 = dateTimeField71.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial79 = null;
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder84 = builder81.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder85 = builder81.clearExtensions();
        java.util.Locale locale86 = builder85.build();
        java.lang.String str87 = dateTimeField71.getAsShortText(readablePartial79, (int) (byte) 100, locale86);
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleKeys();
        java.lang.String str89 = dateTimeZone64.getShortName((long) 1970, locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale86);
        org.joda.time.DateTimeField dateTimeField91 = chronology58.weekyear();
        org.joda.time.DateTimeField dateTimeField92 = chronology58.millisOfSecond();
        boolean boolean93 = dateTimeFieldType16.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField94 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField95 = chronology58.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone96 = chronology58.getZone();
        org.joda.time.DateTimeField dateTimeField97 = chronology58.halfdayOfDay();
        int int99 = dateTimeField97.getMinimumValue(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (China)" + "'", str29, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[UTC]" + "'", str59, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4200000L + "'", long67 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 292278993 + "'", int76 == 292278993);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100" + "'", str87, "100");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-01:10" + "'", str89, "-01:10");
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("Francia");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("allemand");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setVariant("Okt");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Okt [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfWeek();
        boolean boolean26 = dateTimeField25.isSupported();
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField25.getMinimumValue(readablePartial27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = locale31.getISO3Country();
        java.lang.String str35 = locale31.getLanguage();
        java.util.Locale locale37 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField43 = dateTimeField40.getDurationField();
        int int45 = dateTimeField40.getMaximumValue((long) (short) 1);
        long long47 = dateTimeField40.roundHalfEven((long) ' ');
        int int49 = dateTimeField40.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale54 = new java.util.Locale("", "Chinese (China)");
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = dateTimeField40.getAsShortText(readablePartial50, (int) (short) -1, locale54);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale58);
        java.lang.String str60 = dateTimeField40.getAsShortText((long) (byte) 100, locale58);
        java.lang.String str61 = locale37.getDisplayLanguage(locale58);
        boolean boolean62 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet63 = locale37.getUnicodeLocaleKeys();
        java.lang.String str64 = locale31.getDisplayVariant(locale37);
        java.lang.String str65 = locale37.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = dateTimeField25.getAsText(readablePartial29, 11, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Cina" + "'", str33, "Cina");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CHN" + "'", str34, "CHN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
        org.junit.Assert.assertEquals(locale37.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals(locale54.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "china" + "'", str61, "china");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "china" + "'", str65, "china");
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        int int29 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        int int31 = dateTimeZone24.getOffsetFromLocal(4200000L);
        boolean boolean33 = dateTimeZone24.isStandardOffset((long) 1439);
        boolean boolean35 = dateTimeZone24.isStandardOffset(4L);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekOfWeekyear();
        long long40 = dateTimeField38.remainder(540000L);
        long long42 = dateTimeField38.roundHalfCeiling(3061065600000L);
        long long44 = dateTimeField38.roundHalfEven((-1639L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 259740000L + "'", long40 == 259740000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3061238400000L + "'", long42 == 3061238400000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-259200000L) + "'", long44 == (-259200000L));
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = dateTimeField33.set((-61378212300000L), "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguage("GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguage("-14:10:11.448");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: -14:10:11.448 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        long long43 = chronology17.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = chronology17.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology17.add(readablePeriod59, 9223371985593600000L, 11400999);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9223371985593600000L + "'", long62 == 9223371985593600000L);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket4.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int16 = dateTimeField14.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField17 = dateTimeField14.getDurationField();
        java.lang.String str18 = dateTimeField14.toString();
        dateTimeParserBucket4.saveField(dateTimeField14, (int) (byte) 10);
        java.util.Locale locale21 = dateTimeParserBucket4.getLocale();
        long long24 = dateTimeParserBucket4.computeMillis(false, "2098");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[yearOfEra]" + "'", str18, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-61820064000101L) + "'", long24 == (-61820064000101L));
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("December");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        boolean boolean5 = languageRange1.equals((java.lang.Object) 345600000L);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "december" + "'", str3, "december");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology16.getZone();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = chronology16.get(readablePeriod24, 12L, 31795740000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology16.getDateTimeMillis(2, 9, 1999, (int) (byte) 10, (-54), 2077, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -54 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = chronology36.hours();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder41 = builder39.setLocale(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        java.lang.String str54 = locale40.getDisplayLanguage(locale50);
        java.lang.String str55 = locale40.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology36, locale40);
        org.joda.time.DurationField durationField57 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField58 = chronology36.dayOfMonth();
        long long62 = chronology36.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology64, locale65, (java.lang.Integer) 1);
        java.lang.Object obj68 = dateTimeParserBucket67.saveState();
        long long69 = dateTimeParserBucket67.computeMillis();
        java.lang.Object obj70 = dateTimeParserBucket67.saveState();
        dateTimeParserBucket67.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeParserBucket67.getZone();
        org.joda.time.Chronology chronology74 = chronology36.withZone(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        int int76 = dateTimeZone73.getOffset(readableInstant75);
        long long78 = dateTimeZone18.getMillisKeepLocal(dateTimeZone73, 4190400009L);
        long long81 = dateTimeZone18.convertLocalToUTC(0L, false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (China)" + "'", str29, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tedesco" + "'", str54, "tedesco");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 22L + "'", long62 == 22L);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 4190400009L + "'", long78 == 4190400009L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true);
        java.lang.String str8 = dateTimeZone1.getShortName((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int15 = dateTimeField12.getDifference((long) 12, 1L);
        long long17 = dateTimeField12.roundHalfCeiling((long) 100);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getVariant();
        java.util.Locale.setDefault(locale18);
        int int21 = dateTimeField12.getMaximumTextLength(locale18);
        java.lang.String str22 = dateTimeZone1.getShortName((long) 86399, locale18);
        java.lang.String str23 = locale18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it_IT" + "'", str23, "it_IT");
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        long long28 = dateTimeField25.set((long) (-292275054), "24");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.centuryOfEra();
        java.util.Locale locale53 = new java.util.Locale("1970");
        java.lang.String str54 = dateTimeField50.getAsShortText((-61062681600000L), locale53);
        java.lang.String str55 = dateTimeField25.getAsText((long) 10, locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder56 = builder2.setLocale(locale53);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61378506675054L) + "'", long28 == (-61378506675054L));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale53.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970" + "'", str55, "1970");
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology17.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("-4200000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology16.getDateTimeMillis((-43100L), (int) (byte) 1, (-1977), 23, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1977 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        int int26 = dateTimeField18.getMaximumShortTextLength(locale23);
        java.lang.String str27 = locale23.getISO3Language();
        java.lang.String str28 = locale23.getDisplayName();
        java.util.Set<java.lang.Character> charSet29 = locale23.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deu" + "'", str27, "deu");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tedesco (Germania)" + "'", str28, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(charSet29);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.lang.String str21 = locale10.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet22 = locale17.getUnicodeLocaleKeys();
        java.lang.String str23 = locale17.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italy" + "'", str21, "Italy");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Stati Uniti" + "'", str23, "Stati Uniti");
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Chinook jargon");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Chinook jargon' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        java.util.Locale locale1 = new java.util.Locale("\u30ab\u30ca\u30c0");
        org.junit.Assert.assertEquals(locale1.toString(), "\u30ab\u30ca\u30c0");
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DurationField durationField39 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.dayOfMonth();
        long long44 = chronology18.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet65 = locale62.getExtensionKeys();
        java.lang.String str66 = locale55.getDisplayCountry(locale62);
        java.lang.String str67 = locale55.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((-61914758400000L), chronology18, locale55);
        java.lang.String str69 = locale55.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 22L + "'", long44 == 22L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Italy" + "'", str66, "Italy");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "it" + "'", str69, "it");
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder45 = builder10.setUnicodeLocaleKeyword("52", "jpn");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder45.setScript("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyear();
        java.lang.String str29 = dateTimeField28.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeField28.add((-18934128000000L), 18616435200032L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 18616435200032");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyear" + "'", str29, "weekyear");
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.centuryOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField49 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.yearOfEra();
        java.util.Locale locale52 = java.util.Locale.US;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = dateTimeField50.getAsText((int) (byte) 10, locale52);
        java.util.Locale locale56 = new java.util.Locale("UTC");
        java.lang.String str57 = locale52.getDisplayScript(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(1439L, chronology18, locale56, (java.lang.Integer) 1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology18.add(readablePeriod60, 3692217600000L, (-1));
        org.joda.time.DurationField durationField64 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = chronology18.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long68 = dateTimeField65.add(45789148801098L, (-8699192399000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -869919239900000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "USA" + "'", str53, "USA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertEquals(locale56.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3692217600000L + "'", long63 == 3692217600000L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder27 = builder23.setLocale(locale26);
        java.lang.String str28 = dateTimeField20.getAsText(readablePartial21, (int) (byte) 100, locale26);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("ISOChronology[UTC]");
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale26.getDisplayLanguage(locale31);
        java.lang.String str34 = locale26.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        org.joda.time.Chronology chronology40 = chronology18.withUTC();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("ISOChronology[UTC]");
        java.lang.String str43 = locale42.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(946684800000L, chronology18, locale42, (java.lang.Integer) 421200000);
        int int46 = dateTimeParserBucket45.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        int int12 = dateTimeField2.getMaximumValue();
        java.lang.String str13 = dateTimeField2.getName();
        int int14 = dateTimeField2.getMaximumValue();
        org.joda.time.DurationField durationField15 = dateTimeField2.getRangeDurationField();
        long long18 = dateTimeField2.set((-8L), 1970);
        int int19 = dateTimeField2.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 31535999992L + "'", long18 == 31535999992L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.secondOfMinute();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        boolean boolean39 = locale38.hasExtensions();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology9, locale38);
        org.joda.time.DateTimeField dateTimeField42 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField50 = dateTimeField47.getDurationField();
        int int52 = dateTimeField47.getMaximumValue((long) (short) 1);
        long long54 = dateTimeField47.roundHalfEven((long) ' ');
        int int56 = dateTimeField47.getMinimumValue((long) 100);
        int int57 = dateTimeField47.getMinimumValue();
        java.util.Locale locale62 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str63 = dateTimeField47.getAsShortText((int) '#', locale62);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int70 = dateTimeField68.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField71 = dateTimeField68.getDurationField();
        int int73 = dateTimeField68.getMaximumValue((long) (short) 1);
        long long75 = dateTimeField68.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder78.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder82 = builder78.clearExtensions();
        java.util.Locale locale83 = builder82.build();
        java.lang.String str84 = dateTimeField68.getAsShortText(readablePartial76, (int) (byte) 100, locale83);
        java.lang.String str85 = locale65.getDisplayScript(locale83);
        java.lang.String str86 = dateTimeField47.getAsText(360000000L, locale83);
        java.lang.String str87 = locale83.toLanguageTag();
        java.util.Set<java.lang.Character> charSet88 = locale83.getExtensionKeys();
        java.lang.String str89 = dateTimeField43.getAsText((long) 53, locale83);
        java.lang.String str90 = locale83.getCountry();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "35" + "'", str63, "35");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "100" + "'", str84, "100");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970" + "'", str86, "1970");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0" + "'", str89, "0");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale locale21 = builder16.build();
        java.util.Locale.Builder builder23 = builder16.setVariant("86399");
        java.util.Locale.Builder builder26 = builder16.setExtension('x', "Germania");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder16.addUnicodeLocaleAttribute("South Korea");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: South Korea [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        int int32 = dateTimeZone25.getOffsetFromLocal(0L);
        long long34 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology37 = chronology17.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = chronology17.months();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology17.getZone();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology41, locale42, (java.lang.Integer) 1);
        java.lang.Object obj45 = dateTimeParserBucket44.saveState();
        long long46 = dateTimeParserBucket44.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone47.getMillisKeepLocal(dateTimeZone48, 1L);
        java.lang.String str51 = dateTimeZone48.getID();
        dateTimeParserBucket44.setZone(dateTimeZone48);
        java.lang.String str53 = dateTimeZone48.getID();
        long long55 = dateTimeZone48.nextTransition(4042053120000L);
        long long57 = dateTimeZone39.getMillisKeepLocal(dateTimeZone48, (long) 421200000);
        int int59 = dateTimeZone48.getOffset((-62104024799990L));
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = dateTimeZone48.getOffset(readableInstant60);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4042053120000L + "'", long55 == 4042053120000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 421200000L + "'", long57 == 421200000L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        dateTimeParserBucket5.saveField(dateTimeField34, (int) (byte) 100);
        java.lang.Integer int37 = dateTimeParserBucket5.getOffsetInteger();
        java.lang.Object obj38 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 421200000);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str20, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        org.joda.time.Chronology chronology39 = chronology17.withUTC();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = dateTimeField42.getRangeDurationField();
        java.util.Locale locale44 = null;
        int int45 = dateTimeField42.getMaximumTextLength(locale44);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str30, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        java.util.Locale locale24 = new java.util.Locale("Chinese (China)", "7");
        java.lang.String str25 = dateTimeField20.getAsShortText(97, locale24);
        java.lang.String str26 = locale24.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = locale24.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for chinese (china)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (china)_7");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "97" + "'", str25, "97");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        dateTimeParserBucket22.saveField(dateTimeFieldType25, 12);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket22.getZone();
        java.util.Locale locale29 = dateTimeParserBucket22.getLocale();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        java.lang.String str34 = dateTimeZone31.getID();
        long long37 = dateTimeZone31.adjustOffset(31L, false);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = dateTimeZone31.getName((long) 0, locale39);
        boolean boolean43 = dateTimeZone31.isStandardOffset((long) 360000000);
        long long45 = dateTimeZone31.convertUTCToLocal((long) 1439);
        long long49 = dateTimeZone31.convertLocalToUTC(360000127L, true, (long) 3);
        dateTimeParserBucket22.setZone(dateTimeZone31);
        java.lang.String str52 = dateTimeZone31.getShortName((long) 70);
        int int54 = dateTimeZone31.getOffset((-8L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31L + "'", long37 == 31L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1439L + "'", long45 == 1439L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 360000127L + "'", long49 == 360000127L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = dateTimeField20.set(readablePartial21, 10, intArray23, (-16707702));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16707702 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = dateTimeZone9.getShortName((long) 100, locale14);
        dateTimeParserBucket4.setZone(dateTimeZone9);
        java.lang.String str20 = dateTimeZone9.getNameKey((long) '#');
        long long22 = dateTimeZone9.previousTransition(363L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 363L + "'", long22 == 363L);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder44 = builder42.clear();
        java.util.Locale.Builder builder47 = builder44.setExtension('x', "127");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.setLanguage("china");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder43.setRegion("jan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: jan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology27.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.seconds();
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology58, locale60, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.secondOfDay();
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("117");
        java.lang.String str66 = locale65.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology58, locale65, (java.lang.Integer) 2077);
        java.lang.String str69 = dateTimeField38.getAsShortText((long) 421200000, locale65);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = dateTimeField38.set(32440608000000L, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970" + "'", str69, "1970");
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfMinute();
        int int40 = dateTimeField38.getMaximumValue(0L);
        java.lang.String str41 = dateTimeField38.getName();
        dateTimeParserBucket15.saveField(dateTimeField38, 1969);
        long long45 = dateTimeField38.roundHalfFloor((-97519L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (China)" + "'", str27, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "secondOfMinute" + "'", str41, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-98000L) + "'", long45 == (-98000L));
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        java.util.Locale locale1 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int6 = dateTimeField4.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField7 = dateTimeField4.getDurationField();
        int int9 = dateTimeField4.getMaximumValue((long) (short) 1);
        long long11 = dateTimeField4.roundHalfEven((long) ' ');
        int int13 = dateTimeField4.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "Chinese (China)");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = dateTimeField4.getAsShortText(readablePartial14, (int) (short) -1, locale18);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = dateTimeField4.getAsShortText((long) (byte) 100, locale22);
        java.lang.String str25 = locale1.getDisplayLanguage(locale22);
        java.lang.String str26 = locale22.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale18.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "china" + "'", str25, "china");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) ' ');
        long long28 = dateTimeField24.roundFloor((long) 'x');
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = dateTimeField24.getAsShortText(59, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology17, locale30, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.era();
        java.util.Locale locale41 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str42 = locale41.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTimeField37.getAsText(2067, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2067");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale41.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getVariant();
        java.util.Locale.setDefault(locale43);
        java.util.Locale locale48 = new java.util.Locale("", "tedesco");
        java.lang.String str49 = locale43.getDisplayScript(locale48);
        java.lang.String str50 = locale43.getDisplayCountry();
        java.util.Locale.Builder builder51 = builder10.setLocale(locale43);
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology54, locale63, (java.lang.Integer) (-1));
        java.util.Locale locale69 = dateTimeParserBucket68.getLocale();
        java.util.Locale locale70 = dateTimeParserBucket68.getLocale();
        java.util.Locale.Builder builder71 = builder51.setLocale(locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder73 = builder71.setRegion("+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale48.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italia" + "'", str50, "Italia");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cinese (Cina)" + "'", str62, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.lang.String str3 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        java.lang.String str5 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millisOfSecond" + "'", str3, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfSecond" + "'", str5, "millisOfSecond");
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfYear();
        java.lang.Class<?> wildcardClass35 = chronology26.getClass();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int10 = dateTimeField8.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField11 = dateTimeField8.getDurationField();
        int int13 = dateTimeField8.getMaximumValue((long) (short) 1);
        long long15 = dateTimeField8.roundHalfEven((long) ' ');
        int int17 = dateTimeField8.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale22 = new java.util.Locale("", "Chinese (China)");
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = dateTimeField8.getAsShortText(readablePartial18, (int) (short) -1, locale22);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale26);
        java.lang.String str28 = dateTimeField8.getAsShortText((long) (byte) 100, locale26);
        java.util.Locale.setDefault(category4, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet31, filteringMode32);
        java.util.Collection<java.util.Locale> localeCollection34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter(languageRangeList3, localeCollection34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals(locale22.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1" + "'", str24, "-1");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList33);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        long long9 = dateTimeParserBucket4.computeMillis(true);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket4.getChronology();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setUnicodeLocaleKeyword("german", "cinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: german [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology3, locale4, (java.lang.Integer) 1);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        long long8 = dateTimeParserBucket6.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket6.saveState();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        boolean boolean31 = dateTimeParserBucket6.restoreState((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType1.getField(chronology28);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(1958L, chronology28, locale34, (java.lang.Integer) 1439);
        dateTimeParserBucket36.setOffset((java.lang.Integer) 1439);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        boolean boolean44 = dateTimeField43.isLenient();
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.lang.String str52 = dateTimeField43.getAsText(readablePartial45, (int) 'x', locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology40, locale49, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.dayOfMonth();
        boolean boolean62 = dateTimeParserBucket36.restoreState((java.lang.Object) chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "120" + "'", str52, "120");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        java.util.Locale locale2 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology4, locale5, (java.lang.Integer) 1);
        java.lang.String str8 = locale5.getScript();
        java.lang.String str9 = locale2.getDisplayScript(locale5);
        java.lang.String str10 = locale2.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale2.getVariant();
        java.lang.String str13 = locale2.getISO3Language();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long18 = dateTimeField16.roundHalfEven((long) (-1));
        long long20 = dateTimeField16.roundCeiling((long) (byte) 1);
        boolean boolean21 = locale2.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertEquals(locale2.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        java.lang.String str20 = dateTimeField17.getAsText(19180800120L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        long long20 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        java.lang.String str26 = dateTimeZone21.getNameKey((long) '#');
        long long30 = dateTimeZone21.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str32 = dateTimeZone21.getNameKey((-58979923200001L));
        java.lang.String str34 = dateTimeZone21.getShortName((long) (byte) -1);
        long long37 = dateTimeZone21.convertLocalToUTC(31536000000L, true);
        dateTimeParserBucket15.setZone(dateTimeZone21);
        long long40 = dateTimeParserBucket15.computeMillis(false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31536000000L + "'", long37 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        java.util.Locale locale2 = new java.util.Locale("hi!", "Chinese");
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_CHINESE");
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1910, 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 86399");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=32.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        boolean boolean30 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType0.getField(chronology27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.millis();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getCountry();
        java.util.Locale.setDefault(locale54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        boolean boolean63 = dateTimeField62.isLenient();
        org.joda.time.ReadablePartial readablePartial64 = null;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale66.getDisplayName();
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = locale66.getDisplayName(locale68);
        java.lang.String str71 = dateTimeField62.getAsText(readablePartial64, (int) 'x', locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology59, locale68, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.yearOfEra();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType79.getField(chronology80);
        int int83 = dateTimeField81.getLeapAmount((long) ' ');
        long long85 = dateTimeField81.roundFloor((long) 'x');
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str88 = locale87.getDisplayName();
        java.lang.String str89 = dateTimeField81.getAsShortText(59, locale87);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology74, locale87, (java.lang.Integer) 1970, 0);
        java.lang.String str93 = locale54.getDisplayVariant(locale87);
        java.lang.String str94 = dateTimeField52.getAsText(378691200100L, locale54);
        java.lang.String str96 = locale54.getExtension('x');
        java.lang.String str97 = dateTimeField32.getAsShortText(81, locale54);
        java.lang.String str98 = locale54.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str67, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "it" + "'", str69, "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "cinese (Cina)" + "'", str70, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "120" + "'", str71, "120");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str88, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "59" + "'", str89, "59");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "24" + "'", str94, "24");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "81" + "'", str97, "81");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField22.getMaximumValue(readablePartial25);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = dateTimeField22.getAsShortText(0L, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale28);
        org.joda.time.DateTimeField dateTimeField35 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField36 = chronology17.years();
        org.joda.time.DurationField durationField37 = chronology17.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone1.getOffsetFromLocal((long) (byte) 10);
        long long8 = dateTimeZone1.convertLocalToUTC((long) 1, false);
        java.lang.String str10 = dateTimeZone1.getName((long) 2922789);
        long long13 = dateTimeZone1.adjustOffset((long) 292320000, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 292320000L + "'", long13 == 292320000L);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        long long17 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int22 = dateTimeField20.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField23 = dateTimeField20.getDurationField();
        int int25 = dateTimeField20.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int[] intArray32 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int33 = dateTimeField20.getMaximumValue(readablePartial26, intArray32);
        boolean boolean34 = dateTimeField20.isSupported();
        boolean boolean35 = dateTimeParserBucket4.restoreState((java.lang.Object) dateTimeField20);
        long long37 = dateTimeParserBucket4.computeMillis(false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2L) + "'", long17 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-2L) + "'", long37 == (-2L));
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology16.years();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfDay();
        int int25 = dateTimeField22.getDifference(967770600000L, (-4199990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 967774799 + "'", int25 == 967774799);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType26.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        boolean boolean56 = dateTimeField55.isLenient();
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale59.getDisplayName(locale61);
        java.lang.String str64 = dateTimeField55.getAsText(readablePartial57, (int) 'x', locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology52, locale61, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial70 = null;
        int[] intArray71 = null;
        int int72 = dateTimeField69.getMinimumValue(readablePartial70, intArray71);
        org.joda.time.ReadablePartial readablePartial73 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType75.getField(chronology76);
        int int79 = dateTimeField77.getLeapAmount((long) 0);
        int int81 = dateTimeField77.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial82 = null;
        int[] intArray87 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int88 = dateTimeField77.getMaximumValue(readablePartial82, intArray87);
        int[] intArray90 = dateTimeField69.add(readablePartial73, (int) 'a', intArray87, (int) (short) 0);
        int int91 = dateTimeField49.getMaximumValue(readablePartial50, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField23.set(readablePartial24, 0, intArray90, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str36, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str60, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "it" + "'", str62, "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "cinese (Cina)" + "'", str63, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "120" + "'", str64, "120");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 292278993 + "'", int88 == 292278993);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 99 + "'", int91 == 99);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder10.setLanguage("USA");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("Japan");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField27 = dateTimeField24.getDurationField();
        int int29 = dateTimeField24.getMaximumValue((long) (short) 1);
        long long31 = dateTimeField24.roundHalfEven((long) ' ');
        int int33 = dateTimeField24.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial34 = null;
        int int35 = dateTimeField24.getMaximumValue(readablePartial34);
        int int37 = dateTimeField24.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = dateTimeField24.getAsShortText(readablePartial38, 100, locale41);
        java.lang.String str45 = locale21.getDisplayName(locale41);
        java.lang.String str46 = locale41.getDisplayCountry();
        java.util.Locale.setDefault(locale41);
        java.lang.String str48 = locale41.getDisplayCountry();
        java.util.Locale.Builder builder49 = builder19.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder49.setExtension('a', "f\351vr.");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: fe?vr. [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "japan");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "japan" + "'", str45, "japan");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd" + "'", str46, "\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "United States" + "'", str48, "United States");
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale locale17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setRegion("italia");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: italia [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder10.removeUnicodeLocaleAttribute("2098");
        java.util.Locale.Builder builder17 = builder14.setExtension('x', "kor");
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("December");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setLanguageTag("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: zh_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("yearOfCentury", "70");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: yearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((-58979923200001L));
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) -1);
        boolean boolean15 = dateTimeZone0.isStandardOffset(999L);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        long long18 = dateTimeZone0.nextTransition((long) 11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11L + "'", long18 == 11L);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("998");
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("japan");
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.lang.String str13 = locale10.toLanguageTag();
        java.lang.String str14 = locale10.getScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja-JP" + "'", str13, "ja-JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("Japan");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        int int7 = dateTimeField5.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField8 = dateTimeField5.getDurationField();
        int int10 = dateTimeField5.getMaximumValue((long) (short) 1);
        long long12 = dateTimeField5.roundHalfEven((long) ' ');
        int int14 = dateTimeField5.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField5.getMaximumValue(readablePartial15);
        int int18 = dateTimeField5.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = dateTimeField5.getAsShortText(readablePartial19, 100, locale22);
        java.lang.String str26 = locale2.getDisplayName(locale22);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale.setDefault(locale27);
        java.lang.String str30 = locale22.getDisplayScript(locale27);
        java.util.Set<java.lang.Character> charSet31 = locale22.getExtensionKeys();
        boolean boolean32 = locale0.equals((java.lang.Object) locale22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "japan");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "japan" + "'", str26, "japan");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        long long22 = dateTimeField15.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder29 = builder25.clearExtensions();
        java.util.Locale locale30 = builder29.build();
        java.lang.String str31 = dateTimeField15.getAsShortText(readablePartial23, (int) (byte) 100, locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = locale11.getDisplayName(locale30);
        java.util.Locale locale37 = new java.util.Locale("zh", "weekyear", "en_US");
        java.lang.String str38 = locale11.getDisplayName(locale37);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale42 = new java.util.Locale("UTC");
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleKeys();
        java.lang.String str47 = locale43.getDisplayCountry();
        java.lang.String str48 = locale42.getDisplayCountry(locale43);
        boolean boolean49 = locale42.hasExtensions();
        java.util.Locale.setDefault(category39, locale42);
        java.lang.String str51 = locale42.getDisplayCountry();
        java.lang.String str52 = locale11.getDisplayName(locale42);
        java.util.Locale.Builder builder53 = builder7.setLocale(locale42);
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale55);
        java.lang.String str57 = locale54.getDisplayCountry(locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int62 = dateTimeField60.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField63 = dateTimeField60.getDurationField();
        int int65 = dateTimeField60.getMaximumValue((long) (short) 1);
        long long67 = dateTimeField60.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial68 = null;
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder70.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder74 = builder70.clearExtensions();
        java.util.Locale locale75 = builder74.build();
        java.lang.String str76 = dateTimeField60.getAsShortText(readablePartial68, (int) (byte) 100, locale75);
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleKeys();
        java.lang.String str78 = locale55.getDisplayScript(locale75);
        java.util.Locale.Builder builder79 = builder7.setLocale(locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder81 = builder79.setLanguageTag("\u65e5\u6587\u65e5\u672c)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German (Germany)" + "'", str33, "German (Germany)");
        org.junit.Assert.assertEquals(locale37.toString(), "zh_WEEKYEAR_en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str38, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals(locale42.toString(), "utc");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u65e5\u672c" + "'", str47, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German (Germany)" + "'", str52, "German (Germany)");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "100" + "'", str76, "100");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("421200000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=421200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField13 = chronology7.millis();
        org.joda.time.DurationField durationField14 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int23 = dateTimeField21.getLeapAmount((long) ' ');
        long long26 = dateTimeField21.add((long) (-1), (int) (byte) 1);
        long long29 = dateTimeField21.add(0L, 97L);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean37 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField36.getAsText(readablePartial38, (int) 'x', locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology33, locale42, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.secondOfMinute();
        long long55 = dateTimeField52.add((long) 1, (long) 'x');
        java.util.Locale locale57 = java.util.Locale.US;
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = dateTimeField52.getAsText((int) (byte) 0, locale57);
        java.lang.String str60 = dateTimeField21.getAsText(readablePartial30, 9, locale57);
        java.lang.String str62 = dateTimeField21.getAsShortText(1958L);
        org.joda.time.ReadablePartial readablePartial63 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        int int68 = dateTimeField66.getLeapAmount((long) 0);
        int int70 = dateTimeField66.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial71 = null;
        int[] intArray76 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int77 = dateTimeField66.getMaximumValue(readablePartial71, intArray76);
        int int78 = dateTimeField21.getMaximumValue(readablePartial63, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField16.add(readablePartial17, 52, intArray76, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31535999999L + "'", long26 == 31535999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3061065600000L + "'", long29 == 3061065600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (China)" + "'", str41, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "120" + "'", str45, "120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 120001L + "'", long55 == 120001L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "USA" + "'", str58, "USA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9" + "'", str60, "9");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 292278993 + "'", int77 == 292278993);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 292278993 + "'", int78 == 292278993);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        int int21 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        java.lang.String str25 = dateTimeFieldType22.getName();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder32 = builder30.setLocale(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        dateTimeParserBucket15.saveField(dateTimeFieldType22, "Canada", locale27);
        java.lang.Integer int35 = dateTimeParserBucket15.getOffsetInteger();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeParserBucket15.computeMillis(false, "chinese (china)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"chinese (china)\": Value \"Canada\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Taiwan" + "'", str33, "Taiwan");
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        org.joda.time.Chronology chronology39 = chronology17.withUTC();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DurationField durationField42 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType22.getField(chronology39);
        java.util.Locale locale48 = new java.util.Locale("DateTimeField[millisOfSecond]", "Italy", "halfdayOfDay");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(439L, chronology39, locale48, (java.lang.Integer) 35, (-3600000));
        java.util.Locale locale52 = locale48.stripExtensions();
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.lang.String str54 = locale52.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals(locale48.toString(), "datetimefield[millisofsecond]_ITALY_halfdayOfDay");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "datetimefield[millisofsecond]_ITALY_halfdayOfDay");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "und" + "'", str54, "und");
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology18, locale20, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.secondOfDay();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("117");
        java.lang.String str26 = locale25.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology18, locale25, (java.lang.Integer) 2077);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31);
        java.lang.Integer int35 = dateTimeParserBucket34.getPivotYear();
        long long38 = dateTimeParserBucket34.computeMillis(true, "120");
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        dateTimeParserBucket28.saveField(dateTimeField41, (-1277984));
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeParserBucket28.computeMillis();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1277984 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setVariant("86399");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("Japan");
        java.util.Locale.Builder builder18 = builder15.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder18.setUnicodeLocaleKeyword("127", "0");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 127 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "japan");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology19, locale21, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int29 = dateTimeField27.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField30 = dateTimeField27.getDurationField();
        int int32 = dateTimeField27.getMaximumValue((long) (short) 1);
        long long34 = dateTimeField27.roundHalfEven((long) ' ');
        int int36 = dateTimeField27.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale41 = new java.util.Locale("", "Chinese (China)");
        boolean boolean42 = locale41.hasExtensions();
        java.lang.String str43 = dateTimeField27.getAsShortText(readablePartial37, (int) (short) -1, locale41);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale45);
        java.lang.String str47 = dateTimeField27.getAsShortText((long) (byte) 100, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        int int50 = dateTimeField24.getMaximumTextLength(locale45);
        java.util.Locale.setDefault(category0, locale45);
        java.util.Locale locale52 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        boolean boolean59 = dateTimeField58.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = dateTimeField58.getAsText(readablePartial60, (int) 'x', locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology55, locale64, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DurationField durationField72 = chronology70.hours();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology70, locale73, (java.lang.Integer) 0);
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale76.getVariant();
        java.util.Locale.setDefault(locale76);
        java.util.Locale locale81 = new java.util.Locale("", "tedesco");
        java.lang.String str82 = locale76.getDisplayScript(locale81);
        java.lang.String str83 = locale76.getISO3Language();
        java.lang.String str84 = locale73.getDisplayVariant(locale76);
        boolean boolean85 = locale76.hasExtensions();
        java.util.Locale.setDefault(category0, locale76);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals(locale41.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "120" + "'", str67, "120");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals(locale81.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ita" + "'", str83, "ita");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology3, locale4, (java.lang.Integer) 1);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        long long8 = dateTimeParserBucket6.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket6.saveState();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        boolean boolean31 = dateTimeParserBucket6.restoreState((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType1.getField(chronology28);
        java.lang.String str34 = chronology28.toString();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology36, locale37, (java.lang.Integer) 1);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(11400999L, chronology28, locale37);
        org.joda.time.DateTimeField dateTimeField41 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology28.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology7.add(readablePeriod16, 5148L, 12);
        org.joda.time.DurationField durationField20 = chronology7.seconds();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 5148L + "'", long19 == 5148L);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = chronology16.get(readablePartial21, 4042053120000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.String str5 = locale2.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale2.getUnicodeLocaleType("\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        java.lang.String str27 = dateTimeZone22.getNameKey((long) '#');
        long long31 = dateTimeZone22.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str33 = dateTimeZone22.getNameKey((-58979923200001L));
        java.lang.String str35 = dateTimeZone22.getShortName((long) (byte) -1);
        org.joda.time.Chronology chronology36 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField37 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology16.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology16.set(readablePartial39, 3061065600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        boolean boolean19 = dateTimeField18.isSupported();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("117");
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField18.getAsShortText(1439, locale22);
        org.joda.time.DurationField durationField25 = dateTimeField18.getRangeDurationField();
        long long27 = dateTimeField18.remainder(14401982L);
        boolean boolean28 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField18.getMinimumValue(readablePartial29);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1439" + "'", str24, "1439");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 14401982L + "'", long27 == 14401982L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField49 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology43.weekyearOfCentury();
        boolean boolean53 = dateTimeFieldType0.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField54 = chronology43.monthOfYear();
        int int57 = dateTimeField54.getDifference(3061066317626L, (-126000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1164 + "'", int57 == 1164);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.halfdayOfDay();
        long long34 = dateTimeField32.remainder((long) 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 99L + "'", long34 == 99L);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.getID();
        boolean boolean14 = dateTimeZone8.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        long long17 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (long) 13);
        boolean boolean18 = dateTimeZone8.isFixed();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 13L + "'", long17 == 13L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfEra();
        long long23 = dateTimeField21.roundCeiling((-61914758400100L));
        long long26 = dateTimeField21.add((long) (-292275054), (int) 'a');
        long long28 = dateTimeField21.roundHalfEven((-3600008L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61914758400000L) + "'", long23 == (-61914758400000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3060773324946L + "'", long26 == 3060773324946L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("eng");
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology7, locale8, (java.lang.Integer) 1);
        java.lang.Object obj11 = dateTimeParserBucket10.saveState();
        long long12 = dateTimeParserBucket10.computeMillis();
        java.lang.Object obj13 = dateTimeParserBucket10.saveState();
        dateTimeParserBucket10.setOffset((java.lang.Integer) 1);
        java.lang.Object obj16 = dateTimeParserBucket10.saveState();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.Object obj22 = dateTimeParserBucket21.saveState();
        long long23 = dateTimeParserBucket21.computeMillis();
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        dateTimeParserBucket21.saveField(dateTimeFieldType26, "zh_CN", locale30);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getISO3Country();
        boolean boolean36 = locale33.hasExtensions();
        java.lang.String str37 = locale33.getISO3Language();
        dateTimeParserBucket10.saveField(dateTimeFieldType26, "hi!", locale33);
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getCountry();
        java.lang.String str41 = locale33.getDisplayLanguage(locale39);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale46 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = locale43.getDisplayName(locale46);
        java.lang.String str49 = locale39.getDisplayLanguage(locale43);
        java.lang.String str51 = locale39.getUnicodeLocaleType("fr");
        java.util.Locale.Builder builder52 = builder5.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder52.setRegion("\u7f8e\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str41, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals(locale46.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japanese" + "'", str49, "Japanese");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField37 = chronology17.minutes();
        org.joda.time.DurationField durationField38 = chronology17.months();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField43 = dateTimeField42.getRangeDurationField();
        java.lang.String str45 = dateTimeField42.getAsShortText(850395L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "12" + "'", str45, "12");
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        java.lang.String str11 = dateTimeField2.getAsText((long) 'a');
        boolean boolean12 = dateTimeField2.isSupported();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        boolean boolean21 = dateTimeField20.isLenient();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = dateTimeField20.getAsText(readablePartial22, (int) 'x', locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology17, locale26, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology32.hours();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology32, locale35, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone38.getMillisKeepLocal(dateTimeZone39, 1L);
        long long44 = dateTimeZone39.adjustOffset(1L, true);
        long long46 = dateTimeZone39.convertUTCToLocal(0L);
        java.lang.String str48 = dateTimeZone39.getNameKey(0L);
        int int50 = dateTimeZone39.getOffset((long) 10);
        org.joda.time.Chronology chronology51 = chronology32.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField52 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology32.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int60 = dateTimeField58.getLeapAmount((long) 0);
        int int62 = dateTimeField58.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial63 = null;
        int[] intArray68 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int69 = dateTimeField58.getMaximumValue(readablePartial63, intArray68);
        org.joda.time.ReadablePartial readablePartial70 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        int int75 = dateTimeField73.getLeapAmount((long) 0);
        int int77 = dateTimeField73.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial78 = null;
        int[] intArray83 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int84 = dateTimeField73.getMaximumValue(readablePartial78, intArray83);
        int int85 = dateTimeField58.getMinimumValue(readablePartial70, intArray83);
        int[] intArray87 = dateTimeField53.add(readablePartial54, 8, intArray83, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField2.set(readablePartial13, (-1977), intArray87, 999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1977");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cinese (Cina)" + "'", str28, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "120" + "'", str29, "120");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 292278993 + "'", int69 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 292278993 + "'", int84 == 292278993);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 100, 10, 0]");
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1982L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1982.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket4.getZone();
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(4039374720000L);
        java.lang.String str35 = dateTimeZone30.getShortName((long) ' ');
        boolean boolean37 = dateTimeZone30.isStandardOffset((long) 12);
        long long40 = dateTimeZone30.adjustOffset(4039737292748L, false);
        int int42 = dateTimeZone30.getStandardOffset(3000079L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4039737292748L + "'", long40 == 4039737292748L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder20 = builder16.setExtension('a', "japan");
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Giappone" + "'", str9, "Giappone");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Cina" + "'", str13, "Cina");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        java.util.Locale locale1 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int6 = dateTimeField4.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField7 = dateTimeField4.getDurationField();
        int int9 = dateTimeField4.getMaximumValue((long) (short) 1);
        long long11 = dateTimeField4.roundHalfEven((long) ' ');
        int int13 = dateTimeField4.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "Chinese (China)");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = dateTimeField4.getAsShortText(readablePartial14, (int) (short) -1, locale18);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = dateTimeField4.getAsShortText((long) (byte) 100, locale22);
        java.lang.String str25 = locale1.getDisplayLanguage(locale22);
        boolean boolean26 = locale1.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale18.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "china" + "'", str25, "china");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName(9L);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        long long8 = dateTimeZone0.nextTransition(31536000001L);
        int int10 = dateTimeZone0.getOffsetFromLocal((-1893456000000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31536000001L + "'", long8 == 31536000001L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField39 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.millisOfSecond();
        int int43 = dateTimeField41.getMaximumValue(3124224000010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.Chronology chronology27 = chronology17.withUTC();
        org.joda.time.ReadablePartial readablePartial28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology17.set(readablePartial28, 1969L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology18.dayOfMonth();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology35, locale36, (java.lang.Integer) 1);
        java.lang.Object obj39 = dateTimeParserBucket38.saveState();
        long long40 = dateTimeParserBucket38.computeMillis();
        dateTimeParserBucket38.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        dateTimeParserBucket38.saveField(dateTimeFieldType43, "zh_CN", locale47);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology50, locale51, (java.lang.Integer) 1);
        java.lang.Object obj54 = dateTimeParserBucket53.saveState();
        long long55 = dateTimeParserBucket53.computeMillis();
        dateTimeParserBucket53.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        dateTimeParserBucket53.saveField(dateTimeFieldType58, "zh_CN", locale62);
        java.lang.String str64 = locale62.getVariant();
        java.lang.String str65 = locale47.getDisplayVariant(locale62);
        java.lang.String str66 = locale62.getDisplayVariant();
        java.lang.String str67 = locale62.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(630288005148L, chronology18, locale62);
        org.joda.time.DateTimeField dateTimeField69 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology18.yearOfEra();
        org.joda.time.Chronology chronology72 = chronology18.withUTC();
        org.joda.time.ReadablePartial readablePartial73 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long75 = chronology18.set(readablePartial73, 151632000003599999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "France" + "'", str67, "France");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        long long22 = dateTimeField19.addWrapField((long) 81, 1969);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = dateTimeField19.getAsShortText((int) (byte) 10, locale24);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        long long52 = dateTimeField50.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial53 = null;
        int int54 = dateTimeField50.getMaximumValue(readablePartial53);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str60 = locale56.getExtension('a');
        java.lang.String str61 = dateTimeField50.getAsShortText(0L, locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology45, locale56);
        java.util.Locale locale66 = new java.util.Locale("ja_JP", "35", "ja");
        java.lang.String str67 = locale56.getDisplayCountry(locale66);
        java.lang.String str68 = dateTimeField19.getAsShortText((long) 366, locale66);
        long long70 = dateTimeField19.roundHalfEven(2082758400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2678400081L + "'", long22 == 2678400081L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Okt" + "'", str26, "Okt");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 999 + "'", int54 == 999);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertEquals(locale66.toString(), "ja_jp_35_ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Japan" + "'", str67, "Japan");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Jan" + "'", str68, "Jan");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2082758400000L + "'", long70 == 2082758400000L);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "tedesco");
        java.lang.String str19 = dateTimeField2.getAsText(readablePartial14, 998, locale18);
        long long22 = dateTimeField2.add(31570320998L, 13);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField2.getType();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertEquals(locale18.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "998" + "'", str19, "998");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 441797520998L + "'", long22 == 441797520998L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.UK;
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "Chinese (China)", locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType16.getField(chronology36);
        boolean boolean41 = dateTimeField40.isSupported();
        long long43 = dateTimeField40.roundHalfCeiling((long) 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (China)" + "'", str29, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        java.lang.String str37 = locale23.getDisplayLanguage(locale33);
        java.lang.String str38 = locale23.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale23);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.minuteOfHour();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(97L, chronology19, locale41, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField46 = chronology19.dayOfWeek();
        java.lang.String str47 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology19.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        boolean boolean56 = dateTimeField55.isLenient();
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale59.getDisplayName(locale61);
        java.lang.String str64 = dateTimeField55.getAsText(readablePartial57, (int) 'x', locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology52, locale61, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField69 = chronology67.hours();
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder72 = builder70.setLocale(locale71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType73.getField(chronology74);
        boolean boolean76 = dateTimeField75.isLenient();
        org.joda.time.ReadablePartial readablePartial77 = null;
        java.util.Locale locale79 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str80 = locale79.getDisplayName();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.lang.String str82 = locale81.getLanguage();
        java.lang.String str83 = locale79.getDisplayName(locale81);
        java.lang.String str84 = dateTimeField75.getAsText(readablePartial77, (int) 'x', locale81);
        java.lang.String str85 = locale71.getDisplayLanguage(locale81);
        java.lang.String str86 = locale71.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology67, locale71);
        org.joda.time.DateTimeField dateTimeField88 = chronology67.minuteOfHour();
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale90 = null;
        java.lang.String str91 = locale89.getDisplayScript(locale90);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket(97L, chronology67, locale89, (java.lang.Integer) 12);
        java.util.Locale locale94 = locale89.stripExtensions();
        java.lang.String str95 = locale89.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket(4039377000000L, chronology19, locale89);
        java.lang.Object obj97 = null;
        boolean boolean98 = locale89.equals(obj97);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tedesco" + "'", str37, "tedesco");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (China)" + "'", str60, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "it" + "'", str62, "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "cinese (Cina)" + "'", str63, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "120" + "'", str64, "120");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese (China)" + "'", str80, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "it" + "'", str82, "it");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "cinese (Cina)" + "'", str83, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "120" + "'", str84, "120");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "tedesco" + "'", str85, "tedesco");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "deu" + "'", str86, "deu");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "zh-TW" + "'", str95, "zh-TW");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        java.lang.String str6 = dateTimeZone2.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(20, (int) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.US;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.util.Locale locale5 = locale0.stripExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int10 = dateTimeField8.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField11 = dateTimeField8.getDurationField();
        int int13 = dateTimeField8.getMaximumValue((long) (short) 1);
        long long15 = dateTimeField8.roundHalfEven((long) ' ');
        int int17 = dateTimeField8.getMinimumValue((long) 100);
        long long20 = dateTimeField8.add(0L, (long) 0);
        long long22 = dateTimeField8.remainder((long) 10);
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField8.getMaximumValue(readablePartial23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder29 = builder27.setLocale(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        java.lang.String str42 = locale28.getDisplayLanguage(locale38);
        java.lang.String str43 = dateTimeField8.getAsShortText(readablePartial25, (int) (short) 1, locale38);
        java.lang.String str44 = locale5.getDisplayScript(locale38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "China" + "'", str1, "China");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "USA" + "'", str3, "USA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tedesco" + "'", str42, "tedesco");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology26.getDateTimeMillis((long) 99, 360000000, 292320000, 115200000, 18000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.clockhourOfHalfday();
        int int28 = dateTimeField26.getLeapAmount(7200999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        java.lang.String str45 = chronology41.toString();
        java.lang.String str46 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        org.joda.time.DurationField durationField48 = chronology41.months();
        org.joda.time.DurationField durationField49 = chronology41.days();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = chronology41.get(readablePeriod50, 18L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder10.removeUnicodeLocaleAttribute("2098");
        java.util.Locale.Builder builder17 = builder14.setExtension('x', "kor");
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("December");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setScript("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long25 = dateTimeField23.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField23.getMaximumValue(readablePartial26);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str33 = locale29.getExtension('a');
        java.lang.String str34 = dateTimeField23.getAsShortText(0L, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale29);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology18, locale36);
        dateTimeParserBucket38.setOffset(999);
        dateTimeParserBucket38.setPivotYear((java.lang.Integer) 2922789);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket38.getZone();
        long long46 = dateTimeParserBucket38.computeMillis(false, "wednesday_EN_US_francia_ITALIA_GERMAN (GERMANY)");
        long long48 = dateTimeParserBucket38.computeMillis(true);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial10, (int) (byte) 100, locale17);
        long long20 = dateTimeField2.roundHalfEven((long) '#');
        int int21 = dateTimeField2.getMinimumValue();
        long long24 = dateTimeField2.addWrapField(998L, (int) 'a');
        int int27 = dateTimeField2.getDifference(45789153000000L, (-60494598060000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3061065600998L + "'", long24 == 3061065600998L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3368 + "'", int27 == 3368);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.hourOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        java.util.Locale locale44 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology42, locale44, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.yearOfEra();
        boolean boolean50 = dateTimeField49.isSupported();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        boolean boolean57 = dateTimeField56.isLenient();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayName();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale60.getDisplayName(locale62);
        java.lang.String str65 = dateTimeField56.getAsText(readablePartial58, (int) 'x', locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology53, locale62, (java.lang.Integer) (-1));
        java.util.Locale locale68 = dateTimeParserBucket67.getLocale();
        long long69 = dateTimeParserBucket67.computeMillis();
        long long72 = dateTimeParserBucket67.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeParserBucket67.getZone();
        long long74 = dateTimeParserBucket67.computeMillis();
        java.util.Locale locale75 = dateTimeParserBucket67.getLocale();
        java.util.Locale locale76 = dateTimeParserBucket67.getLocale();
        java.lang.String str77 = locale76.getDisplayCountry();
        java.lang.String str78 = dateTimeField49.getAsText(4039737292748L, locale76);
        java.lang.String str79 = dateTimeField23.getAsShortText((long) 1969, locale76);
        org.joda.time.DurationField durationField80 = dateTimeField23.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals(locale44.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese (China)" + "'", str61, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "it" + "'", str63, "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cinese (Cina)" + "'", str64, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "120" + "'", str65, "120");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10L + "'", long69 == 10L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10L + "'", long72 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Italy" + "'", str77, "Italy");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2098" + "'", str78, "2098");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNull(durationField80);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        long long43 = chronology17.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology17.add(readablePeriod57, (long) 12, 0);
        org.joda.time.DateTimeField dateTimeField61 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology17.weekyear();
        long long65 = dateTimeField62.addWrapField((-21199389659999L), 4382);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 12L + "'", long60 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 117083291940001L + "'", long65 == 117083291940001L);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.joda.time.DurationField durationField31 = chronology26.centuries();
        org.joda.time.DurationField durationField32 = chronology26.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        java.util.Locale locale25 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale28.getCountry();
        java.lang.String str32 = locale28.getISO3Country();
        dateTimeParserBucket24.saveField(dateTimeFieldType26, "CHN", locale28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.millis();
        boolean boolean52 = dateTimeFieldType26.isSupported(chronology50);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        dateTimeParserBucket5.saveField(dateTimeFieldType26, "117", locale54);
        java.lang.Class<?> wildcardClass59 = locale54.getClass();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JP" + "'", str31, "JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JPN" + "'", str32, "JPN");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekyearOfCentury();
        int int25 = dateTimeField23.getMaximumValue(2000L);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = dateTimeField23.getAsText((-1277984), locale27);
        java.lang.String str30 = locale27.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1277984" + "'", str29, "-1277984");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr" + "'", str30, "fr");
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfWeek();
        boolean boolean40 = dateTimeField38.isLeap((-30641673600001L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((-58979923200001L));
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) -1);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        int int16 = dateTimeZone0.getStandardOffset(2678400081L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, 1L);
        java.lang.String str23 = dateTimeZone18.getNameKey((long) '#');
        long long27 = dateTimeZone18.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str29 = dateTimeZone18.getNameKey((-58979923200001L));
        java.lang.String str31 = dateTimeZone18.getShortName((long) (byte) -1);
        java.util.TimeZone timeZone32 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.util.Locale locale39 = new java.util.Locale("DateTimeField[millisOfSecond]", "Italy", "halfdayOfDay");
        java.lang.String str40 = dateTimeZone34.getShortName((long) 1910, locale39);
        java.lang.String str41 = dateTimeZone0.getName((long) 360000000, locale39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals(locale39.toString(), "datetimefield[millisofsecond]_ITALY_halfdayOfDay");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '??' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean11 = dateTimeField10.isLenient();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField10.getAsText(readablePartial12, (int) 'x', locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology7, locale16, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = chronology22.hours();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology22, locale25, (java.lang.Integer) 0);
        java.lang.String str28 = locale25.getLanguage();
        java.lang.String str29 = dateTimeField2.getAsText(readablePartial3, (int) (short) 0, locale25);
        boolean boolean30 = locale25.hasExtensions();
        java.util.Locale locale34 = new java.util.Locale("ja_JP", "Chinese (China)", "USA");
        java.lang.String str35 = locale25.getDisplayVariant(locale34);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cinese (Cina)" + "'", str18, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "120" + "'", str19, "120");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja" + "'", str28, "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_jp_CHINESE (CHINA)_USA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        java.lang.String str21 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType22.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.minuteOfDay();
        java.lang.String str44 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        long long52 = dateTimeZone47.adjustOffset(1L, true);
        int int54 = dateTimeZone47.getOffsetFromLocal(0L);
        long long56 = dateTimeZone47.previousTransition((long) (byte) -1);
        long long58 = dateTimeZone47.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology59 = chronology39.withZone(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology39.add(readablePeriod60, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType0.getField(chronology39);
        org.joda.time.ReadablePartial readablePartial65 = null;
        int int66 = dateTimeField64.getMaximumValue(readablePartial65);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 86399 + "'", int66 == 86399);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DurationField durationField24 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology17.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setRegion("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE_Taiwan");
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        int int25 = dateTimeField23.getMinimumValue((long) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("69");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 69 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        java.util.Locale locale3 = new java.util.Locale("\u7fa9\u5927\u5229", "\u4e0b\u5348", "JAPANESE (JAPAN)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u7fa9\u5927\u5229\u4e0b\u5348_JAPANESE (JAPAN)");
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        java.lang.String str27 = dateTimeZone24.getID();
        long long30 = dateTimeZone24.adjustOffset(31L, false);
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getVariant();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = dateTimeZone24.getShortName((long) (byte) -1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology17, locale32, (java.lang.Integer) 97);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology17.getDateTimeMillis(70, 9496, 1910, (-31721966));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -31721966 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31L + "'", long30 == 31L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Italy" + "'", str34, "Italy");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundHalfEven((long) 10);
        long long6 = dateTimeField2.roundHalfEven(120001L);
        org.joda.time.DurationField durationField7 = dateTimeField2.getRangeDurationField();
        int int10 = dateTimeField2.getDifference((long) 12, (long) (byte) -1);
        org.joda.time.DurationField durationField11 = dateTimeField2.getLeapDurationField();
        long long14 = dateTimeField2.add((-51011448L), 59);
        int int16 = dateTimeField2.getMaximumValue(84177446400070L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 120001L + "'", long6 == 120001L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 13 + "'", int10 == 13);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-51011389L) + "'", long14 == (-51011389L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale5 = new java.util.Locale("2");
        java.util.Locale.setDefault(locale5);
        java.lang.String str7 = dateTimeField2.getAsShortText((-1977), locale5);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.lang.String str19 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale21.getLanguage();
        java.util.Locale.Builder builder26 = builder20.setLocale(locale21);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dateTimeField2.set(7200999L, "\u5fb7\u6587\u5fb7\u56fd)", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (??)\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals(locale5.toString(), "2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1977" + "'", str7, "-1977");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japan" + "'", str19, "Japan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "China" + "'", str23, "China");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CHN" + "'", str24, "CHN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        boolean boolean31 = dateTimeField30.isSupported();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology50, locale52, (java.lang.Integer) 1970);
        java.lang.String str55 = dateTimeField30.getAsShortText(9, locale52);
        int int57 = dateTimeField30.get(0L);
        java.lang.String str59 = dateTimeField30.getAsText((-2678399900L));
        long long61 = dateTimeField30.roundHalfFloor((-360000000L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "335" + "'", str59, "335");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-345600000L) + "'", long61 == (-345600000L));
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        long long5 = dateTimeZone3.previousTransition((-115200000L));
        long long7 = dateTimeZone3.convertUTCToLocal(1382400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-115200000L) + "'", long5 == (-115200000L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1382400000L + "'", long7 == 1382400000L);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        java.util.Locale locale1 = new java.util.Locale("CN");
        org.junit.Assert.assertEquals(locale1.toString(), "cn");
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        int int32 = dateTimeField30.getLeapAmount((-61820064000005L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.minuteOfHour();
        org.joda.time.DurationField durationField24 = chronology16.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale20.getCountry();
        java.lang.String str24 = locale20.getISO3Country();
        dateTimeParserBucket16.saveField(dateTimeFieldType18, "CHN", locale20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.millis();
        boolean boolean44 = dateTimeFieldType18.isSupported(chronology42);
        org.joda.time.Chronology chronology45 = chronology42.withUTC();
        org.joda.time.DurationField durationField46 = chronology42.weeks();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(31536000000L, chronology42, locale47, (java.lang.Integer) 36000000);
        java.util.Locale.setDefault(locale47);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JP" + "'", str23, "JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JPN" + "'", str24, "JPN");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long6 = dateTimeField2.roundHalfEven(325373846400000L);
        long long9 = dateTimeField2.set(259200000L, (int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 325383782400000L + "'", long6 == 325383782400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-61851340800000L) + "'", long9 == (-61851340800000L));
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType0.getField(chronology40);
        org.joda.time.ReadablePartial readablePartial45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = chronology40.get(readablePartial45, (long) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "chinois (Chine)" + "'", str10, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "chinois (Chine)" + "'", str33, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long25 = dateTimeField23.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField23.getMaximumValue(readablePartial26);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str33 = locale29.getExtension('a');
        java.lang.String str34 = dateTimeField23.getAsShortText(0L, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale29);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology18, locale36);
        dateTimeParserBucket38.setOffset(999);
        dateTimeParserBucket38.setPivotYear((java.lang.Integer) 2922789);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket38.getZone();
        int int45 = dateTimeZone43.getOffset(6526986957000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "chinois (Chine)" + "'", str11, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial52 = null;
        int int53 = dateTimeField51.getMinimumValue(readablePartial52);
        java.lang.String str55 = dateTimeField51.getAsText(45789153000000L);
        org.joda.time.DurationField durationField56 = dateTimeField51.getRangeDurationField();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinois (Chine)" + "'", str37, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "34" + "'", str55, "34");
        org.junit.Assert.assertNull(durationField56);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        int int8 = dateTimeZone1.getOffsetFromLocal(0L);
        long long10 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long12 = dateTimeZone1.convertUTCToLocal(100L);
        java.lang.String str13 = dateTimeZone1.getID();
        int int15 = dateTimeZone1.getStandardOffset(360000010L);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.Object obj22 = dateTimeParserBucket21.saveState();
        long long23 = dateTimeParserBucket21.computeMillis();
        java.lang.Object obj24 = dateTimeParserBucket21.saveState();
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        boolean boolean46 = dateTimeParserBucket21.restoreState((java.lang.Object) chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfDay();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("117");
        java.lang.String str51 = locale50.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 99, chronology43, locale50, (java.lang.Integer) 360000000);
        java.util.Set<java.lang.Character> charSet54 = locale50.getExtensionKeys();
        boolean boolean55 = dateTimeZone1.equals((java.lang.Object) locale50);
        java.lang.String str56 = locale50.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinesisch (China)" + "'", str36, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0", (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        long long21 = dateTimeField18.add(2067L, 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch (China)" + "'", str9, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 347155202067L + "'", long21 == 347155202067L);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        int int18 = dateTimeParserBucket15.getOffset();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfDay();
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology19.set(readablePartial21, 362880355800010L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch (China)" + "'", str9, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        int int21 = dateTimeField18.getDifference((long) 292278993, 0L);
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField18.getAsShortText(readablePartial22, 1439, locale24);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        int int31 = dateTimeField29.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField32 = dateTimeField29.getDurationField();
        int int34 = dateTimeField29.getMaximumValue((long) (short) 1);
        long long36 = dateTimeField29.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getLeapAmount((long) 0);
        int int44 = dateTimeField40.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial45 = null;
        int[] intArray50 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int51 = dateTimeField40.getMaximumValue(readablePartial45, intArray50);
        int int52 = dateTimeField29.getMinimumValue(readablePartial37, intArray50);
        int int53 = dateTimeField18.getMinimumValue(readablePartial26, intArray50);
        int int55 = dateTimeField18.getMaximumValue((-62104147200000L));
        org.joda.time.DurationField durationField56 = dateTimeField18.getLeapDurationField();
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = java.util.Locale.US;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale57.getDisplayScript();
        int int61 = dateTimeField18.getMaximumShortTextLength(locale57);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology64, locale65, (java.lang.Integer) 1);
        java.lang.Object obj68 = dateTimeParserBucket67.saveState();
        long long69 = dateTimeParserBucket67.computeMillis();
        java.lang.Object obj70 = dateTimeParserBucket67.saveState();
        dateTimeParserBucket67.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket67.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType75.getField(chronology76);
        int int79 = dateTimeField77.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField80 = dateTimeField77.getDurationField();
        java.lang.String str81 = dateTimeField77.toString();
        dateTimeParserBucket67.saveField(dateTimeField77, (int) (byte) 10);
        java.util.Locale locale84 = dateTimeParserBucket67.getLocale();
        java.util.Locale locale85 = dateTimeParserBucket67.getLocale();
        java.lang.String str86 = dateTimeField18.getAsShortText(0, locale85);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch (China)" + "'", str9, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 81 + "'", int21 == 81);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1439" + "'", str25, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNull(durationField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DateTimeField[yearOfEra]" + "'", str81, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale32 = new java.util.Locale("ISOChronology[UTC]", "12", "French (France)");
        java.lang.String str33 = dateTimeField12.getAsText(readablePartial27, (-1970), locale32);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals(locale32.toString(), "isochronology[utc]_12_French (France)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1970" + "'", str33, "-1970");
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = dateTimeZone1.getStandardOffset(0L);
        long long7 = dateTimeZone1.convertLocalToUTC(2808605517626L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2808605517626L + "'", long7 == 2808605517626L);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        java.util.Locale locale1 = new java.util.Locale("\u4e2d\u570b");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e2d\u570b");
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        java.lang.String str37 = locale23.getDisplayLanguage(locale33);
        java.lang.String str38 = locale23.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale23);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology19.withUTC();
        java.lang.String str42 = chronology41.toString();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.weekOfWeekyear();
        boolean boolean46 = dateTimeFieldType0.isSupported(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.weekyear();
        org.joda.time.DurationField durationField48 = chronology41.years();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology41.getDateTimeMillis((long) 36000000, 8, 212400000, 13, 18000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 212400000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinesisch (China)" + "'", str12, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinesisch (China)" + "'", str32, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tedesco" + "'", str37, "tedesco");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffsetFromLocal(6048000052L);
        java.lang.String str9 = dateTimeZone1.getNameKey(4862077L);
        boolean boolean10 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "tedesco");
        java.lang.String str19 = dateTimeField2.getAsText(readablePartial14, 998, locale18);
        long long22 = dateTimeField2.add(31570320998L, 13);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField2.getType();
        boolean boolean25 = dateTimeField2.isLeap((long) 365);
        long long28 = dateTimeField2.set(259200000L, 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertEquals(locale18.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "998" + "'", str19, "998");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 441797520998L + "'", long22 == 441797520998L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-62040729600000L) + "'", long28 == (-62040729600000L));
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u570b)", "German (Germany)", "und");
        java.lang.String str4 = locale3.getCountry();
        boolean boolean5 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u570b)_GERMAN (GERMANY)_und");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GERMAN (GERMANY)" + "'", str4, "GERMAN (GERMANY)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology16.get(readablePeriod22, (-31536000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField24.getMinimumValue(readablePartial25);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        java.lang.String str20 = chronology16.toString();
        java.lang.String str21 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField23 = chronology16.eras();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        boolean boolean50 = dateTimeZone47.isFixed();
        org.joda.time.Chronology chronology51 = chronology41.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        boolean boolean59 = dateTimeField58.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = dateTimeField58.getAsText(readablePartial60, (int) 'x', locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology55, locale64, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial73 = null;
        int[] intArray74 = null;
        int int75 = dateTimeField72.getMinimumValue(readablePartial73, intArray74);
        org.joda.time.ReadablePartial readablePartial76 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType78.getField(chronology79);
        int int82 = dateTimeField80.getLeapAmount((long) 0);
        int int84 = dateTimeField80.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial85 = null;
        int[] intArray90 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int91 = dateTimeField80.getMaximumValue(readablePartial85, intArray90);
        int[] intArray93 = dateTimeField72.add(readablePartial76, (int) 'a', intArray90, (int) (short) 0);
        int int94 = dateTimeField52.getMaximumValue(readablePartial53, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            chronology16.validate(readablePartial24, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "120" + "'", str67, "120");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 292278993 + "'", int91 == 292278993);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 99 + "'", int94 == 99);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        long long23 = chronology16.add((-31449600000L), (long) 86399999, 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 252497517077211L + "'", long23 == 252497517077211L);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        java.lang.String str8 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.convertUTCToLocal(0L);
        long long12 = dateTimeZone1.nextTransition((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int15 = dateTimeZone1.getStandardOffset((-292260000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.lang.String str10 = dateTimeZone1.getID();
        boolean boolean11 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1164);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder19 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setRegion("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray12 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int13 = dateTimeField2.getMaximumValue(readablePartial7, intArray12);
        boolean boolean14 = dateTimeField2.isLenient();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology17, locale18, (java.lang.Integer) 1);
        java.lang.Object obj21 = dateTimeParserBucket20.saveState();
        java.util.Locale locale22 = dateTimeParserBucket20.getLocale();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        boolean boolean30 = dateTimeZone24.isFixed();
        dateTimeParserBucket20.setZone(dateTimeZone24);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder35 = builder33.setLocale(locale34);
        java.util.Locale locale37 = new java.util.Locale("China");
        java.util.Locale.Builder builder38 = builder35.setLocale(locale37);
        java.util.Locale.Builder builder40 = builder38.addUnicodeLocaleAttribute("French");
        java.util.Locale locale41 = builder40.build();
        java.util.Locale.Builder builder43 = builder40.setLanguageTag("Japan");
        java.util.Locale.Builder builder44 = builder43.clear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        boolean boolean51 = dateTimeField50.isLenient();
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale54.getDisplayName(locale56);
        java.lang.String str59 = dateTimeField50.getAsText(readablePartial52, (int) 'x', locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology47, locale56, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfHalfday();
        org.joda.time.DurationField durationField65 = chronology62.millis();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        boolean boolean71 = dateTimeField70.isLenient();
        org.joda.time.ReadablePartial readablePartial72 = null;
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str75 = locale74.getDisplayName();
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = locale74.getDisplayName(locale76);
        java.lang.String str79 = dateTimeField70.getAsText(readablePartial72, (int) 'x', locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology67, locale76, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale84 = java.util.Locale.UK;
        dateTimeParserBucket81.saveField(dateTimeFieldType82, "Chinese (China)", locale84);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology62, locale84, (java.lang.Integer) 12, 100);
        java.lang.String str89 = locale84.getDisplayVariant();
        boolean boolean90 = locale84.hasExtensions();
        java.util.Locale.Builder builder91 = builder44.setLocale(locale84);
        java.lang.String str92 = dateTimeZone24.getShortName(9L, locale84);
        java.lang.String str93 = dateTimeField2.getAsShortText(4039732800000L, locale84);
        int int95 = dateTimeField2.getMaximumValue((-11L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals(locale37.toString(), "china");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese (China)" + "'", str55, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese (Cina)" + "'", str58, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "120" + "'", str59, "120");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Chinese (China)" + "'", str75, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "it" + "'", str77, "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "cinese (Cina)" + "'", str78, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "120" + "'", str79, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00" + "'", str92, "+00:00");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2098" + "'", str93, "2098");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 292278993 + "'", int95 == 292278993);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        java.lang.Class<?> wildcardClass31 = dateTimeZone30.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.centuryOfEra();
        org.joda.time.DurationField durationField22 = chronology16.minutes();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology16.set(readablePartial23, 630288005148L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField37 = chronology17.minutes();
        org.joda.time.DurationField durationField38 = chronology17.months();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology17.getDateTimeMillis(0L, 3368, 0, 967774799, 1849);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3368 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Franzo?sisch (Frankreich)' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Deutsch (Deutschland)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=deutsch(deutschland)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField2.getMinimumValue(readablePartial14);
        long long18 = dateTimeField2.set((-62104060800000L), "35");
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray21 = null;
        java.util.Locale locale25 = new java.util.Locale("clockhourOfDay", "");
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = dateTimeField2.set(readablePartial19, 11400999, intArray21, "439", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-61062681600000L) + "'", long18 == (-61062681600000L));
        org.junit.Assert.assertEquals(locale25.toString(), "clockhourofday");
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1910, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int33 = dateTimeField31.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField34 = dateTimeField31.getDurationField();
        int int36 = dateTimeField31.getMaximumValue((long) (short) 1);
        long long38 = dateTimeField31.roundHalfEven((long) ' ');
        int int40 = dateTimeField31.getMinimumValue((long) 100);
        long long43 = dateTimeField31.add(0L, (long) 0);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        int int45 = dateTimeField31.getMaximumTextLength(locale44);
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = dateTimeField27.getAsText(52, locale44);
        java.lang.Class<?> wildcardClass48 = locale44.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology17, locale19, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField23 = dateTimeField22.getRangeDurationField();
        long long25 = dateTimeField22.roundHalfEven(978307201439L);
        java.util.Locale locale27 = new java.util.Locale("zh_CN");
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        int int29 = dateTimeField22.getMaximumShortTextLength(locale27);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = dateTimeField22.set((-226828801917L), 11400999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11400999 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 978307200000L + "'", long25 == 978307200000L);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_cn");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        int int7 = dateTimeField5.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 1);
        java.lang.String str15 = locale12.getScript();
        java.lang.String str16 = dateTimeField5.getAsShortText(readablePartial8, (int) ' ', locale12);
        java.util.Set<java.lang.String> strSet17 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.util.Locale locale21 = new java.util.Locale("yearOfEra");
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale26 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = locale26.getUnicodeLocaleType("japonais (Japon)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: japonais (Japon)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "32" + "'", str16, "32");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals(locale21.toString(), "yearofera");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "yearofera");
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.String str6 = locale2.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.seconds();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology25, locale27, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int35 = dateTimeField33.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField36 = dateTimeField33.getDurationField();
        int int38 = dateTimeField33.getMaximumValue((long) (short) 1);
        long long40 = dateTimeField33.roundHalfEven((long) ' ');
        int int42 = dateTimeField33.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale47 = new java.util.Locale("", "Chinese (China)");
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = dateTimeField33.getAsShortText(readablePartial43, (int) (short) -1, locale47);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = dateTimeField33.getAsShortText((long) (byte) 100, locale51);
        java.lang.String str55 = locale51.getExtension('a');
        int int56 = dateTimeField30.getMaximumTextLength(locale51);
        java.lang.String str57 = locale2.getDisplayScript(locale51);
        java.util.Locale locale58 = locale2.stripExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int63 = dateTimeField61.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField64 = dateTimeField61.getDurationField();
        int int66 = dateTimeField61.getMaximumValue((long) (short) 1);
        long long68 = dateTimeField61.roundHalfEven((long) ' ');
        int int70 = dateTimeField61.getMinimumValue((long) 100);
        long long73 = dateTimeField61.add(0L, (long) 0);
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        int int75 = dateTimeField61.getMaximumTextLength(locale74);
        org.joda.time.DurationField durationField76 = dateTimeField61.getLeapDurationField();
        java.util.Locale locale77 = java.util.Locale.UK;
        int int78 = dateTimeField61.getMaximumShortTextLength(locale77);
        java.lang.String str79 = locale2.getDisplayCountry(locale77);
        java.lang.String str80 = locale2.getCountry();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JPN" + "'", str6, "JPN");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals(locale47.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292278993 + "'", int66 == 292278993);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNull(durationField76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japan" + "'", str79, "Japan");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "JP" + "'", str80, "JP");
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekyear();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale23, (java.lang.Integer) 1);
        java.lang.Object obj26 = dateTimeParserBucket25.saveState();
        long long27 = dateTimeParserBucket25.computeMillis();
        java.lang.Object obj28 = dateTimeParserBucket25.saveState();
        dateTimeParserBucket25.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        org.joda.time.DurationField durationField49 = chronology47.hours();
        boolean boolean50 = dateTimeParserBucket25.restoreState((java.lang.Object) chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfYear();
        boolean boolean52 = dateTimeField51.isSupported();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        boolean boolean60 = dateTimeField59.isLenient();
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayName(locale65);
        java.lang.String str68 = dateTimeField59.getAsText(readablePartial61, (int) 'x', locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology56, locale65, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.seconds();
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology71, locale73, (java.lang.Integer) 1970);
        java.lang.String str76 = dateTimeField51.getAsShortText(9, locale73);
        int int77 = dateTimeField20.getMaximumShortTextLength(locale73);
        int int80 = dateTimeField20.getDifference(252378604999L, (-4199993L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (China)" + "'", str64, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cinese (Cina)" + "'", str67, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "120" + "'", str68, "120");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "9" + "'", str76, "9");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology16.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology11.months();
        java.lang.String str14 = chronology11.toString();
        org.joda.time.DurationField durationField15 = chronology11.eras();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale.Builder builder22 = builder16.setLanguageTag("ITA");
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int30 = dateTimeField28.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField31 = dateTimeField28.getDurationField();
        int int33 = dateTimeField28.getMaximumValue((long) (short) 1);
        long long35 = dateTimeField28.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder42 = builder38.clearExtensions();
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = dateTimeField28.getAsShortText(readablePartial36, (int) (byte) 100, locale43);
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale24.getDisplayName(locale43);
        java.util.Locale locale50 = new java.util.Locale("zh", "weekyear", "en_US");
        java.lang.String str51 = locale24.getDisplayName(locale50);
        java.lang.String str52 = locale24.getDisplayName();
        java.util.Locale locale53 = locale24.stripExtensions();
        java.util.Locale.Builder builder54 = builder16.setLocale(locale24);
        java.lang.String str55 = locale24.getDisplayScript();
        java.lang.String str56 = locale24.getISO3Country();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "German (Germany)" + "'", str46, "German (Germany)");
        org.junit.Assert.assertEquals(locale50.toString(), "zh_WEEKYEAR_en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str51, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German (Germany)" + "'", str52, "German (Germany)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DEU" + "'", str56, "DEU");
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        long long40 = dateTimeField38.roundHalfFloor((-61062681600000L));
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int59 = dateTimeField57.getLeapAmount((long) 0);
        int int61 = dateTimeField57.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial62 = null;
        int[] intArray67 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int68 = dateTimeField57.getMaximumValue(readablePartial62, intArray67);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int74 = dateTimeField72.getLeapAmount((long) 0);
        int int76 = dateTimeField72.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial77 = null;
        int[] intArray82 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int83 = dateTimeField72.getMaximumValue(readablePartial77, intArray82);
        int int84 = dateTimeField57.getMinimumValue(readablePartial69, intArray82);
        int int85 = dateTimeField44.getMaximumValue(readablePartial54, intArray82);
        int int86 = dateTimeField38.getMinimumValue(readablePartial41, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField18.addWrapField(readablePartial19, 1982, intArray82, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1982");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-61062681600000L) + "'", long40 == (-61062681600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 292278993 + "'", int83 == 292278993);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 292278993 + "'", int85 == 292278993);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField30 = dateTimeField29.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField29.getMinimumValue(readablePartial31);
        long long35 = dateTimeField29.add((-60494598060000L), 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60494598060000L) + "'", long35 == (-60494598060000L));
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.getID();
        boolean boolean14 = dateTimeZone8.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        long long17 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (long) 13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        boolean boolean24 = dateTimeField23.isLenient();
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayName(locale29);
        java.lang.String str32 = dateTimeField23.getAsText(readablePartial25, (int) 'x', locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology20, locale29, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = dateTimeField36.getAsShortText(1439, locale38);
        java.lang.String str40 = dateTimeZone8.getShortName(292278782L, locale38);
        java.lang.String str41 = locale38.getDisplayLanguage();
        boolean boolean42 = locale38.hasExtensions();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 13L + "'", long17 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (China)" + "'", str28, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "it" + "'", str30, "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "120" + "'", str32, "120");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1439" + "'", str39, "1439");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "Chinese (China)");
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial12, (int) (short) -1, locale16);
        long long21 = dateTimeField2.addWrapField(9L, 10);
        long long24 = dateTimeField2.add(10L, 4200000L);
        long long26 = dateTimeField2.roundHalfEven((-30641673600001L));
        boolean boolean28 = dateTimeField2.isLeap((long) 86399999);
        java.lang.String str29 = dateTimeField2.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 315532800009L + "'", long21 == 315532800009L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 132539198400000010L + "'", long24 == 132539198400000010L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-30641760000000L) + "'", long26 == (-30641760000000L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DateTimeField[yearOfEra]" + "'", str29, "DateTimeField[yearOfEra]");
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian (Italy)" + "'", str17, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u5348\u524d");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale locale21 = builder16.build();
        java.util.Locale.Builder builder23 = builder16.setVariant("86399");
        java.util.Locale.Builder builder26 = builder16.setExtension('x', "Germania");
        java.util.Locale.Builder builder27 = builder16.clearExtensions();
        java.util.Locale.Builder builder28 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder16.setLanguage("1970");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        java.lang.String str20 = chronology16.toString();
        java.lang.String str21 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfDay();
        int int24 = dateTimeField22.getMaximumValue((-31536000001L));
        java.lang.String str26 = dateTimeField22.getAsText(10L);
        boolean boolean28 = dateTimeField22.isLeap(1958L);
        java.lang.Class<?> wildcardClass29 = dateTimeField22.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 86399 + "'", int24 == 86399);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(12);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6);
        java.lang.Integer int10 = dateTimeParserBucket9.getPivotYear();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone12.getMillisKeepLocal(dateTimeZone13, 1L);
        java.lang.String str17 = dateTimeZone12.getNameKey((long) '#');
        long long21 = dateTimeZone12.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str23 = dateTimeZone12.getNameKey((-58979923200001L));
        java.lang.String str25 = dateTimeZone12.getShortName((long) (byte) -1);
        java.lang.String str27 = dateTimeZone12.getName((long) 9);
        dateTimeParserBucket9.setZone(dateTimeZone12);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        long long50 = dateTimeField47.getDifferenceAsLong(0L, (long) (short) 0);
        dateTimeParserBucket9.saveField(dateTimeField47, 1);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = dateTimeField47.getAsText(2922789, locale54);
        java.lang.String str57 = dateTimeZone1.getShortName(252497517077211L, locale54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2922789" + "'", str56, "2922789");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+12:00" + "'", str57, "+12:00");
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        java.util.Locale locale2 = new java.util.Locale("fra", "Chinook jargon");
        org.junit.Assert.assertEquals(locale2.toString(), "fra_CHINOOK JARGON");
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("998");
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("japan");
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder8.setRegion("german");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: german [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) 292320000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.9232E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh_CN");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long10 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField16 = dateTimeField13.getDurationField();
        int int18 = dateTimeField13.getMaximumValue((long) (short) 1);
        long long20 = dateTimeField13.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder27 = builder23.clearExtensions();
        java.util.Locale locale28 = builder27.build();
        java.lang.String str29 = dateTimeField13.getAsShortText(readablePartial21, (int) (byte) 100, locale28);
        boolean boolean30 = dateTimeParserBucket4.restoreState((java.lang.Object) dateTimeField13);
        java.lang.String str31 = dateTimeField13.getName();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "yearOfEra" + "'", str31, "yearOfEra");
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japan");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int6 = dateTimeField4.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField7 = dateTimeField4.getDurationField();
        int int9 = dateTimeField4.getMaximumValue((long) (short) 1);
        long long11 = dateTimeField4.roundHalfEven((long) ' ');
        int int13 = dateTimeField4.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField4.getMaximumValue(readablePartial14);
        int int17 = dateTimeField4.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = dateTimeField4.getAsShortText(readablePartial18, 100, locale21);
        java.lang.String str25 = locale1.getDisplayName(locale21);
        java.lang.String str26 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "japan");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "japan" + "'", str25, "japan");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        boolean boolean6 = dateTimeZone0.isFixed();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology13, locale14, (java.lang.Integer) 1);
        java.lang.String str17 = locale14.getScript();
        java.lang.String str18 = locale11.getDisplayScript(locale14);
        java.lang.String str19 = locale11.toLanguageTag();
        java.util.Locale.setDefault(category8, locale11);
        java.lang.String str21 = locale11.getDisplayScript();
        java.lang.String str22 = dateTimeZone0.getShortName(259200000L, locale11);
        int int24 = dateTimeZone0.getOffsetFromLocal(97L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology49.hours();
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder54 = builder52.setLocale(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        java.lang.String str67 = locale53.getDisplayLanguage(locale63);
        java.lang.String str68 = locale53.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology49, locale53);
        java.util.Locale locale70 = dateTimeParserBucket69.getLocale();
        java.lang.String str71 = dateTimeZone26.getName(0L, locale70);
        java.lang.String str72 = dateTimeZone0.getName(65196662400000L, locale70);
        long long75 = dateTimeZone0.convertLocalToUTC((-1869L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale11.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tedesco" + "'", str67, "tedesco");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "deu" + "'", str68, "deu");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1869L) + "'", long75 == (-1869L));
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekyear();
        java.lang.String str24 = dateTimeField22.getAsShortText((-62104060799990L));
        boolean boolean25 = dateTimeField22.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray12 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int13 = dateTimeField2.getMaximumValue(readablePartial7, intArray12);
        int int14 = dateTimeField2.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField2.set(1540L, "chn");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"chn\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long26 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField33 = dateTimeField30.getDurationField();
        int int35 = dateTimeField30.getMaximumValue((long) (short) 1);
        long long37 = dateTimeField30.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder44 = builder40.clearExtensions();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = dateTimeField30.getAsShortText(readablePartial38, (int) (byte) 100, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = dateTimeZone23.getShortName((long) 1970, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale45);
        java.lang.Object obj50 = dateTimeParserBucket49.saveState();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket49.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket49.getZone();
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4200000L + "'", long26 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:10" + "'", str48, "-01:10");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNull(int53);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        int int41 = dateTimeField39.getMaximumValue((long) (short) 100);
        int int43 = dateTimeField39.get((long) (-51011448));
        int int45 = dateTimeField39.get((-6784732800000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.adjustOffset(31L, false);
        int int9 = dateTimeZone1.getStandardOffset((long) 9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getVariant();
        java.lang.String str13 = dateTimeZone1.getName(2000L, locale11);
        int int15 = dateTimeZone1.getStandardOffset((long) (-1));
        java.lang.String str17 = dateTimeZone1.getNameKey((long) 53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31L + "'", long7 == 31L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        long long22 = chronology16.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.yearOfEra();
        int int25 = dateTimeField23.get(1969L);
        java.lang.String str27 = dateTimeField23.getAsText(19L);
        org.joda.time.DurationField durationField28 = dateTimeField23.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        java.lang.String str48 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.hourOfDay();
        org.joda.time.DurationField durationField50 = chronology47.centuries();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekOfWeekyear();
        java.lang.String str52 = dateTimeField51.toString();
        long long54 = dateTimeField51.roundHalfFloor((long) 13);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int60 = dateTimeField58.getLeapAmount((long) 0);
        int int62 = dateTimeField58.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial63 = null;
        int[] intArray68 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int69 = dateTimeField58.getMaximumValue(readablePartial63, intArray68);
        int int70 = dateTimeField51.getMinimumValue(readablePartial55, intArray68);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = dateTimeField23.addWrapField(readablePartial29, 0, intArray68, 11400999);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1958L + "'", long22 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970" + "'", str27, "1970");
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str52, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-259200000L) + "'", long54 == (-259200000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[11400999, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 292278993 + "'", int69 == 292278993);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField39 = chronology18.seconds();
        java.lang.String str40 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology18.halfdayOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        boolean boolean49 = dateTimeField48.isLenient();
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.lang.String str57 = dateTimeField48.getAsText(readablePartial50, (int) 'x', locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology45, locale54, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.seconds();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology60, locale62, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.minuteOfDay();
        java.lang.String str67 = dateTimeField65.getAsShortText((long) 'u');
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale70 = locale69.stripExtensions();
        java.lang.String str71 = locale70.getScript();
        java.lang.String str72 = dateTimeField65.getAsText(9223371985593600012L, locale70);
        java.util.Set<java.lang.String> strSet73 = locale70.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = dateTimeField41.getAsText((-59), locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "cinese (Cina)" + "'", str53, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "cinese (Cina)" + "'", str56, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "120" + "'", str57, "120");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertNotNull(strSet73);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long6 = dateTimeZone0.nextTransition((-60494601600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60494601600000L) + "'", long6 == (-60494601600000L));
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology45.hours();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        java.lang.String str63 = locale49.getDisplayLanguage(locale59);
        java.lang.String str64 = locale49.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology45, locale49);
        java.lang.String str66 = dateTimeZone22.getName((long) 999, locale49);
        java.lang.String str68 = dateTimeZone22.getShortName((long) 81);
        java.lang.String str70 = dateTimeZone22.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tedesco" + "'", str63, "tedesco");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale1.toLanguageTag();
        java.lang.String str4 = locale1.getLanguage();
        java.lang.String str5 = locale1.getDisplayName();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int12 = dateTimeField10.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField13 = dateTimeField10.getDurationField();
        int int15 = dateTimeField10.getMaximumValue((long) (short) 1);
        long long17 = dateTimeField10.roundHalfEven((long) ' ');
        int int19 = dateTimeField10.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale24 = new java.util.Locale("", "Chinese (China)");
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = dateTimeField10.getAsShortText(readablePartial20, (int) (short) -1, locale24);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale28);
        java.lang.String str30 = dateTimeField10.getAsShortText((long) (byte) 100, locale28);
        java.util.Locale.setDefault(category6, locale28);
        java.util.Locale locale32 = java.util.Locale.getDefault(category6);
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology35, locale36, (java.lang.Integer) 1);
        java.lang.Object obj39 = dateTimeParserBucket38.saveState();
        long long40 = dateTimeParserBucket38.computeMillis();
        dateTimeParserBucket38.setPivotYear((java.lang.Integer) 10);
        long long44 = dateTimeParserBucket38.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField50 = dateTimeField47.getDurationField();
        int int52 = dateTimeField47.getMaximumValue((long) (short) 1);
        long long54 = dateTimeField47.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder57.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder61 = builder57.clearExtensions();
        java.util.Locale locale62 = builder61.build();
        java.lang.String str63 = dateTimeField47.getAsShortText(readablePartial55, (int) (byte) 100, locale62);
        boolean boolean64 = dateTimeParserBucket38.restoreState((java.lang.Object) dateTimeField47);
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale68 = new java.util.Locale("Chinook jargon");
        java.lang.String str70 = locale68.getExtension('x');
        java.lang.String str71 = dateTimeField47.getAsShortText(readablePartial65, (int) (short) 1, locale68);
        java.lang.String str72 = locale32.getDisplayName(locale68);
        java.lang.String str73 = locale1.getDisplayScript(locale32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja-JP" + "'", str3, "ja-JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanese (Japan)" + "'", str5, "Japanese (Japan)");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals(locale24.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970" + "'", str30, "1970");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100" + "'", str63, "100");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "chinook jargon");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English (United Kingdom)" + "'", str72, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField46 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.millisOfSecond();
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfYear();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        long long48 = dateTimeField46.roundHalfEven((long) 10);
        long long50 = dateTimeField46.roundHalfEven(120001L);
        org.joda.time.DurationField durationField51 = dateTimeField46.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology54, locale63, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial72 = null;
        int[] intArray73 = null;
        int int74 = dateTimeField71.getMinimumValue(readablePartial72, intArray73);
        org.joda.time.ReadablePartial readablePartial75 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType77.getField(chronology78);
        int int81 = dateTimeField79.getLeapAmount((long) 0);
        int int83 = dateTimeField79.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial84 = null;
        int[] intArray89 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int90 = dateTimeField79.getMaximumValue(readablePartial84, intArray89);
        int[] intArray92 = dateTimeField71.add(readablePartial75, (int) 'a', intArray89, (int) (short) 0);
        int int93 = dateTimeField46.getMinimumValue(readablePartial52, intArray92);
        int int94 = dateTimeField42.getMinimumValue(readablePartial43, intArray92);
        java.util.Locale locale97 = new java.util.Locale("de");
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = dateTimeField19.set(readablePartial21, (-16707702), intArray92, "", locale97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 120001L + "'", long50 == 120001L);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 292278993 + "'", int90 == 292278993);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertEquals(locale97.toString(), "de");
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean11 = dateTimeField10.isLenient();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField10.getAsText(readablePartial12, (int) 'x', locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology7, locale16, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, 1L);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.Chronology chronology32 = chronology22.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str39 = locale35.getExtension('a');
        java.lang.String str40 = locale34.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology32, locale34);
        java.lang.Object obj42 = dateTimeParserBucket41.saveState();
        java.lang.Object obj43 = dateTimeParserBucket41.saveState();
        java.lang.Integer int44 = dateTimeParserBucket41.getOffsetInteger();
        java.util.Locale locale45 = dateTimeParserBucket41.getLocale();
        java.lang.String str46 = locale0.getDisplayLanguage(locale45);
        java.lang.String str47 = locale45.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (China)" + "'", str1, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Cina)" + "'", str4, "cinese (Cina)");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cinese (Cina)" + "'", str18, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "120" + "'", str19, "120");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c" + "'", str40, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str46, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((-58979923200001L));
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) -1);
        java.lang.String str15 = dateTimeZone0.getName((long) 9);
        long long18 = dateTimeZone0.convertLocalToUTC((long) 100, true);
        long long20 = dateTimeZone0.nextTransition(1958L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder52 = builder50.setLocale(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder54 = builder50.setLocale(locale53);
        java.lang.String str55 = dateTimeField47.getAsText(readablePartial48, (int) (byte) 100, locale53);
        java.lang.String str56 = dateTimeField24.getAsText((int) 'u', locale53);
        java.lang.String str57 = dateTimeZone0.getShortName(100L, locale53);
        java.lang.String str58 = locale53.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1958L + "'", long20 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "117" + "'", str56, "117");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "de" + "'", str58, "de");
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = chronology36.hours();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder41 = builder39.setLocale(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        java.lang.String str54 = locale40.getDisplayLanguage(locale50);
        java.lang.String str55 = locale40.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology36, locale40);
        org.joda.time.DurationField durationField57 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField58 = chronology36.dayOfMonth();
        long long62 = chronology36.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology64, locale65, (java.lang.Integer) 1);
        java.lang.Object obj68 = dateTimeParserBucket67.saveState();
        long long69 = dateTimeParserBucket67.computeMillis();
        java.lang.Object obj70 = dateTimeParserBucket67.saveState();
        dateTimeParserBucket67.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeParserBucket67.getZone();
        org.joda.time.Chronology chronology74 = chronology36.withZone(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        int int76 = dateTimeZone73.getOffset(readableInstant75);
        long long78 = dateTimeZone18.getMillisKeepLocal(dateTimeZone73, 4190400009L);
        java.lang.String str80 = dateTimeZone18.getName(18000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (China)" + "'", str29, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tedesco" + "'", str54, "tedesco");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 22L + "'", long62 == 22L);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 4190400009L + "'", long78 == 4190400009L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long6 = dateTimeField2.roundFloor((long) 'x');
        long long9 = dateTimeField2.add(3376684801910L, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField2.add(0L, 292278993L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292280963 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 92237688835201910L + "'", long9 == 92237688835201910L);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        java.lang.String str24 = chronology17.toString();
        java.lang.String str25 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale locale8 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("TEDESCO");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setExtension('u', "9");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 9 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        java.util.Locale locale3 = new java.util.Locale("Japan", "ita", "JPN");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getUnicodeLocaleType("+00:59");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: +00:59");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "japan_ITA_JPN");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setLanguageTag("1969");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1969 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE_Taiwan");
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        long long20 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, "Japon", locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = locale23.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long7 = dateTimeField2.add((long) (-1), (int) (byte) 1);
        long long10 = dateTimeField2.add(0L, 97L);
        long long13 = dateTimeField2.add(3376684800000L, 3540000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31535999999L + "'", long7 == 31535999999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3061065600000L + "'", long10 == 3061065600000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 111714986764800000L + "'", long13 == 111714986764800000L);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int36 = dateTimeField34.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField37 = dateTimeField34.getDurationField();
        int int39 = dateTimeField34.getMaximumValue((long) (short) 1);
        long long41 = dateTimeField34.roundHalfEven((long) ' ');
        int int43 = dateTimeField34.getMinimumValue((long) 100);
        long long46 = dateTimeField34.add(0L, (long) 0);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        int int48 = dateTimeField34.getMaximumTextLength(locale47);
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54);
        java.lang.Integer int58 = dateTimeParserBucket57.getPivotYear();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology60, locale61, (java.lang.Integer) 1);
        java.lang.Object obj64 = dateTimeParserBucket63.saveState();
        long long65 = dateTimeParserBucket63.computeMillis();
        dateTimeParserBucket63.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        dateTimeParserBucket63.saveField(dateTimeFieldType68, "zh_CN", locale72);
        boolean boolean74 = dateTimeParserBucket57.restoreState((java.lang.Object) locale72);
        java.lang.String str75 = locale50.getDisplayVariant(locale72);
        java.lang.String str76 = locale47.getDisplayName(locale72);
        java.lang.String str77 = dateTimeField28.getAsText(readablePartial30, (int) (short) -1, locale72);
        java.lang.String str78 = locale72.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais (Canada)" + "'", str76, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fr-FR" + "'", str78, "fr-FR");
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        boolean boolean31 = dateTimeField30.isSupported();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology50, locale52, (java.lang.Integer) 1970);
        java.lang.String str55 = dateTimeField30.getAsShortText(9, locale52);
        int int57 = dateTimeField30.get(0L);
        int int58 = dateTimeField30.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        boolean boolean67 = dateTimeField66.isLenient();
        org.joda.time.ReadablePartial readablePartial68 = null;
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale70.getDisplayName();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = locale70.getDisplayName(locale72);
        java.lang.String str75 = dateTimeField66.getAsText(readablePartial68, (int) 'x', locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology63, locale72, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.weekOfWeekyear();
        org.joda.time.DurationField durationField80 = chronology78.hours();
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology78, locale81, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField84 = chronology78.centuries();
        org.joda.time.DateTimeField dateTimeField85 = chronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology78.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean88 = dateTimeZone87.isFixed();
        java.util.Locale locale90 = java.util.Locale.GERMAN;
        boolean boolean91 = locale90.hasExtensions();
        java.lang.String str92 = locale90.getISO3Country();
        boolean boolean93 = locale90.hasExtensions();
        java.lang.String str94 = locale90.getCountry();
        java.lang.String str95 = dateTimeZone87.getName(31536000001L, locale90);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((-3540000L), chronology78, locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = dateTimeField30.getAsShortText(readablePartial59, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (China)" + "'", str71, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "it" + "'", str73, "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "cinese (Cina)" + "'", str74, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "120" + "'", str75, "120");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00" + "'", str95, "+00:00");
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.weekyears();
        org.joda.time.Chronology chronology22 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        long long25 = dateTimeField23.roundHalfEven(7018868767910399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 7018868767910400000L + "'", long25 == 7018868767910400000L);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfWeek();
        org.joda.time.Chronology chronology39 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyear();
        int int44 = dateTimeField41.getDifference(0L, (-101L));
        int int45 = dateTimeField41.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField2.getMinimumValue(readablePartial14);
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField2.getMaximumValue(readablePartial16);
        long long20 = dateTimeField2.set(37869120000100L, "1989");
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 600393600100L + "'", long20 == 600393600100L);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DurationField durationField18 = chronology16.seconds();
        org.joda.time.DurationField durationField19 = chronology16.seconds();
        org.joda.time.DurationField durationField20 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.hourOfDay();
        int int23 = dateTimeField21.getMaximumValue((-62899200000L));
        long long25 = dateTimeField21.roundHalfCeiling(30667805148L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 30668400000L + "'", long25 == 30668400000L);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder27 = builder23.setLocale(locale26);
        java.lang.String str28 = dateTimeField20.getAsText(readablePartial21, (int) (byte) 100, locale26);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("ISOChronology[UTC]");
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale26.getDisplayLanguage(locale31);
        java.lang.String str34 = locale31.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "German" + "'", str33, "German");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        long long23 = dateTimeField21.remainder((-30231619200000L));
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField21.getAsShortText(7L, locale25);
        int int27 = dateTimeField21.getMinimumValue();
        long long30 = dateTimeField21.add(4L, (long) 52);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int59 = dateTimeField57.getLeapAmount((long) ' ');
        long long61 = dateTimeField57.roundFloor((long) 'x');
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale63.getDisplayName();
        java.lang.String str65 = dateTimeField57.getAsShortText(59, locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology50, locale63, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int76 = dateTimeField74.getLeapAmount((long) 0);
        int int78 = dateTimeField74.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial79 = null;
        int[] intArray84 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int85 = dateTimeField74.getMaximumValue(readablePartial79, intArray84);
        int int86 = dateTimeField70.getMinimumValue(readablePartial71, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField21.addWrapField(readablePartial31, 8, intArray84, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "70" + "'", str26, "70");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1640995200004L + "'", long30 == 1640995200004L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (China)" + "'", str64, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "59" + "'", str65, "59");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 292278993 + "'", int85 == 292278993);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfMinute();
        int int40 = dateTimeField38.getMaximumValue(0L);
        java.lang.String str41 = dateTimeField38.getName();
        dateTimeParserBucket15.saveField(dateTimeField38, 1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        long long49 = dateTimeField46.roundFloor((long) 10);
        int int51 = dateTimeField46.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial52 = null;
        int int53 = dateTimeField46.getMaximumValue(readablePartial52);
        java.util.Locale locale56 = new java.util.Locale("cinese (Cina)");
        java.lang.String str57 = locale56.getDisplayCountry();
        java.lang.String str58 = dateTimeField46.getAsShortText(70, locale56);
        dateTimeParserBucket15.saveField(dateTimeField46, (int) 'a');
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        boolean boolean66 = dateTimeField65.isLenient();
        org.joda.time.ReadablePartial readablePartial67 = null;
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale69.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = locale69.getDisplayName(locale71);
        java.lang.String str74 = dateTimeField65.getAsText(readablePartial67, (int) 'x', locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology62, locale71, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = chronology77.hours();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.era();
        org.joda.time.DateTimeField dateTimeField81 = chronology77.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeField81, 1370);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese (China)" + "'", str27, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "secondOfMinute" + "'", str41, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertEquals(locale56.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "70" + "'", str58, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (China)" + "'", str70, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "it" + "'", str72, "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese (Cina)" + "'", str73, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "120" + "'", str74, "120");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14400000, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 86399999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.004");
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getVariant();
        java.util.Locale.setDefault(locale23);
        java.util.Locale locale28 = new java.util.Locale("", "tedesco");
        java.lang.String str29 = locale23.getDisplayScript(locale28);
        java.lang.String str30 = locale23.getISO3Language();
        java.lang.String str31 = locale20.getDisplayVariant(locale23);
        boolean boolean32 = locale23.hasExtensions();
        java.util.Set<java.lang.Character> charSet33 = locale23.getExtensionKeys();
        java.lang.String str34 = locale23.getISO3Country();
        java.util.Set<java.lang.String> strSet35 = locale23.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals(locale28.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ita" + "'", str30, "ita");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = dateTimeField2.getType();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.ReadablePartial readablePartial13 = null;
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale15.getDisplayName(locale17);
        java.lang.String str20 = dateTimeField11.getAsText(readablePartial13, (int) 'x', locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology8, locale17, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType6.getField(chronology23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology23.set(readablePartial25, (long) 1164);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese (Cina)" + "'", str16, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "120" + "'", str20, "120");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long10 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        long long17 = dateTimeField13.roundHalfCeiling((long) (byte) 0);
        long long20 = dateTimeField13.set((-1L), 100);
        int int22 = dateTimeField13.get((long) (byte) 100);
        boolean boolean24 = dateTimeField13.isLeap((long) (short) 10);
        dateTimeParserBucket4.saveField(dateTimeField13, 9);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.centuryOfEra();
        org.joda.time.DurationField durationField48 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.year();
        dateTimeParserBucket4.saveField(dateTimeField49, 1);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket4.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-58979923200001L) + "'", long20 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray24 = null;
        int int25 = dateTimeField22.getMinimumValue(readablePartial23, intArray24);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder28.setLocale(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        java.lang.String str43 = locale29.getDisplayLanguage(locale39);
        java.lang.String str44 = locale29.getISO3Language();
        java.util.Locale.setDefault(locale29);
        // The following exception was thrown during execution in test generation
        try {
            long long46 = dateTimeField22.set(7L, "zh_cn (CHINA)", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zh_cn (CHINA)\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tedesco" + "'", str43, "tedesco");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("117", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=117");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        long long20 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        java.lang.String str26 = dateTimeZone21.getNameKey((long) '#');
        long long30 = dateTimeZone21.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str32 = dateTimeZone21.getNameKey((-58979923200001L));
        java.lang.String str34 = dateTimeZone21.getShortName((long) (byte) -1);
        long long37 = dateTimeZone21.convertLocalToUTC(31536000000L, true);
        dateTimeParserBucket15.setZone(dateTimeZone21);
        long long40 = dateTimeParserBucket15.computeMillis(true);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        boolean boolean46 = dateTimeField45.isLenient();
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = locale49.getDisplayName(locale51);
        java.lang.String str54 = dateTimeField45.getAsText(readablePartial47, (int) 'x', locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology42, locale51, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology57.getZone();
        org.joda.time.DurationField durationField61 = chronology57.seconds();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean64 = dateTimeZone63.isFixed();
        java.lang.String str65 = dateTimeZone63.toString();
        long long67 = dateTimeZone63.convertUTCToLocal(378691200000L);
        org.joda.time.Chronology chronology68 = chronology57.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField69 = chronology57.era();
        boolean boolean70 = dateTimeParserBucket15.restoreState((java.lang.Object) dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch (China)" + "'", str9, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31536000000L + "'", long37 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinesisch (China)" + "'", str50, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "cinese (Cina)" + "'", str53, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "120" + "'", str54, "120");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 378691200000L + "'", long67 == 378691200000L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        java.lang.String str33 = dateTimeZone28.getNameKey((long) '#');
        long long37 = dateTimeZone28.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str39 = dateTimeZone28.getNameKey((-58979923200001L));
        java.lang.String str41 = dateTimeZone28.getShortName((long) (byte) -1);
        java.lang.String str43 = dateTimeZone28.getName((long) 9);
        dateTimeParserBucket25.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology45 = chronology16.withZone(dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = chronology45.getDateTimeMillis((int) (short) 1, 19, (-292275054), 1982, 999, 4, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1982 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch (China)" + "'", str9, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder20 = builder16.setExtension('a', "japan");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.hours();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayName(locale53);
        java.lang.String str56 = dateTimeField47.getAsText(readablePartial49, (int) 'x', locale53);
        java.lang.String str57 = locale43.getDisplayLanguage(locale53);
        java.lang.String str58 = locale43.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale43);
        org.joda.time.DateTimeField dateTimeField60 = chronology39.minuteOfHour();
        org.joda.time.Chronology chronology61 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.era();
        java.util.Locale locale66 = new java.util.Locale("", "+12:00");
        boolean boolean67 = locale66.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(4039377000000L, chronology61, locale66, (java.lang.Integer) 1969, 97);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder71 = builder16.setLocale(locale66);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: +12:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinesisch (China)" + "'", str12, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinesisch (China)" + "'", str32, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinesisch (China)" + "'", str52, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cinese (Cina)" + "'", str55, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "120" + "'", str56, "120");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tedesco" + "'", str57, "tedesco");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals(locale66.toString(), "_+12:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long7 = dateTimeField2.add((long) (-1), (int) (byte) 1);
        long long10 = dateTimeField2.add(0L, 97L);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.secondOfMinute();
        long long36 = dateTimeField33.add((long) 1, (long) 'x');
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = dateTimeField33.getAsText((int) (byte) 0, locale38);
        java.lang.String str41 = dateTimeField2.getAsText(readablePartial11, 9, locale38);
        java.lang.String str43 = dateTimeField2.getAsShortText(1958L);
        org.joda.time.DurationField durationField44 = dateTimeField2.getDurationField();
        long long46 = dateTimeField2.roundHalfCeiling((-21199389659999L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31535999999L + "'", long7 == 31535999999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3061065600000L + "'", long10 == 3061065600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinesisch (China)" + "'", str22, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 120001L + "'", long36 == 120001L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "USA" + "'", str39, "USA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-21206188800000L) + "'", long46 == (-21206188800000L));
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology17.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch (China)" + "'", str10, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinesisch (China)" + "'", str30, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology18.add(readablePeriod30, 378691200100L, (int) '#');
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField35 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField36 = dateTimeField35.getRangeDurationField();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder41 = builder40.clear();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleKeys();
        java.lang.String str46 = locale42.getDisplayCountry();
        java.util.Locale.Builder builder47 = builder41.setLocale(locale42);
        java.util.Locale.Builder builder49 = builder47.setLanguage("Giappone");
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int58 = dateTimeField56.getLeapAmount((long) 0);
        long long60 = dateTimeField56.roundHalfCeiling((long) (byte) 0);
        long long63 = dateTimeField56.set((-1L), 100);
        int int65 = dateTimeField56.get((long) (byte) 100);
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale70 = new java.util.Locale("", "tedesco");
        java.lang.String str71 = dateTimeField56.getAsText(readablePartial66, (int) (short) 100, locale70);
        java.lang.String str72 = locale50.getDisplayScript(locale70);
        java.util.Locale.Builder builder73 = builder47.setLocale(locale50);
        int int74 = dateTimeField35.getMaximumTextLength(locale50);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeField35.add((-85740002L), (-30754200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -30754200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch (China)" + "'", str11, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 378691200100L + "'", long33 == 378691200100L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Japan" + "'", str46, "Japan");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-58979923200001L) + "'", long63 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertEquals(locale70.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "100" + "'", str71, "100");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField26 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.year();
        java.util.Locale locale31 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        org.joda.time.DurationField durationField37 = dateTimeField35.getDurationField();
        long long40 = dateTimeField35.set(1L, (int) (short) 0);
        java.lang.String str41 = dateTimeField35.toString();
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone44.getMillisKeepLocal(dateTimeZone45, 1L);
        long long50 = dateTimeZone45.adjustOffset(1L, true);
        boolean boolean51 = dateTimeZone45.isFixed();
        long long53 = dateTimeZone45.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone54 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone55.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale60 = new java.util.Locale("cinese (Cina)");
        java.lang.String str61 = dateTimeZone55.getShortName(0L, locale60);
        java.lang.String str62 = dateTimeField35.getAsShortText(readablePartial42, (int) (byte) 0, locale60);
        java.lang.String str63 = locale31.getDisplayVariant(locale60);
        int int64 = dateTimeField27.getMaximumTextLength(locale60);
        java.lang.Class<?> wildcardClass65 = locale60.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch (China)" + "'", str11, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str41, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals(locale60.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.lang.String str11 = locale8.getScript();
        java.lang.String str12 = locale8.getDisplayVariant();
        java.lang.String str13 = locale8.getScript();
        java.util.Locale.Builder builder14 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder15 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder7.setLanguage("+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: +00:00:00.010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Cina" + "'", str10, "Cina");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CA" + "'", str1, "CA");
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.clockhourOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField24 = chronology17.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int5 = dateTimeField2.getDifference((long) 12, 1L);
        long long7 = dateTimeField2.roundHalfCeiling((long) 100);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getVariant();
        java.util.Locale.setDefault(locale8);
        int int11 = dateTimeField2.getMaximumTextLength(locale8);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale12.getCountry();
        java.lang.String str16 = locale12.getISO3Country();
        java.util.Set<java.lang.Character> charSet17 = locale12.getExtensionKeys();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale12.getDisplayScript(locale18);
        java.lang.String str20 = locale12.getLanguage();
        java.lang.String str21 = locale8.getDisplayName(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String str23 = dateTimeFieldType22.toString();
        java.lang.String str24 = dateTimeFieldType22.toString();
        boolean boolean25 = locale12.equals((java.lang.Object) str24);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JP" + "'", str15, "JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JPN" + "'", str16, "JPN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str21, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekOfWeekyear" + "'", str23, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekOfWeekyear" + "'", str24, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        boolean boolean31 = dateTimeField30.isSupported();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology50, locale52, (java.lang.Integer) 1970);
        java.lang.String str55 = dateTimeField30.getAsShortText(9, locale52);
        java.lang.String str56 = locale52.getVariant();
        java.util.Set<java.lang.String> strSet57 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.lang.String str59 = locale58.getVariant();
        java.util.Locale.setDefault(locale58);
        java.util.Locale locale63 = new java.util.Locale("", "tedesco");
        java.lang.String str64 = locale58.getDisplayScript(locale63);
        java.lang.String str65 = locale58.getDisplayCountry();
        java.lang.String str66 = locale58.getDisplayLanguage();
        java.lang.String str67 = locale52.getDisplayName(locale58);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale63.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Italia" + "'", str65, "Italia");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "italiano" + "'", str66, "italiano");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "francese (Canada)" + "'", str67, "francese (Canada)");
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long25 = dateTimeField23.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField23.getMaximumValue(readablePartial26);
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str33 = locale29.getExtension('a');
        java.lang.String str34 = dateTimeField23.getAsShortText(0L, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale29);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology18, locale36);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.year();
        java.lang.String str41 = dateTimeField40.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[year]" + "'", str41, "DateTimeField[year]");
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, 1L);
        long long32 = dateTimeZone27.adjustOffset(1L, true);
        int int34 = dateTimeZone27.getOffsetFromLocal(0L);
        long long36 = dateTimeZone27.previousTransition((long) (byte) -1);
        java.lang.String str38 = dateTimeZone27.getNameKey((long) '#');
        org.joda.time.Chronology chronology39 = chronology17.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone40 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial42 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology17.set(readablePartial42, 360431990L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.US;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.lang.String str6 = locale0.getDisplayLanguage();
        java.lang.String str7 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cina" + "'", str1, "Cina");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "USA" + "'", str3, "USA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese" + "'", str6, "cinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh_CN" + "'", str7, "zh_CN");
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology17.year();
        org.joda.time.DurationField durationField38 = chronology17.weeks();
        java.lang.Class<?> wildcardClass39 = chronology17.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyear();
        long long24 = dateTimeField22.roundFloor((-62104060799990L));
        boolean boolean25 = dateTimeField22.isSupported();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfDay();
        int int49 = dateTimeField46.getDifference((long) 292278993, 0L);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField46.getAsShortText(readablePartial50, 1439, locale52);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int59 = dateTimeField57.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField60 = dateTimeField57.getDurationField();
        int int62 = dateTimeField57.getMaximumValue((long) (short) 1);
        long long64 = dateTimeField57.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial65 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int70 = dateTimeField68.getLeapAmount((long) 0);
        int int72 = dateTimeField68.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial73 = null;
        int[] intArray78 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int79 = dateTimeField68.getMaximumValue(readablePartial73, intArray78);
        int int80 = dateTimeField57.getMinimumValue(readablePartial65, intArray78);
        int int81 = dateTimeField46.getMinimumValue(readablePartial54, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField22.addWrapPartial(readablePartial26, 3, intArray78, 115200000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62104147200000L) + "'", long24 == (-62104147200000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 81 + "'", int49 == 81);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1439" + "'", str53, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292278993 + "'", int62 == 292278993);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 100, 10, 115200000]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 292278993 + "'", int79 == 292278993);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        java.util.Locale locale2 = new java.util.Locale("hi!", "ja");
        boolean boolean3 = locale2.hasExtensions();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6);
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.seconds();
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology29, locale31, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int39 = dateTimeField37.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField40 = dateTimeField37.getDurationField();
        int int42 = dateTimeField37.getMaximumValue((long) (short) 1);
        long long44 = dateTimeField37.roundHalfEven((long) ' ');
        int int46 = dateTimeField37.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.Locale locale51 = new java.util.Locale("", "Chinese (China)");
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = dateTimeField37.getAsShortText(readablePartial47, (int) (short) -1, locale51);
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale55);
        java.lang.String str57 = dateTimeField37.getAsShortText((long) (byte) 100, locale55);
        java.lang.String str59 = locale55.getExtension('a');
        int int60 = dateTimeField34.getMaximumTextLength(locale55);
        java.lang.String str61 = locale6.getDisplayScript(locale55);
        java.lang.String str62 = locale2.getDisplayLanguage(locale6);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder65 = builder63.setLocale(locale64);
        java.util.Locale locale67 = new java.util.Locale("China");
        java.util.Locale.Builder builder68 = builder65.setLocale(locale67);
        java.util.Locale.Builder builder70 = builder68.addUnicodeLocaleAttribute("French");
        java.util.Locale locale71 = builder70.build();
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale71.getDisplayScript(locale74);
        java.lang.String str76 = locale74.toLanguageTag();
        java.util.Set<java.lang.String> strSet77 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale2.getDisplayLanguage(locale74);
        java.lang.String str79 = locale74.getVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_JA");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JPN" + "'", str10, "JPN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970" + "'", str57, "1970");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals(locale67.toString(), "china");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh-TW" + "'", str76, "zh-TW");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        long long21 = dateTimeField18.addWrapField(999L, 1970);
        java.lang.String str22 = dateTimeField18.toString();
        long long25 = dateTimeField18.addWrapField(1982L, (int) '4');
        java.lang.String str26 = dateTimeField18.getName();
        int int28 = dateTimeField18.getLeapAmount(2678400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 7200999L + "'", long21 == 7200999L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str22, "DateTimeField[clockhourOfHalfday]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 14401982L + "'", long25 == 14401982L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "clockhourOfHalfday" + "'", str26, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(292278993, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 365");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone49.getMillisKeepLocal(dateTimeZone50, 1L);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.Chronology chronology54 = chronology44.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DurationField durationField56 = chronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.yearOfEra();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder61 = builder59.setLocale(locale60);
        java.util.Locale locale63 = new java.util.Locale("China");
        java.util.Locale.Builder builder64 = builder61.setLocale(locale63);
        java.util.Locale.Builder builder66 = builder64.addUnicodeLocaleAttribute("French");
        java.util.Locale locale67 = builder64.build();
        java.lang.String str68 = locale67.getDisplayName();
        java.lang.String str69 = dateTimeField57.getAsText((int) 'x', locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(6048000052L, chronology27, locale67, (java.lang.Integer) 19, (-4200000));
        java.lang.String str73 = locale67.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals(locale63.toString(), "china");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "china__#u-french");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "china" + "'", str68, "china");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "120" + "'", str69, "120");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        java.util.Locale locale12 = builder7.build();
        java.util.Locale locale13 = builder7.build();
        java.lang.String str14 = locale13.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "japan");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "japan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        java.lang.Object obj10 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology12, locale13, (java.lang.Integer) 1);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        long long17 = dateTimeParserBucket15.computeMillis();
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        dateTimeParserBucket15.saveField(dateTimeFieldType20, "zh_CN", locale24);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getISO3Country();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale27.getISO3Language();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "hi!", locale27);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket4.getZone();
        long long35 = dateTimeZone33.previousTransition((-58979923200001L));
        java.lang.String str36 = dateTimeZone33.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "deu" + "'", str31, "deu");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-58979923200001L) + "'", long35 == (-58979923200001L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = chronology44.getDateTimeMillis((long) '4', (int) (byte) 10, 1370, 421200000, 1982);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1370 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale.setDefault(locale0);
        java.lang.String str4 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (China)" + "'", str1, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str4, "\u4e2d\u6587\u4e2d\u56fd)");
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        boolean boolean4 = dateTimeZone1.isFixed();
        boolean boolean6 = dateTimeZone1.isStandardOffset(3376684800000L);
        long long9 = dateTimeZone1.convertLocalToUTC((long) 421200000, false);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone10.getMillisKeepLocal(dateTimeZone11, 1L);
        long long16 = dateTimeZone11.adjustOffset(1L, true);
        long long18 = dateTimeZone11.convertUTCToLocal(0L);
        long long20 = dateTimeZone11.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale23, (java.lang.Integer) 1);
        java.lang.Object obj26 = dateTimeParserBucket25.saveState();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket25.getZone();
        boolean boolean29 = dateTimeZone27.isStandardOffset(3061425600000L);
        long long31 = dateTimeZone11.getMillisKeepLocal(dateTimeZone27, (long) (-1));
        long long33 = dateTimeZone1.getMillisKeepLocal(dateTimeZone11, 18000000L);
        long long36 = dateTimeZone11.convertLocalToUTC(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 421200000L + "'", long9 == 421200000L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 18000000L + "'", long33 == 18000000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket4.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset(3061425600000L);
        java.util.Locale locale13 = new java.util.Locale("\u4e2d\u6587\u4e2d\u570b)", "German (Germany)", "und");
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = dateTimeZone6.getShortName((long) 86399999, locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType17.getField(chronology34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology34, locale40, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        int int51 = dateTimeZone46.getOffsetFromLocal((long) (short) 0);
        boolean boolean53 = dateTimeZone46.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology54 = chronology34.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField55 = chronology34.seconds();
        org.joda.time.Chronology chronology56 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.minuteOfDay();
        boolean boolean59 = locale13.equals((java.lang.Object) dateTimeField58);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals(locale13.toString(), "\u4e2d\u6587\u4e2d\u570b)_GERMAN (GERMANY)_und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GERMAN (GERMANY)" + "'", str14, "GERMAN (GERMANY)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str27, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Country();
        java.lang.String str4 = locale0.getLanguage();
        java.util.Locale locale8 = new java.util.Locale("Japan", "ita", "JPN");
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        java.lang.String str26 = locale12.getDisplayLanguage(locale22);
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = locale12.getDisplayScript(locale27);
        java.lang.String str29 = locale8.getDisplayVariant(locale27);
        java.lang.String str31 = locale27.getUnicodeLocaleType("ja");
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int38 = dateTimeField36.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField39 = dateTimeField36.getDurationField();
        int int41 = dateTimeField36.getMaximumValue((long) (short) 1);
        long long43 = dateTimeField36.roundHalfEven((long) ' ');
        int int45 = dateTimeField36.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale50 = new java.util.Locale("", "Chinese (China)");
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = dateTimeField36.getAsShortText(readablePartial46, (int) (short) -1, locale50);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale54);
        java.lang.String str56 = dateTimeField36.getAsShortText((long) (byte) 100, locale54);
        java.util.Locale.setDefault(category32, locale54);
        java.util.Locale locale58 = java.util.Locale.getDefault(category32);
        java.util.Locale locale59 = java.util.Locale.getDefault(category32);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology61, locale62, (java.lang.Integer) 1);
        java.lang.Object obj65 = dateTimeParserBucket64.saveState();
        long long66 = dateTimeParserBucket64.computeMillis();
        dateTimeParserBucket64.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        dateTimeParserBucket64.saveField(dateTimeFieldType69, "zh_CN", locale73);
        java.lang.String str75 = locale59.getDisplayVariant(locale73);
        java.lang.String str76 = locale27.getDisplayVariant(locale59);
        boolean boolean77 = locale59.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str1, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u56fd" + "'", str2, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertEquals(locale8.toString(), "japan_ITA_JPN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str21, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tedesco" + "'", str26, "tedesco");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JPN" + "'", str29, "JPN");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals(locale50.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1" + "'", str52, "-1");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970" + "'", str56, "1970");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("halfdayofday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=halfdayofday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        int int3 = dateTimeZone1.getOffset(52L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getShortName(2724710432572799999L);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10);
        java.lang.Integer int14 = dateTimeParserBucket13.getPivotYear();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone16.getMillisKeepLocal(dateTimeZone17, 1L);
        java.lang.String str21 = dateTimeZone16.getNameKey((long) '#');
        long long25 = dateTimeZone16.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str27 = dateTimeZone16.getNameKey((-58979923200001L));
        java.lang.String str29 = dateTimeZone16.getShortName((long) (byte) -1);
        java.lang.String str31 = dateTimeZone16.getName((long) 9);
        dateTimeParserBucket13.setZone(dateTimeZone16);
        long long34 = dateTimeZone16.previousTransition(1L);
        int int36 = dateTimeZone16.getOffsetFromLocal(293520998L);
        int int38 = dateTimeZone16.getOffsetFromLocal(31531800010L);
        java.lang.String str39 = dateTimeZone16.toString();
        long long41 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, 967770636600L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.097" + "'", str7, "+00:00:00.097");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 967770636697L + "'", long41 == 967770636697L);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        long long14 = dateTimeField2.add(0L, (long) 0);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        int int16 = dateTimeField2.getMaximumTextLength(locale15);
        org.joda.time.DurationField durationField17 = dateTimeField2.getLeapDurationField();
        java.util.Locale locale18 = java.util.Locale.UK;
        int int19 = dateTimeField2.getMaximumShortTextLength(locale18);
        int int21 = dateTimeField2.get((long) 53);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField2.getType();
        boolean boolean24 = dateTimeField2.isLeap(3954685667731200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        int int12 = dateTimeField2.getMinimumValue();
        java.util.Locale locale17 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str18 = dateTimeField2.getAsShortText((int) '#', locale17);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        int int22 = dateTimeField2.getMaximumShortTextLength(locale19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) ' ');
        long long51 = dateTimeField47.roundFloor((long) 'x');
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.lang.String str55 = dateTimeField47.getAsShortText(59, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology40, locale53, (java.lang.Integer) 1970, 0);
        java.lang.String str59 = locale53.getDisplayScript();
        java.lang.String str60 = locale19.getDisplayScript(locale53);
        java.lang.Object obj61 = locale53.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "59" + "'", str55, "59");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "zh_CN");
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        int int24 = dateTimeField23.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone47.getMillisKeepLocal(dateTimeZone48, 1L);
        boolean boolean51 = dateTimeZone48.isFixed();
        org.joda.time.Chronology chronology52 = chronology42.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfCentury();
        org.joda.time.DurationField durationField55 = dateTimeField54.getDurationField();
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        boolean boolean62 = dateTimeField61.isLenient();
        org.joda.time.ReadablePartial readablePartial63 = null;
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str66 = locale65.getDisplayName();
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = locale65.getDisplayName(locale67);
        java.lang.String str70 = dateTimeField61.getAsText(readablePartial63, (int) 'x', locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology58, locale67, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology73 = dateTimeParserBucket72.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray77 = null;
        int int78 = dateTimeField75.getMinimumValue(readablePartial76, intArray77);
        org.joda.time.ReadablePartial readablePartial79 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType81.getField(chronology82);
        int int85 = dateTimeField83.getLeapAmount((long) 0);
        int int87 = dateTimeField83.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial88 = null;
        int[] intArray93 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int94 = dateTimeField83.getMaximumValue(readablePartial88, intArray93);
        int[] intArray96 = dateTimeField75.add(readablePartial79, (int) 'a', intArray93, (int) (short) 0);
        int int97 = dateTimeField54.getMaximumValue(readablePartial56, intArray93);
        int int98 = dateTimeField23.getMaximumValue(readablePartial25, intArray93);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "it" + "'", str68, "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "cinese (Cina)" + "'", str69, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "120" + "'", str70, "120");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278993 + "'", int94 == 292278993);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 99 + "'", int97 == 99);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 12 + "'", int98 == 12);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setRegion("1969_GIAPPONESE (GIAPPONE)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1969_GIAPPONESE (GIAPPONE) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        long long49 = dateTimeField46.roundHalfCeiling((long) 50);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        java.util.Locale locale38 = dateTimeParserBucket37.getLocale();
        java.lang.String str39 = locale38.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de_DE" + "'", str39, "de_DE");
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket22.getZone();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        boolean boolean29 = dateTimeParserBucket22.restoreState((java.lang.Object) nameProvider26);
        dateTimeParserBucket22.setOffset((java.lang.Integer) (-1970));
        long long33 = dateTimeParserBucket22.computeMillis(true);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2070L + "'", long33 == 2070L);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial10, (int) (byte) 100, locale17);
        long long20 = dateTimeField2.roundHalfEven((long) '#');
        int int21 = dateTimeField2.getMinimumValue();
        long long24 = dateTimeField2.addWrapField(998L, (int) 'a');
        java.lang.String str26 = dateTimeField2.getAsShortText(396000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3061065600998L + "'", long24 == 3061065600998L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfMinute();
        int int40 = dateTimeField38.getMaximumValue(0L);
        java.lang.String str41 = dateTimeField38.getName();
        dateTimeParserBucket15.saveField(dateTimeField38, 1969);
        java.lang.Object obj44 = dateTimeParserBucket15.saveState();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial64 = null;
        int int65 = dateTimeField63.getMaximumValue(readablePartial64);
        dateTimeParserBucket15.saveField(dateTimeField63, (int) (byte) 1);
        java.lang.Integer int68 = dateTimeParserBucket15.getOffsetInteger();
        java.lang.Object obj69 = dateTimeParserBucket15.saveState();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "secondOfMinute" + "'", str41, "secondOfMinute");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str8 = dateTimeZone6.getName(4039377000000L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone6.isLocalDateTimeGap(localDateTime9);
        java.lang.String str11 = dateTimeZone6.getID();
        int int13 = dateTimeZone6.getOffset(229485037334426524L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology16.hours();
        org.joda.time.DurationField durationField22 = chronology16.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        long long23 = dateTimeField20.add((long) 1, (long) 'x');
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getISO3Country();
        java.lang.String str27 = dateTimeField20.getAsText((int) (byte) 0, locale25);
        long long29 = dateTimeField20.roundCeiling((-1L));
        int int30 = dateTimeField20.getMinimumValue();
        boolean boolean32 = dateTimeField20.isLeap((-2L));
        int int34 = dateTimeField20.getLeapAmount((long) 14400000);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 120001L + "'", long23 == 120001L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "USA" + "'", str26, "USA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        dateTimeParserBucket5.saveField(dateTimeField34, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket5.getZone();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 70);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cinese (Cina)" + "'", str20, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology37, locale42, (java.lang.Integer) 999, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField50 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology37.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder10.setLanguage("USA");
        java.util.Locale.Builder builder20 = builder10.setLanguage("allemand");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder22.setVariant("francia_ITALIA_GERMAN (GERMANY)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: francia_ITALIA_GERMAN (GERMANY) [at index 15]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Giappone" + "'", str9, "Giappone");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DurationField durationField39 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField41 = chronology18.centuries();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        java.util.Set<java.lang.Character> charSet47 = locale42.getExtensionKeys();
        java.lang.String str49 = locale42.getExtension('u');
        boolean boolean50 = locale42.hasExtensions();
        java.lang.String str51 = locale42.getScript();
        java.util.Locale locale52 = locale42.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((-110715056928000000L), chronology18, locale52, (java.lang.Integer) (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long60 = chronology18.getDateTimeMillis(45820684800000L, 18000000, (int) (byte) 100, (int) 'u', 81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = chronology16.get(readablePeriod30, (long) 12, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-4200000), 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology18.set(readablePartial39, (long) (-51011448));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        int int15 = dateTimeField2.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = dateTimeField2.getAsShortText(readablePartial16, 100, locale19);
        java.util.Set<java.lang.Character> charSet23 = locale19.getExtensionKeys();
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100" + "'", str22, "100");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        java.util.Locale locale2 = new java.util.Locale("", "Chinese (China)");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet5 = locale2.getExtensionKeys();
        java.util.Locale locale8 = new java.util.Locale("", "tedesco");
        java.lang.String str9 = locale2.getDisplayName(locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType12.getField(chronology29);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology29, locale35, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone41.getMillisKeepLocal(dateTimeZone42, 1L);
        int int46 = dateTimeZone41.getOffsetFromLocal((long) (short) 0);
        boolean boolean48 = dateTimeZone41.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology49 = chronology29.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField50 = chronology29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int54 = dateTimeZone52.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.US;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = dateTimeZone52.getShortName((long) 100, locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology29, locale57, (java.lang.Integer) 366, 99);
        org.joda.time.DateTimeField dateTimeField64 = chronology29.millisOfDay();
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale68 = new java.util.Locale("Chinook jargon");
        java.lang.String str70 = locale68.getExtension('x');
        java.lang.String str71 = dateTimeField64.getAsShortText(readablePartial65, 31, locale68);
        java.lang.String str72 = locale8.getDisplayName(locale68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = locale68.getUnicodeLocaleType("888");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 888");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CHINESE (CHINA)" + "'", str4, "CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals(locale8.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CHINESE (CHINA)" + "'", str9, "CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertEquals(locale68.toString(), "chinook jargon");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "31" + "'", str71, "31");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "TEDESCO" + "'", str72, "TEDESCO");
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        int int12 = dateTimeField2.getMinimumValue();
        java.util.Locale locale17 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str18 = dateTimeField2.getAsShortText((int) '#', locale17);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        int int22 = dateTimeField2.getMaximumShortTextLength(locale19);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getVariant();
        java.util.Locale.setDefault(locale24);
        java.util.Locale locale29 = new java.util.Locale("", "tedesco");
        java.lang.String str30 = locale24.getDisplayScript(locale29);
        java.lang.String str31 = locale24.getDisplayCountry();
        java.lang.String str32 = dateTimeField2.getAsShortText(59, locale24);
        java.lang.String str33 = locale24.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale24.getUnicodeLocaleType("292278993");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 292278993");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "35" + "'", str18, "35");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italia" + "'", str31, "Italia");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it-IT" + "'", str33, "it-IT");
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyear();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("117");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 4, chronology17, locale22, (java.lang.Integer) 10, 59);
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale26.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.getVariant();
        java.lang.String str7 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "cinese (Cina)" + "'", str1, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Cina)" + "'", str4, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh_CN" + "'", str7, "zh_CN");
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology17.years();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = chronology17.get(readablePeriod31, (-4199990L), (-946688999L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        int int21 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        java.lang.String str25 = dateTimeFieldType22.getName();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder32 = builder30.setLocale(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        dateTimeParserBucket15.saveField(dateTimeFieldType22, "Canada", locale27);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        boolean boolean40 = dateTimeField39.isLenient();
        org.joda.time.ReadablePartial readablePartial41 = null;
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale43.getDisplayName(locale45);
        java.lang.String str48 = dateTimeField39.getAsText(readablePartial41, (int) 'x', locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology36, locale45, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType22.getField(chronology51);
        java.lang.String str56 = dateTimeFieldType22.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Taiwan" + "'", str33, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cinese (Cina)" + "'", str47, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "120" + "'", str48, "120");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone1.getOffsetFromLocal((long) (byte) 10);
        int int7 = dateTimeZone1.getOffset(100L);
        long long11 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, 3376684800000L);
        boolean boolean12 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology14, locale15, (java.lang.Integer) 1);
        java.lang.Object obj18 = dateTimeParserBucket17.saveState();
        long long19 = dateTimeParserBucket17.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone20.getMillisKeepLocal(dateTimeZone21, 1L);
        java.lang.String str24 = dateTimeZone21.getID();
        dateTimeParserBucket17.setZone(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone21.getOffset(readableInstant26);
        int int29 = dateTimeZone21.getOffset((long) '#');
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) int29);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale34, (java.lang.Integer) 1);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        long long38 = dateTimeParserBucket36.computeMillis();
        dateTimeParserBucket36.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        dateTimeParserBucket36.saveField(dateTimeFieldType41, "zh_CN", locale45);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology48, locale49, (java.lang.Integer) 1);
        java.lang.Object obj52 = dateTimeParserBucket51.saveState();
        long long53 = dateTimeParserBucket51.computeMillis();
        dateTimeParserBucket51.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        dateTimeParserBucket51.saveField(dateTimeFieldType56, "zh_CN", locale60);
        java.lang.String str62 = locale60.getVariant();
        java.lang.String str63 = locale45.getDisplayVariant(locale60);
        java.lang.String str64 = dateTimeZone1.getShortName((-61378506675054L), locale45);
        java.util.Set<java.lang.String> strSet65 = locale45.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        java.util.Locale locale38 = dateTimeParserBucket37.getLocale();
        int int39 = dateTimeParserBucket37.getOffset();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket37.getZone();
        int int41 = dateTimeParserBucket37.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DurationField durationField30 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.monthOfYear();
        long long33 = dateTimeField31.roundHalfCeiling(51839999988799L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 51840172800000L + "'", long33 == 51840172800000L);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfEra();
        long long23 = dateTimeField21.roundCeiling((-61914758400100L));
        java.util.Locale locale24 = null;
        int int25 = dateTimeField21.getMaximumShortTextLength(locale24);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61914758400000L) + "'", long23 == (-61914758400000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        int int26 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.TimeZone timeZone32 = dateTimeZone28.toTimeZone();
        java.util.Locale locale37 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str38 = dateTimeZone28.getShortName((long) 'x', locale37);
        java.lang.String str39 = locale37.getDisplayVariant();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        java.lang.String str57 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.weekyear();
        long long62 = dateTimeField60.roundFloor((long) 366);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = locale63.getDisplayCountry(locale64);
        java.lang.String str67 = locale63.getDisplayName();
        int int68 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.lang.String str69 = locale37.getDisplayName(locale63);
        boolean boolean70 = dateTimeParserBucket15.restoreState((java.lang.Object) str69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket15.getZone();
        int int73 = dateTimeZone71.getOffsetFromLocal(3061425600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale37.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-259200000L) + "'", long62 == (-259200000L));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh_cn (CHINA)" + "'", str69, "zh_cn (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        long long21 = chronology16.add(31536000000L, 6048000052L, 99);
        org.joda.time.ReadablePartial readablePartial22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology16.get(readablePartial22, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 630288005148L + "'", long21 == 630288005148L);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket15.getZone();
        long long21 = dateTimeZone19.nextTransition((long) '4');
        int int23 = dateTimeZone19.getStandardOffset((long) 1970);
        int int25 = dateTimeZone19.getStandardOffset((-31540200000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long10 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        long long17 = dateTimeField13.roundHalfCeiling((long) (byte) 0);
        long long20 = dateTimeField13.set((-1L), 100);
        int int22 = dateTimeField13.get((long) (byte) 100);
        boolean boolean24 = dateTimeField13.isLeap((long) (short) 10);
        dateTimeParserBucket4.saveField(dateTimeField13, 9);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 100);
        long long29 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setOffset(99);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-58979923200001L) + "'", long20 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61851600000001L) + "'", long29 == (-61851600000001L));
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField17.getMaximumValue(readablePartial19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField17.getMinimumValue(readablePartial21);
        int int24 = dateTimeField17.getMinimumValue(1009843200012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology19.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int46 = dateTimeField44.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField47 = dateTimeField44.getDurationField();
        int int49 = dateTimeField44.getMaximumValue((long) (short) 1);
        long long51 = dateTimeField44.roundHalfEven((long) ' ');
        int int53 = dateTimeField44.getMinimumValue((long) 100);
        int int54 = dateTimeField44.getMinimumValue();
        java.util.Locale locale59 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str60 = dateTimeField44.getAsShortText((int) '#', locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((-62104060800000L), chronology19, locale59, (java.lang.Integer) 3);
        org.joda.time.DateTimeField dateTimeField63 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = chronology19.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "35" + "'", str60, "35");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        java.util.Locale locale3 = new java.util.Locale("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", "CINESE (CINA)", "JPN");
        org.junit.Assert.assertEquals(locale3.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)_CINESE (CINA)_JPN");
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.getID();
        java.lang.String str15 = dateTimeZone8.getNameKey(0L);
        boolean boolean16 = dateTimeZone8.isFixed();
        long long18 = dateTimeZone8.convertUTCToLocal(62577446402000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 62577446402000L + "'", long18 == 62577446402000L);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfEra();
        boolean boolean22 = dateTimeField20.isLeap((-31531800000L));
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = dateTimeField20.getAsText(1439, locale24);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale24.getDisplayName(locale26);
        java.lang.Object obj30 = locale24.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1439" + "'", str25, "1439");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese (Japan)" + "'", str29, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "ja_JP");
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField26 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology18.eras();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = chronology18.get(readablePeriod28, (long) 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        long long24 = chronology16.add(0L, 850395L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = chronology16.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-850395L) + "'", long24 == (-850395L));
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        boolean boolean30 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfYear();
        org.joda.time.DurationField durationField32 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.millisOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfEra();
        int int54 = dateTimeField52.getMinimumValue((long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        boolean boolean63 = dateTimeField62.isLenient();
        org.joda.time.ReadablePartial readablePartial64 = null;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale66.getDisplayName();
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = locale66.getDisplayName(locale68);
        java.lang.String str71 = dateTimeField62.getAsText(readablePartial64, (int) 'x', locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology59, locale68, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType57.getField(chronology74);
        org.joda.time.Chronology chronology79 = null;
        java.util.Locale locale80 = java.util.Locale.JAPAN;
        java.util.Locale locale81 = java.util.Locale.JAPAN;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket(0L, chronology79, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology74, locale80, (java.lang.Integer) 292278993);
        java.lang.String str86 = dateTimeField52.getAsShortText(60000L, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(4194600009L, chronology27, locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeParserBucket87.saveField(dateTimeFieldType88, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese (China)" + "'", str67, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "it" + "'", str69, "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "cinese (Cina)" + "'", str70, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "120" + "'", str71, "120");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970" + "'", str86, "1970");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket4.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int16 = dateTimeField14.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField17 = dateTimeField14.getDurationField();
        java.lang.String str18 = dateTimeField14.toString();
        dateTimeParserBucket4.saveField(dateTimeField14, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int25 = dateTimeField23.getLeapAmount((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField23.getType();
        dateTimeParserBucket4.saveField(dateTimeFieldType26, 8);
        long long30 = dateTimeParserBucket4.computeMillis(true);
        dateTimeParserBucket4.setOffset((int) 'x');
        long long33 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setOffset(3);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[yearOfEra]" + "'", str18, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61914758400100L) + "'", long30 == (-61914758400100L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-61883136000121L) + "'", long33 == (-61883136000121L));
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfWeek();
        boolean boolean40 = dateTimeField38.isLeap((-82199999L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=english (united kingdom)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        java.util.Locale locale3 = new java.util.Locale("81", "58", "4382");
        org.junit.Assert.assertEquals(locale3.toString(), "81_58_4382");
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology23, locale24, (java.lang.Integer) 1);
        java.lang.String str27 = locale24.getScript();
        java.lang.String str28 = dateTimeField20.getAsText(31L, locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField20.getType();
        org.joda.time.DurationField durationField30 = dateTimeField20.getDurationField();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale34, (java.lang.Integer) 1);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        long long38 = dateTimeParserBucket36.computeMillis();
        java.lang.Object obj39 = dateTimeParserBucket36.saveState();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String str42 = dateTimeFieldType41.toString();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setOffset((java.lang.Integer) 1);
        java.lang.Object obj54 = dateTimeParserBucket48.saveState();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology56, locale57, (java.lang.Integer) 1);
        java.lang.Object obj60 = dateTimeParserBucket59.saveState();
        long long61 = dateTimeParserBucket59.computeMillis();
        dateTimeParserBucket59.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        dateTimeParserBucket59.saveField(dateTimeFieldType64, "zh_CN", locale68);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        boolean boolean72 = locale71.hasExtensions();
        java.lang.String str73 = locale71.getISO3Country();
        boolean boolean74 = locale71.hasExtensions();
        java.lang.String str75 = locale71.getISO3Language();
        dateTimeParserBucket48.saveField(dateTimeFieldType64, "hi!", locale71);
        java.util.Locale locale77 = java.util.Locale.JAPANESE;
        java.lang.String str78 = locale77.getCountry();
        java.lang.String str79 = locale71.getDisplayLanguage(locale77);
        java.lang.String str81 = locale77.getExtension('u');
        dateTimeParserBucket36.saveField(dateTimeFieldType41, "fr-FR", locale77);
        java.lang.String str83 = locale77.getDisplayScript();
        java.lang.String str84 = dateTimeField20.getAsShortText(0L, locale77);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "yearOfEra" + "'", str42, "yearOfEra");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "deu" + "'", str75, "deu");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str79, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket4.getZone();
        long long21 = dateTimeZone17.convertLocalToUTC(31535999999L, true, (-61378506675054L));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 1370, locale23);
        java.lang.String str25 = dateTimeZone17.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31535999999L + "'", long21 == 31535999999L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        boolean boolean22 = dateTimeField21.isLenient();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = dateTimeField21.getAsText(readablePartial23, (int) 'x', locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology18, locale27, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        java.lang.String str34 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.yearOfEra();
        int int37 = dateTimeField35.getMinimumValue((long) 'x');
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long45 = dateTimeZone42.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        int int51 = dateTimeField49.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField52 = dateTimeField49.getDurationField();
        int int54 = dateTimeField49.getMaximumValue((long) (short) 1);
        long long56 = dateTimeField49.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder59.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder63 = builder59.clearExtensions();
        java.util.Locale locale64 = builder63.build();
        java.lang.String str65 = dateTimeField49.getAsShortText(readablePartial57, (int) (byte) 100, locale64);
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleKeys();
        java.lang.String str67 = dateTimeZone42.getShortName((long) 1970, locale64);
        java.lang.String str68 = dateTimeField35.getAsShortText(readablePartial38, (int) 'x', locale64);
        java.util.Set<java.lang.Character> charSet69 = locale64.getExtensionKeys();
        java.util.Locale.Builder builder70 = builder10.setLocale(locale64);
        java.util.Locale.Builder builder72 = builder10.setLanguageTag("GBR");
        java.util.Locale.Builder builder74 = builder10.addUnicodeLocaleAttribute("100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder76 = builder74.addUnicodeLocaleAttribute("Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinesisch (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str13, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str26, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "120" + "'", str30, "120");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4200000L + "'", long45 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "100" + "'", str65, "100");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-01:10" + "'", str67, "-01:10");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "120" + "'", str68, "120");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21);
        java.lang.Integer int25 = dateTimeParserBucket24.getPivotYear();
        long long28 = dateTimeParserBucket24.computeMillis(true, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale52 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology50, locale52, (java.lang.Integer) 12, (int) (byte) 10);
        java.util.Set<java.lang.String> strSet56 = locale52.getUnicodeLocaleKeys();
        dateTimeParserBucket24.saveField(dateTimeFieldType29, "\u65e5\u672c", locale52);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType29.getRangeDurationType();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology61, locale70, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = chronology76.hours();
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology76, locale79, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField82 = chronology76.centuries();
        boolean boolean83 = dateTimeFieldType29.isSupported(chronology76);
        dateTimeParserBucket15.saveField(dateTimeFieldType29, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket15.getZone();
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 0);
        int int89 = dateTimeParserBucket15.getOffset();
        long long90 = dateTimeParserBucket15.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str43, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals(locale52.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str69, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((-58979923200001L));
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) -1);
        java.lang.String str15 = dateTimeZone0.getName((long) 9);
        long long18 = dateTimeZone0.convertLocalToUTC((long) 100, true);
        long long21 = dateTimeZone0.adjustOffset(132539198400000010L, false);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        long long28 = dateTimeZone23.adjustOffset(1L, true);
        boolean boolean29 = dateTimeZone23.isFixed();
        long long31 = dateTimeZone23.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone32 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long37 = dateTimeZone33.convertLocalToUTC((long) 1982, true, 0L);
        int int39 = dateTimeZone33.getStandardOffset(360000127L);
        long long41 = dateTimeZone0.getMillisKeepLocal(dateTimeZone33, 212400000L);
        java.util.TimeZone timeZone42 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 132539198400000010L + "'", long21 == 132539198400000010L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1982L + "'", long37 == 1982L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 212400000L + "'", long41 == 212400000L);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.weekyear();
        long long50 = dateTimeField48.roundFloor((long) 366);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale52);
        java.lang.String str54 = locale51.getDisplayCountry(locale52);
        java.lang.String str55 = locale51.getDisplayName();
        int int56 = dateTimeField48.getMaximumShortTextLength(locale51);
        boolean boolean57 = locale51.hasExtensions();
        java.lang.String str58 = dateTimeField26.getAsShortText(70, locale51);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        long long64 = dateTimeField62.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial65 = null;
        int int66 = dateTimeField62.getMaximumValue(readablePartial65);
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str72 = locale68.getExtension('a');
        java.lang.String str73 = dateTimeField62.getAsShortText(0L, locale68);
        long long75 = dateTimeField62.roundCeiling((-3538082L));
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder80 = builder78.setLocale(locale79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType81.getField(chronology82);
        boolean boolean84 = dateTimeField83.isLenient();
        long long86 = dateTimeField83.roundFloor((long) 10);
        int int88 = dateTimeField83.getMaximumValue((long) (byte) 1);
        long long90 = dateTimeField83.roundHalfFloor((long) (byte) -1);
        java.util.Locale locale91 = java.util.Locale.FRENCH;
        int int92 = dateTimeField83.getMaximumTextLength(locale91);
        java.util.Locale locale93 = locale91.stripExtensions();
        java.util.Locale.Builder builder94 = builder80.setLocale(locale91);
        java.util.Locale locale95 = builder80.build();
        java.lang.String str96 = dateTimeField62.getAsText(readablePartial76, 100, locale95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = dateTimeField26.getAsText(readablePartial59, locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str37, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-259200000L) + "'", long50 == (-259200000L));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "70" + "'", str58, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 999 + "'", int66 == 999);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-3538082L) + "'", long75 == (-3538082L));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 292278993 + "'", int88 == 292278993);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "fr");
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "100" + "'", str96, "100");
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(998);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        long long14 = dateTimeField2.add(0L, (long) 0);
        long long16 = dateTimeField2.remainder((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int21 = dateTimeField19.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField22 = dateTimeField19.getDurationField();
        int int24 = dateTimeField19.getMaximumValue((long) (short) 1);
        long long26 = dateTimeField19.roundHalfEven((long) ' ');
        int int28 = dateTimeField19.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale33 = new java.util.Locale("", "Chinese (China)");
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = dateTimeField19.getAsShortText(readablePartial29, (int) (short) -1, locale33);
        java.util.Locale locale37 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = dateTimeField19.getAsShortText((long) (byte) 100, locale37);
        int int40 = dateTimeField2.getMaximumShortTextLength(locale37);
        java.lang.String str41 = dateTimeField2.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals(locale33.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "yearOfEra" + "'", str41, "yearOfEra");
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology23, locale24, (java.lang.Integer) 1);
        java.lang.Object obj27 = dateTimeParserBucket26.saveState();
        long long28 = dateTimeParserBucket26.computeMillis();
        java.lang.Object obj29 = dateTimeParserBucket26.saveState();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket26.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean37 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField36.getAsText(readablePartial38, (int) 'x', locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology33, locale42, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField50 = chronology48.hours();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology48, locale51, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField54 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology48.secondOfMinute();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        boolean boolean60 = locale59.hasExtensions();
        int int61 = dateTimeField58.getMaximumShortTextLength(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology30, locale59);
        int int63 = dateTimeField20.getMaximumShortTextLength(locale59);
        java.util.Set<java.lang.String> strSet64 = locale59.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (China)" + "'", str41, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "120" + "'", str45, "120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale36 = new java.util.Locale("clockhourOfDay", "");
        java.lang.String str37 = locale36.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTimeField32.getAsShortText(readablePartial33, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "clockhourofday");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.adjustOffset(31L, false);
        int int9 = dateTimeZone1.getStandardOffset((long) 9);
        long long11 = dateTimeZone1.nextTransition((long) 100);
        boolean boolean13 = dateTimeZone1.isStandardOffset((long) 86399);
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) 360000000L);
        boolean boolean17 = dateTimeZone1.isStandardOffset((long) 9);
        boolean boolean18 = dateTimeZone1.isFixed();
        long long21 = dateTimeZone1.convertLocalToUTC((-61851591600000L), true);
        long long23 = dateTimeZone1.convertUTCToLocal(31531800010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31L + "'", long7 == 31L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851591600000L) + "'", long21 == (-61851591600000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31531800010L + "'", long23 == 31531800010L);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 99");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        java.util.Locale locale13 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder10.addUnicodeLocaleAttribute("+00:59");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: +00:59 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "german");
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale13.getDisplayName();
        java.lang.String str17 = locale13.getISO3Language();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "French (France)" + "'", str16, "French (France)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Collection<java.util.Locale> localeCollection10 = null;
        java.util.Locale.FilteringMode filteringMode11 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection10, filteringMode11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap19);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + filteringMode11 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode11.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket4.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int16 = dateTimeField14.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField17 = dateTimeField14.getDurationField();
        java.lang.String str18 = dateTimeField14.toString();
        dateTimeParserBucket4.saveField(dateTimeField14, (int) (byte) 10);
        long long22 = dateTimeField14.roundFloor((long) 1982);
        long long24 = dateTimeField14.roundHalfFloor(292278993L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[yearOfEra]" + "'", str18, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray20 = null;
        int int21 = dateTimeField18.getMinimumValue(readablePartial19, intArray20);
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int28 = dateTimeField26.getLeapAmount((long) 0);
        int int30 = dateTimeField26.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial31 = null;
        int[] intArray36 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int37 = dateTimeField26.getMaximumValue(readablePartial31, intArray36);
        int[] intArray39 = dateTimeField18.add(readablePartial22, (int) 'a', intArray36, (int) (short) 0);
        boolean boolean40 = dateTimeField18.isSupported();
        java.lang.String str41 = dateTimeField18.toString();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet46 = locale43.getExtensionKeys();
        int int47 = dateTimeField18.getMaximumTextLength(locale43);
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = new java.util.Locale("CHN");
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = locale50.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTimeField18.getAsText(readablePartial48, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str41, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals(locale50.toString(), "chn");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "chn" + "'", str52, "chn");
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet7, filteringMode8);
        java.util.Locale.FilteringMode filteringMode10 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList9, filteringMode10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + filteringMode10 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode10.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.lang.String str21 = locale10.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet22 = locale17.getUnicodeLocaleKeys();
        java.lang.String str23 = locale17.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italy" + "'", str21, "Italy");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "US" + "'", str23, "US");
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale2 = new java.util.Locale("China");
        java.lang.String str3 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals(locale2.toString(), "china");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italian" + "'", str3, "Italian");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "china" + "'", str5, "china");
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.weekyearOfCentury();
        long long51 = dateTimeField48.add(1439L, 31);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology54, locale63, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.centuryOfEra();
        java.util.Locale locale76 = new java.util.Locale("1970");
        java.lang.String str77 = dateTimeField73.getAsShortText((-61062681600000L), locale76);
        org.joda.time.ReadablePartial readablePartial78 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType79.getField(chronology80);
        int int83 = dateTimeField81.getLeapAmount((long) 0);
        int int85 = dateTimeField81.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial86 = null;
        int[] intArray91 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int92 = dateTimeField81.getMaximumValue(readablePartial86, intArray91);
        int int93 = dateTimeField73.getMinimumValue(readablePartial78, intArray91);
        int int94 = dateTimeField48.getMinimumValue(readablePartial52, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            chronology17.validate(readablePartial26, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 978307201439L + "'", long51 == 978307201439L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals(locale76.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0" + "'", str77, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 292278993 + "'", int92 == 292278993);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.yearOfCentury();
        long long25 = dateTimeField23.remainder(292278782L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 292278782L + "'", long25 == 292278782L);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        long long42 = dateTimeField39.getDifferenceAsLong((long) ' ', 100L);
        dateTimeParserBucket36.saveField(dateTimeField39, 998);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket36.getZone();
        long long48 = dateTimeParserBucket36.computeMillis(true, "100");
        long long50 = dateTimeParserBucket36.computeMillis(true);
        java.util.Locale locale51 = dateTimeParserBucket36.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 59880000L + "'", long48 == 59880000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 59880000L + "'", long50 == 59880000L);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u52a0\u62ff\u5927", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        java.util.Locale locale2 = new java.util.Locale("", "Chinese (China)");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayCountry();
        java.util.Locale locale7 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology9, locale10, (java.lang.Integer) 1);
        java.lang.String str13 = locale10.getScript();
        java.lang.String str14 = locale7.getDisplayScript(locale10);
        java.lang.String str15 = locale7.toLanguageTag();
        java.lang.String str16 = locale2.getDisplayScript(locale7);
        java.lang.String str17 = locale7.getLanguage();
        java.lang.String str18 = locale7.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CHINESE (CHINA)" + "'", str4, "CHINESE (CHINA)");
        org.junit.Assert.assertEquals(locale7.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        java.util.Locale locale1 = new java.util.Locale("-1");
        java.lang.String str2 = locale1.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for -1");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = dateTimeZone9.getShortName((long) 100, locale14);
        dateTimeParserBucket4.setZone(dateTimeZone9);
        dateTimeParserBucket4.setOffset(10);
        java.util.Locale locale21 = dateTimeParserBucket4.getLocale();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str27 = dateTimeZone25.getName((-63158400000L));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        long long33 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 81);
        dateTimeParserBucket4.setZone(dateTimeZone28);
        int int35 = dateTimeParserBucket4.getOffset();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+35:00" + "'", str27, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 126000081L + "'", long33 == 126000081L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("dayOfMonth", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=dayofmonth");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        java.util.Locale locale38 = dateTimeParserBucket37.getLocale();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        boolean boolean44 = dateTimeField43.isLenient();
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.lang.String str52 = dateTimeField43.getAsText(readablePartial45, (int) 'x', locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology40, locale49, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        boolean boolean60 = dateTimeField58.isLeap(3692217600000L);
        dateTimeParserBucket37.saveField(dateTimeField58, (int) '#');
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = locale64.getDisplayName();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        boolean boolean72 = dateTimeField71.isLenient();
        org.joda.time.ReadablePartial readablePartial73 = null;
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = locale75.getDisplayName();
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = locale75.getDisplayName(locale77);
        java.lang.String str80 = dateTimeField71.getAsText(readablePartial73, (int) 'x', locale77);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology68, locale77, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology83 = dateTimeParserBucket82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.seconds();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.monthOfYear();
        org.joda.time.DurationField durationField87 = chronology83.hours();
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        boolean boolean89 = locale88.hasExtensions();
        java.lang.String str90 = locale88.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology83, locale88, (java.lang.Integer) 4, 1970);
        java.lang.String str94 = locale64.getDisplayVariant(locale88);
        java.lang.String str95 = dateTimeField58.getAsShortText(67, locale64);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "120" + "'", str52, "120");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "cinese (Cina)" + "'", str76, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "it" + "'", str78, "it");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "cinese (Cina)" + "'", str79, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "120" + "'", str80, "120");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "67" + "'", str95, "67");
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.UK;
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "Chinese (China)", locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType16.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.weekOfWeekyear();
        long long45 = dateTimeField42.add((long) (-51011448), 0);
        int int47 = dateTimeField42.getMinimumValue(43200000L);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = dateTimeField42.set((long) 53, "\u65e5\u672c");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-51011448L) + "'", long45 == (-51011448L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField22 = chronology16.days();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("can_FRENCH_DateTimeField[minuteOfDay]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=can_french_datetimefield[minuteofday]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        long long18 = dateTimeParserBucket16.computeMillis();
        long long21 = dateTimeParserBucket16.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket16.saveField(dateTimeFieldType22, 9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        boolean boolean44 = dateTimeFieldType22.isSupported(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology53, locale54, (java.lang.Integer) 1);
        java.lang.String str57 = locale54.getScript();
        java.lang.String str58 = dateTimeField47.getAsShortText(readablePartial50, (int) ' ', locale54);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str64 = locale60.getExtension('a');
        java.lang.String str65 = locale59.getDisplayCountry(locale60);
        int int66 = dateTimeField47.getMaximumTextLength(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 4, chronology41, locale59);
        java.lang.String str68 = chronology41.toString();
        org.joda.time.Chronology chronology69 = chronology41.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = chronology41.getDateTimeMillis(31, 1999, 1370, 53, 99, 292320000, 4382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32" + "'", str58, "32");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        long long21 = dateTimeField19.roundHalfCeiling((long) 4);
        int int23 = dateTimeField19.get(850395L);
        boolean boolean24 = dateTimeField19.isLenient();
        long long26 = dateTimeField19.roundFloor(4200013L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Chine)" + "'", str9, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        java.util.Locale locale1 = new java.util.Locale("UTC");
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        java.lang.String str6 = locale2.getDisplayCountry();
        java.lang.String str7 = locale1.getDisplayCountry(locale2);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.UK;
        dateTimeParserBucket44.saveField(dateTimeFieldType45, "Chinese (China)", locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology25, locale47, (java.lang.Integer) 12, 100);
        java.lang.String str52 = locale47.getDisplayVariant();
        boolean boolean53 = locale47.hasExtensions();
        java.lang.String str54 = locale47.getDisplayCountry();
        java.lang.String str55 = locale2.getDisplayCountry(locale47);
        java.lang.String str56 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "utc");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japon" + "'", str6, "Japon");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "chinois (Chine)" + "'", str18, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "chinois (Chine)" + "'", str38, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Royaume-Uni" + "'", str54, "Royaume-Uni");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Japan" + "'", str55, "Japan");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japon" + "'", str56, "Japon");
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        java.lang.String str31 = dateTimeField30.getName();
        long long33 = dateTimeField30.roundFloor(4862077L);
        long long35 = dateTimeField30.roundHalfEven((-313907562675054L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "chinois (Chine)" + "'", str19, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "halfdayOfDay" + "'", str31, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-313907572800000L) + "'", long35 == (-313907572800000L));
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology16.getDateTimeMillis(45758480994852L, (-1977), 20, 1982, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1977 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Chine)" + "'", str9, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology16.millis();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyear();
        java.lang.String str24 = chronology16.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Chine)" + "'", str9, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffsetFromLocal(6048000052L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = dateTimeZone1.getShortName((long) 18000000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 1);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        long long25 = dateTimeParserBucket23.computeMillis();
        java.lang.Object obj26 = dateTimeParserBucket23.saveState();
        dateTimeParserBucket23.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket23.setOffset((int) (byte) 100);
        dateTimeParserBucket23.setOffset(421200000);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone33.getMillisKeepLocal(dateTimeZone34, 1L);
        int int38 = dateTimeZone33.getOffsetFromLocal((long) (short) 0);
        dateTimeParserBucket23.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology40 = chronology16.withZone(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology40.add(readablePeriod41, 360000000L, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.monthOfYear();
        org.joda.time.ReadablePartial readablePartial46 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        boolean boolean52 = dateTimeField51.isLenient();
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale55.getDisplayName(locale57);
        java.lang.String str60 = dateTimeField51.getAsText(readablePartial53, (int) 'x', locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology48, locale57, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.seconds();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfMonth();
        boolean boolean66 = dateTimeField65.isSupported();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("117");
        java.lang.String str70 = locale69.getISO3Country();
        java.lang.String str71 = dateTimeField65.getAsShortText(1439, locale69);
        java.lang.String str72 = locale69.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dateTimeField45.getAsShortText(readablePartial46, locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 360000000L + "'", long44 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (China)" + "'", str56, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it" + "'", str58, "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "cinese (Cina)" + "'", str59, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "120" + "'", str60, "120");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1439" + "'", str71, "1439");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField21.getMinimumValue(readablePartial22);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField21.set(3029788800000L, "zh_TW");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zh_TW\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone8.getMillisKeepLocal(dateTimeZone9, 1L);
        java.lang.String str13 = dateTimeZone8.getNameKey((long) '#');
        long long17 = dateTimeZone8.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str19 = dateTimeZone8.getNameKey((-58979923200001L));
        java.lang.String str21 = dateTimeZone8.getShortName((long) (byte) -1);
        java.lang.String str23 = dateTimeZone8.getName((long) 9);
        dateTimeParserBucket5.setZone(dateTimeZone8);
        long long26 = dateTimeZone8.previousTransition(1L);
        long long28 = dateTimeZone8.nextTransition((-31449599999L));
        java.util.Locale locale32 = new java.util.Locale("DateTimeField[dayOfWeek]", "\u82f1\u6587\u82f1\u570b)");
        java.lang.String str33 = dateTimeZone8.getName((-7752503400000L), locale32);
        java.lang.String str34 = locale32.getDisplayScript();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-31449599999L) + "'", long28 == (-31449599999L));
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "\u82f1\u6587\u82f1\u570b)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ita");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ita" + "'", str2, "ita");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ita" + "'", str3, "ita");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        int int23 = dateTimeField21.getMinimumValue(28800081L);
        long long25 = dateTimeField21.remainder((-7752503400000L));
        long long27 = dateTimeField21.roundCeiling((-21206188800000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10536600000L + "'", long25 == 10536600000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-21206188800000L) + "'", long27 == (-21206188800000L));
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        int int32 = dateTimeZone25.getOffsetFromLocal(0L);
        long long34 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology37 = chronology17.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = chronology17.days();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone39.getMillisKeepLocal(dateTimeZone40, 1L);
        java.lang.String str43 = dateTimeZone40.getID();
        long long46 = dateTimeZone40.adjustOffset(31L, false);
        int int48 = dateTimeZone40.getStandardOffset((long) 9);
        long long50 = dateTimeZone40.nextTransition((long) 100);
        boolean boolean52 = dateTimeZone40.isStandardOffset((long) 86399);
        boolean boolean54 = dateTimeZone40.equals((java.lang.Object) 360000000L);
        java.lang.String str56 = dateTimeZone40.getNameKey((long) 366);
        long long58 = dateTimeZone40.previousTransition((long) 292278993);
        org.joda.time.Chronology chronology59 = chronology17.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField60 = chronology17.hourOfHalfday();
        org.joda.time.DurationField durationField61 = chronology17.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31L + "'", long46 == 31L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 292278993L + "'", long58 == 292278993L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-3600000), (-1277984));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1277984");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        long long12 = dateTimeField2.add(1L, (long) 0);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale13.getScript();
        int int15 = dateTimeField2.getMaximumTextLength(locale13);
        int int17 = dateTimeField2.getMinimumValue(110417821800000L);
        int int19 = dateTimeField2.get(30668400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.era();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dateTimeField24.add(7200999L, 2678399965L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder44 = builder10.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder46 = builder44.setLanguage("+12:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: +12:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CHN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.Object obj5 = null;
        boolean boolean6 = languageRange1.equals(obj5);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chn" + "'", str4, "chn");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(366, 115200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 115200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) 600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=600000.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Francia");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        java.lang.String str37 = locale23.getDisplayLanguage(locale33);
        java.lang.String str38 = locale23.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale23);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology19.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        long long45 = dateTimeZone42.getMillisKeepLocal(dateTimeZone43, 1L);
        java.lang.String str46 = dateTimeZone43.getID();
        long long49 = dateTimeZone43.adjustOffset(31L, false);
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale51.getVariant();
        java.lang.String str53 = locale51.getDisplayCountry();
        java.lang.String str54 = dateTimeZone43.getShortName((long) (byte) -1, locale51);
        java.lang.String str56 = dateTimeZone43.getNameKey(9223371985594200012L);
        org.joda.time.Chronology chronology57 = chronology19.withZone(dateTimeZone43);
        org.joda.time.DurationField durationField58 = chronology57.months();
        boolean boolean59 = languageRange1.equals((java.lang.Object) durationField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tedesco" + "'", str37, "tedesco");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 31L + "'", long49 == 31L);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italia" + "'", str53, "Italia");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale locale8 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.setScript("");
        java.util.Locale.Builder builder12 = builder10.setLanguage("January");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguage("\u65e5\u6587\u65e5\u672c)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.DurationField durationField4 = dateTimeField2.getDurationField();
        long long7 = dateTimeField2.set(1L, (int) (short) 0);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (byte) 10, (long) (short) 0);
        long long13 = dateTimeField2.addWrapField(86400000L, 14400000);
        java.util.Locale locale18 = new java.util.Locale("", "Chinese (China)");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.lang.String str21 = locale18.getLanguage();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getISO3Language();
        java.lang.String str24 = locale22.getDisplayName();
        java.lang.String str25 = locale18.getDisplayScript(locale22);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField2.set(3600000L, "\u82f1\u6587\u82f1\u570b)", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (??)\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
        org.junit.Assert.assertEquals(locale18.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CHINESE (CHINA)" + "'", str20, "CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale locale8 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("TEDESCO");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setVariant("ita");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ita [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getExtension('a');
        java.lang.String str6 = locale0.getDisplayCountry(locale1);
        java.lang.String str7 = locale1.getScript();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        boolean boolean13 = dateTimeField12.isLenient();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.lang.String str21 = dateTimeField12.getAsText(readablePartial14, (int) 'x', locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology9, locale18, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.monthOfYear();
        java.lang.String str28 = chronology24.toString();
        java.lang.String str29 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.secondOfDay();
        org.joda.time.DurationField durationField31 = chronology24.minutes();
        boolean boolean32 = locale1.equals((java.lang.Object) chronology24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cinese (Cina)" + "'", str20, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "120" + "'", str21, "120");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "Chinese (China)");
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial12, (int) (short) -1, locale16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = chronology36.hours();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder41 = builder39.setLocale(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        java.lang.String str54 = locale40.getDisplayLanguage(locale50);
        java.lang.String str55 = locale40.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology36, locale40);
        java.lang.String str57 = locale16.getDisplayScript(locale40);
        java.lang.String str58 = locale40.toLanguageTag();
        java.lang.String str59 = locale40.getDisplayName();
        java.util.Set<java.lang.String> strSet60 = locale40.getUnicodeLocaleKeys();
        java.lang.String str61 = locale40.getVariant();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tedesco" + "'", str54, "tedesco");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "deu" + "'", str55, "deu");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "de-DE" + "'", str58, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tedesco (Germania)" + "'", str59, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        boolean boolean31 = dateTimeField30.isSupported();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology50, locale52, (java.lang.Integer) 1970);
        java.lang.String str55 = dateTimeField30.getAsShortText(9, locale52);
        int int57 = dateTimeField30.get(0L);
        boolean boolean59 = dateTimeField30.isLeap(127L);
        java.lang.Class<?> wildcardClass60 = dateTimeField30.getClass();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.Chronology chronology27 = chronology17.withUTC();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = chronology17.get(readablePeriod28, (-86399001L), (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str9 = dateTimeZone7.getName(3956137045953066102L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (-1));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DurationField durationField23 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.minuteOfDay();
        java.lang.String str25 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.monthOfYear();
        boolean boolean29 = dateTimeZone2.equals((java.lang.Object) dateTimeField28);
        java.lang.String str31 = dateTimeField28.getAsShortText((-28857600000L));
        long long34 = dateTimeField28.getDifferenceAsLong(11400999L, (long) 366);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:10" + "'", str4, "-01:10");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "feb" + "'", str31, "feb");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("50");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '50' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DurationField durationField18 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        java.util.Locale locale2 = new java.util.Locale("hi!", "ja");
        boolean boolean3 = locale2.hasExtensions();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6);
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.seconds();
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology29, locale31, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int39 = dateTimeField37.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField40 = dateTimeField37.getDurationField();
        int int42 = dateTimeField37.getMaximumValue((long) (short) 1);
        long long44 = dateTimeField37.roundHalfEven((long) ' ');
        int int46 = dateTimeField37.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.Locale locale51 = new java.util.Locale("", "Chinese (China)");
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = dateTimeField37.getAsShortText(readablePartial47, (int) (short) -1, locale51);
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale55);
        java.lang.String str57 = dateTimeField37.getAsShortText((long) (byte) 100, locale55);
        java.lang.String str59 = locale55.getExtension('a');
        int int60 = dateTimeField34.getMaximumTextLength(locale55);
        java.lang.String str61 = locale6.getDisplayScript(locale55);
        java.lang.String str62 = locale2.getDisplayLanguage(locale6);
        java.util.Set<java.lang.String> strSet63 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_JA");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JPN" + "'", str10, "JPN");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970" + "'", str57, "1970");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(strSet63);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.removeUnicodeLocaleAttribute("GBR");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.removeUnicodeLocaleAttribute("ja_JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ja_JP [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (China)" + "'", str1, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int21 = dateTimeField19.getLeapAmount((long) 0);
        long long23 = dateTimeField19.roundHalfCeiling((long) (byte) 0);
        long long26 = dateTimeField19.set((-1L), 100);
        int int28 = dateTimeField19.get((long) (byte) 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale33 = new java.util.Locale("", "tedesco");
        java.lang.String str34 = dateTimeField19.getAsText(readablePartial29, (int) (short) 100, locale33);
        java.lang.String str35 = locale13.getDisplayScript(locale33);
        java.util.Locale.Builder builder36 = builder10.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder36.setRegion("ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-58979923200001L) + "'", long26 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertEquals(locale33.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        java.lang.String str30 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.yearOfCentury();
        java.util.Locale locale36 = new java.util.Locale("December", "cinese (Cina)", "Taiwan");
        java.lang.String str37 = dateTimeField31.getAsShortText(86399, locale36);
        boolean boolean38 = dateTimeField31.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale36.toString(), "december_CINESE (CINA)_Taiwan");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "86399" + "'", str37, "86399");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) 0.0f);
        double double3 = languageRange2.getWeight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = dateTimeField6.getType();
        org.joda.time.DurationField durationField8 = dateTimeField6.getDurationField();
        long long11 = dateTimeField6.set(1L, (int) (short) 0);
        long long14 = dateTimeField6.getDifferenceAsLong((long) (byte) 10, (long) (short) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField6.getMinimumValue(readablePartial15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.Object obj22 = dateTimeParserBucket21.saveState();
        long long23 = dateTimeParserBucket21.computeMillis();
        java.lang.Object obj24 = dateTimeParserBucket21.saveState();
        dateTimeParserBucket21.setOffset((java.lang.Integer) 1);
        java.lang.Object obj27 = dateTimeParserBucket21.saveState();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology29, locale30, (java.lang.Integer) 1);
        java.lang.Object obj33 = dateTimeParserBucket32.saveState();
        long long34 = dateTimeParserBucket32.computeMillis();
        dateTimeParserBucket32.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        dateTimeParserBucket32.saveField(dateTimeFieldType37, "zh_CN", locale41);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = locale44.getISO3Country();
        boolean boolean47 = locale44.hasExtensions();
        java.lang.String str48 = locale44.getISO3Language();
        dateTimeParserBucket21.saveField(dateTimeFieldType37, "hi!", locale44);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getCountry();
        java.lang.String str52 = locale44.getDisplayLanguage(locale50);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale57 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale54.getDisplayName(locale57);
        java.lang.String str60 = locale50.getDisplayLanguage(locale54);
        java.lang.String str61 = locale50.getDisplayScript();
        int int62 = dateTimeField6.getMaximumTextLength(locale50);
        java.lang.Object obj63 = locale50.clone();
        boolean boolean64 = languageRange2.equals((java.lang.Object) locale50);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "deu" + "'", str48, "deu");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str52, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals(locale57.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Japanese" + "'", str60, "Japanese");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "ja");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology17.getZone();
        org.joda.time.DurationField durationField23 = chronology17.weeks();
        org.joda.time.DurationField durationField24 = chronology17.halfdays();
        org.joda.time.DurationField durationField25 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.era();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        java.lang.String str51 = dateTimeField46.getAsShortText((long) 999, locale49);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getVariant();
        java.util.Locale.setDefault(locale53);
        java.util.Locale locale58 = new java.util.Locale("", "tedesco");
        java.lang.String str59 = locale53.getDisplayScript(locale58);
        java.lang.String str60 = locale53.getDisplayCountry();
        java.lang.String str61 = dateTimeField46.getAsShortText((long) 366, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(4039377000000L, chronology17, locale53, (java.lang.Integer) 7);
        dateTimeParserBucket63.setPivotYear((java.lang.Integer) 366);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AD" + "'", str51, "AD");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale58.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Italia" + "'", str60, "Italia");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "dopo Cristo" + "'", str61, "dopo Cristo");
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en-US", (double) (-360000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.60000001E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField39 = chronology18.seconds();
        org.joda.time.Chronology chronology40 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        dateTimeParserBucket57.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeParserBucket57.getZone();
        long long63 = dateTimeZone61.nextTransition((long) '4');
        org.joda.time.Chronology chronology64 = chronology40.withZone(dateTimeZone61);
        org.joda.time.DurationField durationField65 = chronology40.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = chronology40.getDateTimeMillis(86399, (int) (byte) 1, (-1), 1439, 12, 421200000, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.minuteOfHour();
        org.joda.time.DurationField durationField38 = chronology36.hours();
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = chronology36.get(readablePartial39, 3635360901936000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int29 = dateTimeField27.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField30 = dateTimeField27.getDurationField();
        int int32 = dateTimeField27.getMaximumValue((long) (short) 1);
        long long34 = dateTimeField27.roundHalfEven((long) ' ');
        int int36 = dateTimeField27.getMinimumValue((long) 100);
        long long39 = dateTimeField27.add(0L, (long) 0);
        long long41 = dateTimeField27.remainder((long) 10);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale46 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = locale43.getDisplayName(locale46);
        int int49 = dateTimeField27.getMaximumTextLength(locale43);
        java.lang.String str50 = locale43.getDisplayVariant();
        java.lang.String str51 = locale43.getISO3Language();
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str54 = locale43.getDisplayLanguage(locale52);
        int int55 = dateTimeField24.getMaximumTextLength(locale43);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeField24.set(7201000L, "\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals(locale46.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        java.lang.Integer int38 = dateTimeParserBucket37.getOffsetInteger();
        java.lang.Integer int39 = dateTimeParserBucket37.getPivotYear();
        dateTimeParserBucket37.setOffset((java.lang.Integer) 1849);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getLanguage();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30);
        java.lang.Integer int34 = dateTimeParserBucket33.getPivotYear();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology36, locale37, (java.lang.Integer) 1);
        java.lang.Object obj40 = dateTimeParserBucket39.saveState();
        long long41 = dateTimeParserBucket39.computeMillis();
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        dateTimeParserBucket39.saveField(dateTimeFieldType44, "zh_CN", locale48);
        boolean boolean50 = dateTimeParserBucket33.restoreState((java.lang.Object) locale48);
        java.lang.String str51 = locale26.getDisplayVariant(locale48);
        java.lang.String str52 = dateTimeField23.getAsShortText(readablePartial24, (-1), locale48);
        java.util.Locale locale55 = new java.util.Locale("", "tedesco");
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder58 = builder56.setLocale(locale57);
        java.lang.String str59 = locale55.getDisplayName(locale57);
        int int60 = dateTimeField23.getMaximumShortTextLength(locale55);
        java.util.Locale.setDefault(locale55);
        java.lang.String str62 = locale55.getScript();
        java.lang.String str63 = locale55.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1" + "'", str52, "-1");
        org.junit.Assert.assertEquals(locale55.toString(), "_TEDESCO");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "TEDESCO" + "'", str59, "TEDESCO");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder45 = builder10.setUnicodeLocaleKeyword("52", "jpn");
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder45.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder51 = builder45.setExtension('x', "+35:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: +35:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long29 = dateTimeZone26.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int35 = dateTimeField33.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField36 = dateTimeField33.getDurationField();
        int int38 = dateTimeField33.getMaximumValue((long) (short) 1);
        long long40 = dateTimeField33.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial41 = null;
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder47 = builder43.clearExtensions();
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = dateTimeField33.getAsShortText(readablePartial41, (int) (byte) 100, locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.lang.String str51 = dateTimeZone26.getShortName((long) 1970, locale48);
        long long54 = dateTimeZone26.adjustOffset(3061065600000L, true);
        long long57 = dateTimeZone26.adjustOffset(127L, false);
        org.joda.time.Chronology chronology58 = chronology16.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField59 = chronology16.millisOfSecond();
        int int61 = dateTimeField59.get(7018868767910399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4200000L + "'", long29 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:10" + "'", str51, "-01:10");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3061065600000L + "'", long54 == 3061065600000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 127L + "'", long57 == 127L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 999 + "'", int61 == 999);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType22.getField(chronology39);
        java.util.Locale locale48 = new java.util.Locale("DateTimeField[millisOfSecond]", "Italy", "halfdayOfDay");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(439L, chronology39, locale48, (java.lang.Integer) 35, (-3600000));
        org.joda.time.DateTimeField dateTimeField52 = chronology39.hourOfHalfday();
        org.joda.time.DurationField durationField53 = chronology39.days();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals(locale48.toString(), "datetimefield[millisofsecond]_ITALY_halfdayOfDay");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology4, locale5, (java.lang.Integer) 1);
        java.lang.Object obj8 = dateTimeParserBucket7.saveState();
        long long9 = dateTimeParserBucket7.computeMillis();
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        dateTimeParserBucket7.saveField(dateTimeFieldType12, "zh_CN", locale16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology19, locale20, (java.lang.Integer) 1);
        java.lang.Object obj23 = dateTimeParserBucket22.saveState();
        long long24 = dateTimeParserBucket22.computeMillis();
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        dateTimeParserBucket22.saveField(dateTimeFieldType27, "zh_CN", locale31);
        java.lang.String str33 = locale31.getVariant();
        java.lang.String str34 = locale16.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder38 = builder36.setLocale(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        boolean boolean42 = dateTimeField41.isLenient();
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale45.getDisplayName();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = locale45.getDisplayName(locale47);
        java.lang.String str50 = dateTimeField41.getAsText(readablePartial43, (int) 'x', locale47);
        java.lang.String str51 = locale37.getDisplayLanguage(locale47);
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale locale53 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56);
        java.lang.Integer int60 = dateTimeParserBucket59.getPivotYear();
        long long63 = dateTimeParserBucket59.computeMillis(true, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        boolean boolean74 = dateTimeField73.isLenient();
        org.joda.time.ReadablePartial readablePartial75 = null;
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale77.getDisplayName();
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = locale77.getDisplayName(locale79);
        java.lang.String str82 = dateTimeField73.getAsText(readablePartial75, (int) 'x', locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology70, locale79, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology85 = dateTimeParserBucket84.getChronology();
        java.util.Locale locale87 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology85, locale87, (java.lang.Integer) 12, (int) (byte) 10);
        java.util.Set<java.lang.String> strSet91 = locale87.getUnicodeLocaleKeys();
        dateTimeParserBucket59.saveField(dateTimeFieldType64, "\u65e5\u672c", locale87);
        java.lang.String str93 = locale87.getScript();
        java.util.Locale.setDefault(category0, locale87);
        java.util.Set<java.lang.Character> charSet95 = locale87.getExtensionKeys();
        java.lang.String str96 = locale87.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (China)" + "'", str46, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "120" + "'", str50, "120");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tedesco" + "'", str51, "tedesco");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (China)" + "'", str78, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "it" + "'", str80, "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "cinese (Cina)" + "'", str81, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "120" + "'", str82, "120");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertEquals(locale87.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(charSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "utc" + "'", str96, "utc");
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguage("+00:00:01.910");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: +00:00:01.910 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        int int32 = dateTimeZone25.getOffsetFromLocal(0L);
        long long34 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology37 = chronology17.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = chronology17.months();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology17.getZone();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        long long23 = dateTimeField20.add((long) 1, (long) 'x');
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getISO3Country();
        java.lang.String str27 = dateTimeField20.getAsText((int) (byte) 0, locale25);
        long long29 = dateTimeField20.roundCeiling((-1L));
        int int31 = dateTimeField20.getMinimumValue((-62104060799990L));
        int int33 = dateTimeField20.getMaximumValue(31536000116L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean41 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayName(locale46);
        java.lang.String str49 = dateTimeField40.getAsText(readablePartial42, (int) 'x', locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology37, locale46, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = chronology52.hours();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology52, locale55, (java.lang.Integer) 0);
        java.lang.String str58 = locale55.getCountry();
        java.lang.String str59 = dateTimeField20.getAsText(100800000L, locale55);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 120001L + "'", long23 == 120001L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "USA" + "'", str26, "USA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "120" + "'", str49, "120");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray24 = null;
        int int25 = dateTimeField22.getMinimumValue(readablePartial23, intArray24);
        int int27 = dateTimeField22.getLeapAmount(32440608000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale20.getCountry();
        java.lang.String str24 = locale20.getISO3Country();
        dateTimeParserBucket16.saveField(dateTimeFieldType18, "CHN", locale20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.millis();
        boolean boolean44 = dateTimeFieldType18.isSupported(chronology42);
        org.joda.time.Chronology chronology45 = chronology42.withUTC();
        org.joda.time.DurationField durationField46 = chronology42.weeks();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(31536000000L, chronology42, locale47, (java.lang.Integer) 36000000);
        long long53 = dateTimeParserBucket50.computeMillis(false, "335475");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JP" + "'", str23, "JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JPN" + "'", str24, "JPN");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 31536000000L + "'", long53 == 31536000000L);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder14 = builder10.setExtension('x', "Giappone");
        java.util.Locale.Builder builder16 = builder10.addUnicodeLocaleAttribute("Cina");
        java.util.Locale.Builder builder18 = builder16.setLanguage("weekyear");
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "japan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder18.setLanguage("\u6728");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }
}

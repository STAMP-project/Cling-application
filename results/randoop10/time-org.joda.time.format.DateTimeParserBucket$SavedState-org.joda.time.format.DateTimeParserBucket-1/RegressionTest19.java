import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        java.lang.String str21 = chronology17.toString();
        long long25 = chronology17.add(97L, 4L, 70);
        long long29 = chronology17.add((long) 81, (-3600008L), 24);
        boolean boolean30 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.monthOfYear();
        java.lang.String str51 = chronology47.toString();
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.millisOfSecond();
        org.joda.time.DurationField durationField54 = chronology47.centuries();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        boolean boolean60 = dateTimeField59.isLenient();
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayName(locale65);
        java.lang.String str68 = dateTimeField59.getAsText(readablePartial61, (int) 'x', locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology56, locale65, (java.lang.Integer) (-1));
        java.util.Locale locale71 = dateTimeParserBucket70.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.US;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.lang.String str77 = locale74.getCountry();
        java.lang.String str78 = locale74.getISO3Country();
        dateTimeParserBucket70.saveField(dateTimeFieldType72, "CHN", locale74);
        org.joda.time.Chronology chronology80 = dateTimeParserBucket70.getChronology();
        dateTimeParserBucket70.setPivotYear((java.lang.Integer) 81);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket70.getZone();
        org.joda.time.Chronology chronology84 = chronology47.withZone(dateTimeZone83);
        boolean boolean85 = dateTimeFieldType0.isSupported(chronology84);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 377L + "'", long25 == 377L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-86400111L) + "'", long29 == (-86400111L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (China)" + "'", str64, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cinese (Cina)" + "'", str67, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "120" + "'", str68, "120");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "JP" + "'", str77, "JP");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "JPN" + "'", str78, "JPN");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        int int27 = dateTimeParserBucket4.getOffset();
        long long30 = dateTimeParserBucket4.computeMillis(false, "98");
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket4.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean37 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField36.getAsText(readablePartial38, (int) 'x', locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology33, locale42, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.hourOfDay();
        org.joda.time.DurationField durationField51 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.weekOfWeekyear();
        int int58 = dateTimeField56.get((-58980283200000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField56.getType();
        dateTimeParserBucket4.saveField(dateTimeFieldType59, 1999);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61820064000001L) + "'", long30 == (-61820064000001L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (China)" + "'", str41, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "120" + "'", str45, "120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.monthOfYear();
        org.joda.time.Chronology chronology32 = chronology18.withUTC();
        long long36 = chronology32.add(110417821800000L, 967766399L, 0);
        java.lang.String str37 = chronology32.toString();
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(4L, chronology32, locale38, (java.lang.Integer) 13);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 110417821800000L + "'", long36 == 110417821800000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        long long25 = dateTimeParserBucket15.computeMillis(true);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder28 = builder26.setLocale(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        java.lang.String str41 = locale27.getDisplayLanguage(locale37);
        boolean boolean42 = dateTimeParserBucket15.restoreState((java.lang.Object) locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        long long48 = dateTimeField45.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField45.getType();
        dateTimeParserBucket15.saveField(dateTimeFieldType49, (int) (byte) 0);
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 967766400000L + "'", long25 == 967766400000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tedesco" + "'", str41, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        int int27 = dateTimeParserBucket4.getOffset();
        long long30 = dateTimeParserBucket4.computeMillis(false, "98");
        dateTimeParserBucket4.setOffset((java.lang.Integer) 4);
        java.util.Locale locale33 = dateTimeParserBucket4.getLocale();
        java.util.Locale locale34 = dateTimeParserBucket4.getLocale();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology37, locale38, (java.lang.Integer) 1);
        java.lang.Object obj41 = dateTimeParserBucket40.saveState();
        java.util.Locale locale42 = dateTimeParserBucket40.getLocale();
        dateTimeParserBucket40.setOffset((int) (byte) 1);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket40.getChronology();
        java.lang.String str46 = chronology45.toString();
        java.util.Locale locale48 = new java.util.Locale("japan");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(439L, chronology45, locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        int int54 = dateTimeField52.getLeapAmount((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField52.getType();
        java.lang.String str56 = dateTimeFieldType55.getName();
        dateTimeParserBucket49.saveField(dateTimeFieldType55, 20);
        dateTimeParserBucket4.saveField(dateTimeFieldType55, 0);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        boolean boolean66 = dateTimeField65.isLenient();
        org.joda.time.ReadablePartial readablePartial67 = null;
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale69.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = locale69.getDisplayName(locale71);
        java.lang.String str74 = dateTimeField65.getAsText(readablePartial67, (int) 'x', locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology62, locale71, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = chronology77.hours();
        boolean boolean80 = dateTimeFieldType55.isSupported(chronology77);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61820064000001L) + "'", long30 == (-61820064000001L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals(locale48.toString(), "japan");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "yearOfEra" + "'", str56, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (China)" + "'", str70, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "it" + "'", str72, "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese (Cina)" + "'", str73, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "120" + "'", str74, "120");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray20 = null;
        int int21 = dateTimeField18.getMinimumValue(readablePartial19, intArray20);
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int28 = dateTimeField26.getLeapAmount((long) 0);
        int int30 = dateTimeField26.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial31 = null;
        int[] intArray36 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int37 = dateTimeField26.getMaximumValue(readablePartial31, intArray36);
        int[] intArray39 = dateTimeField18.add(readablePartial22, (int) 'a', intArray36, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone40.getMillisKeepLocal(dateTimeZone41, 1L);
        java.lang.String str44 = dateTimeZone41.getID();
        long long47 = dateTimeZone41.adjustOffset(31L, false);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.lang.String str52 = dateTimeZone41.getShortName((long) (byte) -1, locale49);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet57 = locale54.getExtensionKeys();
        java.lang.String str58 = locale49.getDisplayScript(locale54);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        boolean boolean64 = dateTimeField63.isLenient();
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale67.getDisplayName();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale67.getDisplayName(locale69);
        java.lang.String str72 = dateTimeField63.getAsText(readablePartial65, (int) 'x', locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology60, locale69, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.weekOfWeekyear();
        org.joda.time.DurationField durationField77 = chronology75.hours();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.era();
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayScript(locale81);
        java.lang.String str83 = dateTimeField78.getAsShortText((long) 999, locale81);
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.lang.String str86 = locale85.getVariant();
        java.util.Locale.setDefault(locale85);
        java.util.Locale locale90 = new java.util.Locale("", "tedesco");
        java.lang.String str91 = locale85.getDisplayScript(locale90);
        java.lang.String str92 = locale85.getDisplayCountry();
        java.lang.String str93 = dateTimeField78.getAsShortText((long) 366, locale85);
        java.lang.String str94 = locale49.getDisplayVariant(locale85);
        int int95 = dateTimeField18.getMaximumTextLength(locale49);
        boolean boolean96 = dateTimeField18.isSupported();
        int int98 = dateTimeField18.getMaximumValue((-18934093666970L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 100, 10, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 31L + "'", long47 == 31L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Italy" + "'", str51, "Italy");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese (China)" + "'", str68, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "cinese (Cina)" + "'", str71, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "120" + "'", str72, "120");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "AD" + "'", str83, "AD");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale90.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Italia" + "'", str92, "Italia");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "dopo Cristo" + "'", str93, "dopo Cristo");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 99 + "'", int98 == 99);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket4.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset(3061425600000L);
        long long10 = dateTimeZone6.previousTransition(0L);
        long long13 = dateTimeZone6.adjustOffset((-62104060799990L), false);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType17.getField(chronology34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology34, locale40, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        int int51 = dateTimeZone46.getOffsetFromLocal((long) (short) 0);
        boolean boolean53 = dateTimeZone46.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology54 = chronology34.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField55 = chronology34.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int59 = dateTimeZone57.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        java.lang.String str65 = dateTimeZone57.getShortName((long) 100, locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology34, locale62, (java.lang.Integer) 366, 99);
        java.lang.String str69 = dateTimeZone6.getName(59L, locale62);
        java.util.Locale locale70 = locale62.stripExtensions();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62104060799990L) + "'", long13 == (-62104060799990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        java.util.Locale locale6 = dateTimeParserBucket4.getLocale();
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        boolean boolean35 = dateTimeZone32.isFixed();
        org.joda.time.Chronology chronology36 = chronology26.withZone(dateTimeZone32);
        boolean boolean37 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology36.getDateTimeMillis(292278993L, (-123), 35940000, 30347, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.convertUTCToLocal(31536000116L);
        long long7 = dateTimeZone1.convertLocalToUTC(0L, true, 360000010L);
        long long10 = dateTimeZone1.convertLocalToUTC((-54600002L), true);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology13, locale14, (java.lang.Integer) 1);
        java.lang.Object obj17 = dateTimeParserBucket16.saveState();
        long long18 = dateTimeParserBucket16.computeMillis();
        java.lang.Object obj19 = dateTimeParserBucket16.saveState();
        dateTimeParserBucket16.setOffset((java.lang.Integer) 1);
        java.lang.Object obj22 = dateTimeParserBucket16.saveState();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology24, locale25, (java.lang.Integer) 1);
        java.lang.Object obj28 = dateTimeParserBucket27.saveState();
        long long29 = dateTimeParserBucket27.computeMillis();
        dateTimeParserBucket27.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        dateTimeParserBucket27.saveField(dateTimeFieldType32, "zh_CN", locale36);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale39.getISO3Country();
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str43 = locale39.getISO3Language();
        dateTimeParserBucket16.saveField(dateTimeFieldType32, "hi!", locale39);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getCountry();
        java.lang.String str47 = locale39.getDisplayLanguage(locale45);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale52 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale49.getDisplayName(locale52);
        java.lang.String str55 = locale45.getDisplayLanguage(locale49);
        java.lang.String str56 = dateTimeZone1.getShortName((-1765773605497L), locale45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 31536000116L + "'", long3 == 31536000116L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-54600002L) + "'", long10 == (-54600002L));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str47, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals(locale52.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Japanese" + "'", str55, "Japanese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfYear();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int[] intArray33 = null;
        int[] intArray35 = dateTimeField30.addWrapPartial(readablePartial31, 366, intArray33, 0);
        int int37 = dateTimeField30.get(4200010L);
        org.joda.time.ReadablePartial readablePartial38 = null;
        int int39 = dateTimeField30.getMinimumValue(readablePartial38);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        long long17 = dateTimeParserBucket4.computeMillis();
        long long19 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket4.getZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2L) + "'", long17 == (-2L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2L) + "'", long19 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("4382", (double) 120L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setScript("year");
        java.util.Locale.Builder builder20 = builder16.setLanguageTag("ja");
        java.util.Locale.Builder builder22 = builder16.setLanguageTag("ITA");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Franzo?sisch (Frankreich) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DurationField durationField23 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.yearOfEra();
        int int27 = dateTimeField25.getMaximumValue((-292275000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = chronology37.weekyearOfCentury();
        boolean boolean45 = dateTimeFieldType0.isSupported(chronology37);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology37.getZone();
        long long48 = dateTimeZone46.nextTransition(946689000000L);
        java.lang.String str50 = dateTimeZone46.getNameKey(5270446751L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 946689000000L + "'", long48 == 946689000000L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        java.lang.String str37 = locale23.getDisplayLanguage(locale33);
        java.lang.String str38 = locale23.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale23);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.minuteOfHour();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(97L, chronology19, locale41, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField46 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = chronology19.clockhourOfHalfday();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology50, locale59, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.clockhourOfDay();
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale69.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = locale69.getDisplayName(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket(967766400000L, chronology65, locale71, (java.lang.Integer) 70, 0);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(3124224000010L, chronology19, locale71, (java.lang.Integer) 2077);
        org.joda.time.Chronology chronology79 = chronology19.withUTC();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tedesco" + "'", str37, "tedesco");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (China)" + "'", str70, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "it" + "'", str72, "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese (Cina)" + "'", str73, "cinese (Cina)");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.halfdayOfDay();
        org.joda.time.DurationField durationField23 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology16.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket4.getZone();
        long long32 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35);
        java.lang.Integer int39 = dateTimeParserBucket38.getPivotYear();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        dateTimeParserBucket4.setZone(dateTimeZone41);
        java.lang.Class<?> wildcardClass43 = dateTimeZone41.getClass();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.minuteOfHour();
        org.joda.time.DurationField durationField24 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology16.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology16.getDateTimeMillis((long) 344, (-11201), 16129439, 999, 25800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11201 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfMonth();
        int int23 = dateTimeField21.getLeapAmount(999L);
        int int25 = dateTimeField21.get((long) 344);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField21.set(720099L, "Italian");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Italian\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField2.getMaximumValue(readablePartial12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "tedesco");
        java.lang.String str19 = dateTimeField2.getAsText(readablePartial14, 998, locale18);
        long long22 = dateTimeField2.add(31570320998L, 13);
        long long25 = dateTimeField2.addWrapField(540000L, (-54));
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale27.getCountry();
        java.lang.String str31 = locale27.getISO3Country();
        java.util.Set<java.lang.Character> charSet32 = locale27.getExtensionKeys();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale27.getDisplayScript(locale33);
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.String str36 = locale33.getVariant();
        java.util.Locale.setDefault(locale33);
        java.lang.String str38 = dateTimeField2.getAsShortText(345601059L, locale33);
        long long41 = dateTimeField2.getDifferenceAsLong(187099140L, (long) 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31536000000L) + "'", long11 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertEquals(locale18.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "998" + "'", str19, "998");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 441797520998L + "'", long22 == 441797520998L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1704153060000L) + "'", long25 == (-1704153060000L));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JP" + "'", str30, "JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JPN" + "'", str31, "JPN");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("francese", (double) (-14460001L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.4460001E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.Locale locale12 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        long long22 = dateTimeField15.roundHalfEven((long) ' ');
        int int24 = dateTimeField15.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale29 = new java.util.Locale("", "Chinese (China)");
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = dateTimeField15.getAsShortText(readablePartial25, (int) (short) -1, locale29);
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = dateTimeField15.getAsShortText((long) (byte) 100, locale33);
        java.lang.String str36 = locale12.getDisplayLanguage(locale33);
        java.lang.String str37 = dateTimeZone1.getName((long) 9, locale33);
        java.util.Set<java.lang.Character> charSet38 = locale33.getExtensionKeys();
        boolean boolean39 = locale33.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals(locale12.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals(locale29.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "china" + "'", str36, "china");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DurationField durationField39 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.dayOfMonth();
        long long44 = chronology18.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.DurationField durationField45 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology18.hourOfHalfday();
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology52, locale53, (java.lang.Integer) 1);
        java.lang.String str56 = locale53.getScript();
        java.lang.String str57 = locale50.getDisplayScript(locale53);
        java.lang.String str58 = locale50.toLanguageTag();
        java.util.Locale.setDefault(category47, locale50);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology61, locale70, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.seconds();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.yearOfEra();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.secondOfMinute();
        org.joda.time.Chronology chronology83 = null;
        java.util.Locale locale84 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology83, locale84, (java.lang.Integer) 1);
        java.lang.String str87 = locale84.getScript();
        java.lang.String str88 = dateTimeField80.getAsText(31L, locale84);
        org.joda.time.ReadablePartial readablePartial89 = null;
        java.util.Locale.Builder builder91 = new java.util.Locale.Builder();
        java.util.Locale locale92 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder93 = builder91.setLocale(locale92);
        java.lang.String str94 = dateTimeField80.getAsText(readablePartial89, 9, locale92);
        java.lang.String str95 = locale50.getDisplayCountry(locale92);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket98 = new org.joda.time.format.DateTimeParserBucket((-31536000001L), chronology18, locale92, (java.lang.Integer) (-59), 2922789);
        java.lang.String str99 = locale92.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 22L + "'", long44 == 22L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale50.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "und" + "'", str58, "und");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese (China)" + "'", str69, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "0" + "'", str88, "0");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "9" + "'", str94, "9");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "CHINESE (CHINA)" + "'", str95, "CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("117");
        java.lang.String str2 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffsetFromLocal(6048000052L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (-58790620800000L));
        boolean boolean17 = dateTimeZone13.isStandardOffset(4200010L);
        boolean boolean18 = dateTimeZone13.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-58790620800000L) + "'", long15 == (-58790620800000L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long7 = dateTimeField2.add((long) (-1), (int) (byte) 1);
        long long10 = dateTimeField2.add(0L, 97L);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.secondOfMinute();
        long long36 = dateTimeField33.add((long) 1, (long) 'x');
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = dateTimeField33.getAsText((int) (byte) 0, locale38);
        java.lang.String str41 = dateTimeField2.getAsText(readablePartial11, 9, locale38);
        java.lang.String str43 = dateTimeField2.getAsShortText(1958L);
        org.joda.time.DurationField durationField44 = dateTimeField2.getDurationField();
        long long46 = dateTimeField2.roundHalfCeiling(4039641120000L);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        boolean boolean49 = locale48.hasExtensions();
        java.lang.String str50 = locale48.getDisplayScript();
        java.lang.String str51 = dateTimeField2.getAsText((-11201), locale48);
        long long53 = dateTimeField2.roundHalfCeiling(86227200377L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31535999999L + "'", long7 == 31535999999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3061065600000L + "'", long10 == 3061065600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 120001L + "'", long36 == 120001L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "USA" + "'", str39, "USA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4039372800000L + "'", long46 == 4039372800000L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-11201" + "'", str51, "-11201");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 94694400000L + "'", long53 == 94694400000L);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.year();
        long long30 = dateTimeField28.roundHalfFloor((-62104060799990L));
        long long32 = dateTimeField28.roundHalfCeiling(10L);
        long long35 = dateTimeField28.set(15604999L, 35);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeField28.add(96776643600900L, 62577450600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 62577450600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62104060800000L) + "'", long30 == (-62104060800000L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-61062665995001L) + "'", long35 == (-61062665995001L));
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.secondOfMinute();
        int int53 = dateTimeField51.getMaximumValue(0L);
        java.lang.String str54 = dateTimeField51.getName();
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        org.joda.time.DurationField durationField60 = dateTimeField58.getDurationField();
        long long63 = dateTimeField58.set(1L, (int) (short) 0);
        java.lang.String str64 = dateTimeField58.toString();
        org.joda.time.ReadablePartial readablePartial65 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int70 = dateTimeField68.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField71 = dateTimeField68.getDurationField();
        int int73 = dateTimeField68.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial74 = null;
        int[] intArray79 = new int[] { (byte) 100, 0, '4', (short) 1 };
        int int80 = dateTimeField68.getMaximumValue(readablePartial74, intArray79);
        int int81 = dateTimeField58.getMaximumValue(readablePartial65, intArray79);
        int int82 = dateTimeField51.getMinimumValue(readablePartial55, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            chronology17.validate(readablePartial30, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 59 + "'", int53 == 59);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "secondOfMinute" + "'", str54, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str64, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 0, 52, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 292278993 + "'", int80 == 292278993);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1439 + "'", int81 == 1439);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        boolean boolean21 = dateTimeField20.isLenient();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = dateTimeField20.getAsText(readablePartial22, (int) 'x', locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology17, locale26, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology32.hours();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder37 = builder35.setLocale(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean41 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayName(locale46);
        java.lang.String str49 = dateTimeField40.getAsText(readablePartial42, (int) 'x', locale46);
        java.lang.String str50 = locale36.getDisplayLanguage(locale46);
        java.lang.String str51 = locale36.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology32, locale36);
        org.joda.time.DurationField durationField53 = chronology32.years();
        org.joda.time.DateTimeField dateTimeField54 = chronology32.dayOfMonth();
        long long58 = chronology32.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology60, locale61, (java.lang.Integer) 1);
        java.lang.Object obj64 = dateTimeParserBucket63.saveState();
        long long65 = dateTimeParserBucket63.computeMillis();
        java.lang.Object obj66 = dateTimeParserBucket63.saveState();
        dateTimeParserBucket63.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket63.getZone();
        org.joda.time.Chronology chronology70 = chronology32.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone73 = chronology32.getZone();
        boolean boolean74 = dateTimeFieldType9.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField75 = chronology32.millisOfSecond();
        int int77 = dateTimeField75.get(3061065601344L);
        long long79 = dateTimeField75.roundFloor(68941L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cinese (Cina)" + "'", str28, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "120" + "'", str29, "120");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "120" + "'", str49, "120");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tedesco" + "'", str50, "tedesco");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 22L + "'", long58 == 22L);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 344 + "'", int77 == 344);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 68941L + "'", long79 == 68941L);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.setLanguage("fr");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.setLanguage("France");
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 1);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        long long25 = dateTimeParserBucket23.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, 1L);
        java.lang.String str30 = dateTimeZone27.getID();
        dateTimeParserBucket23.setZone(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.getID();
        boolean boolean33 = dateTimeZone27.isFixed();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone34, (long) 13);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.ReadablePartial readablePartial44 = null;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField42.getAsText(readablePartial44, (int) 'x', locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology39, locale48, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = dateTimeField55.getAsShortText(1439, locale57);
        java.lang.String str59 = dateTimeZone27.getShortName(292278782L, locale57);
        java.lang.String str60 = locale57.getDisplayLanguage();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = locale61.getDisplayCountry();
        java.util.Locale.setDefault(locale61);
        java.lang.String str65 = locale57.getDisplayVariant(locale61);
        java.util.Locale.Builder builder66 = builder16.setLocale(locale57);
        java.util.Locale.Builder builder68 = builder66.setRegion("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 13L + "'", long36 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cinese (Cina)" + "'", str50, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1439" + "'", str58, "1439");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese" + "'", str60, "Chinese");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "China" + "'", str63, "China");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        int int7 = dateTimeField5.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 1);
        java.lang.String str15 = locale12.getScript();
        java.lang.String str16 = dateTimeField5.getAsShortText(readablePartial8, (int) ' ', locale12);
        java.util.Set<java.lang.String> strSet17 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.hours();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayName(locale53);
        java.lang.String str56 = dateTimeField47.getAsText(readablePartial49, (int) 'x', locale53);
        java.lang.String str57 = locale43.getDisplayLanguage(locale53);
        java.lang.String str58 = locale43.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale43);
        org.joda.time.DurationField durationField60 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField61 = chronology39.dayOfMonth();
        org.joda.time.DurationField durationField62 = chronology39.centuries();
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale63.getCountry();
        java.lang.String str67 = locale63.getISO3Country();
        java.util.Set<java.lang.Character> charSet68 = locale63.getExtensionKeys();
        java.lang.String str70 = locale63.getExtension('u');
        boolean boolean71 = locale63.hasExtensions();
        java.lang.String str72 = locale63.getScript();
        java.util.Locale locale73 = locale63.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((-110715056928000000L), chronology39, locale73, (java.lang.Integer) (-1));
        java.util.Locale.setDefault(category0, locale73);
        java.util.Locale locale77 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "32" + "'", str16, "32");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str32, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str52, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cinese (Cina)" + "'", str55, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "120" + "'", str56, "120");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tedesco" + "'", str57, "tedesco");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JP" + "'", str66, "JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JPN" + "'", str67, "JPN");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-1030436006));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) (short) -1);
        boolean boolean5 = dateTimeZone1.isStandardOffset(540000L);
        long long7 = dateTimeZone1.previousTransition(480000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 480000L + "'", long7 == 480000L);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.hourOfDay();
        java.util.Locale locale27 = new java.util.Locale("cinese (Cina)");
        java.lang.String str28 = locale27.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 18000000, chronology18, locale27, (java.lang.Integer) (-51011448), (int) (byte) 10);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale32.getISO3Country();
        java.lang.String str36 = locale27.getDisplayCountry(locale32);
        java.util.Set<java.lang.String> strSet37 = locale27.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str11, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale27.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cinese (cina)" + "'", str28, "cinese (cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str33, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd" + "'", str34, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CHN" + "'", str35, "CHN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField32 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology26.getZone();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str19, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        long long25 = dateTimeField23.roundCeiling(600393600100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 602294400000L + "'", long25 == 602294400000L);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DurationField durationField21 = dateTimeField20.getRangeDurationField();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getLanguage();
        int int27 = dateTimeField20.getMaximumTextLength(locale23);
        java.lang.String str29 = dateTimeField20.getAsText(360000000L);
        int int30 = dateTimeField20.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja-JP" + "'", str25, "ja-JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str8 = dateTimeZone6.getName(4039377000000L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone6.isLocalDateTimeGap(localDateTime9);
        java.lang.String str11 = dateTimeZone6.getID();
        java.lang.String str12 = dateTimeZone6.getID();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone6.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone6.isLocalDateTimeGap(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.ReadablePartial readablePartial18 = null;
        int int19 = dateTimeField17.getMinimumValue(readablePartial18);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology23, locale32, (java.lang.Integer) (-1));
        java.util.Locale locale38 = dateTimeParserBucket37.getLocale();
        long long39 = dateTimeParserBucket37.computeMillis();
        long long42 = dateTimeParserBucket37.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket37.getZone();
        long long44 = dateTimeParserBucket37.computeMillis();
        java.util.Locale locale45 = dateTimeParserBucket37.getLocale();
        java.util.Locale locale46 = dateTimeParserBucket37.getLocale();
        java.lang.String str47 = dateTimeField17.getAsText(readablePartial20, (int) (byte) 10, locale46);
        org.joda.time.DurationField durationField48 = dateTimeField17.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str9, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str31, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10" + "'", str47, "10");
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyear();
        org.joda.time.DurationField durationField29 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.minuteOfHour();
        boolean boolean32 = dateTimeField30.isLeap((long) (-51011448));
        java.lang.Class<?> wildcardClass33 = dateTimeField30.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("\u65e5\u672c\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        int int32 = dateTimeZone25.getOffsetFromLocal(0L);
        long long34 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology37 = chronology17.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = chronology17.months();
        org.joda.time.DurationField durationField39 = chronology17.halfdays();
        org.joda.time.DurationField durationField40 = chronology17.days();
        java.lang.Class<?> wildcardClass41 = durationField40.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str10, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        java.util.Locale locale3 = new java.util.Locale("ja_JP", "35", "ja");
        java.util.Locale locale7 = new java.util.Locale("20", "halfdayOfDay", "DateTimeField[year]");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_jp_35_ja");
        org.junit.Assert.assertEquals(locale7.toString(), "20_HALFDAYOFDAY_DateTimeField[year]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1910);
        int int3 = dateTimeZone1.getOffsetFromLocal(39000009L);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int11 = dateTimeField9.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField12 = dateTimeField9.getDurationField();
        int int14 = dateTimeField9.getMaximumValue((long) (short) 1);
        long long16 = dateTimeField9.roundHalfEven((long) ' ');
        int int18 = dateTimeField9.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale23 = new java.util.Locale("", "Chinese (China)");
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = dateTimeField9.getAsShortText(readablePartial19, (int) (short) -1, locale23);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = dateTimeField9.getAsShortText((long) (byte) 100, locale27);
        java.util.Locale.setDefault(category5, locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int35 = dateTimeField33.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField36 = dateTimeField33.getDurationField();
        int int38 = dateTimeField33.getMaximumValue((long) (short) 1);
        long long40 = dateTimeField33.roundHalfEven((long) ' ');
        int int42 = dateTimeField33.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale47 = new java.util.Locale("", "Chinese (China)");
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = dateTimeField33.getAsShortText(readablePartial43, (int) (short) -1, locale47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        boolean boolean55 = dateTimeField54.isLenient();
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale58.getDisplayName(locale60);
        java.lang.String str63 = dateTimeField54.getAsText(readablePartial56, (int) 'x', locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology51, locale60, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale68 = java.util.Locale.UK;
        dateTimeParserBucket65.saveField(dateTimeFieldType66, "Chinese (China)", locale68);
        java.lang.String str70 = locale47.getDisplayScript(locale68);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int76 = dateTimeField74.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField77 = dateTimeField74.getDurationField();
        int int79 = dateTimeField74.getMaximumValue((long) (short) 1);
        long long81 = dateTimeField74.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial82 = null;
        java.util.Locale.Builder builder84 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder87 = builder84.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder88 = builder84.clearExtensions();
        java.util.Locale locale89 = builder88.build();
        java.lang.String str90 = dateTimeField74.getAsShortText(readablePartial82, (int) (byte) 100, locale89);
        java.lang.String str91 = locale71.getDisplayScript(locale89);
        java.lang.String str92 = locale68.getDisplayCountry(locale89);
        java.lang.String str93 = locale27.getDisplayLanguage(locale68);
        java.lang.String str94 = locale68.getISO3Country();
        java.util.Set<java.lang.String> strSet95 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str96 = dateTimeZone1.getShortName(2782L, locale68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1910 + "'", int3 == 1910);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals(locale23.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals(locale47.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cinese (Cina)" + "'", str62, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "120" + "'", str63, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 292278993 + "'", int79 == 292278993);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "100" + "'", str90, "100");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "United Kingdom" + "'", str92, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "English" + "'", str93, "English");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GBR" + "'", str94, "GBR");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00:01.910" + "'", str96, "+00:00:01.910");
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder45 = builder43.setLanguage("china");
        java.util.Locale.Builder builder47 = builder45.removeUnicodeLocaleAttribute("Germania");
        java.util.Locale locale48 = builder47.build();
        java.util.Locale.Builder builder50 = builder47.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder53 = builder47.setExtension('#', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "china");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long59 = dateTimeZone56.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int65 = dateTimeField63.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField66 = dateTimeField63.getDurationField();
        int int68 = dateTimeField63.getMaximumValue((long) (short) 1);
        long long70 = dateTimeField63.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial71 = null;
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder73.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder77 = builder73.clearExtensions();
        java.util.Locale locale78 = builder77.build();
        java.lang.String str79 = dateTimeField63.getAsShortText(readablePartial71, (int) (byte) 100, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.lang.String str81 = dateTimeZone56.getShortName((long) 1970, locale78);
        long long84 = dateTimeZone56.adjustOffset(3061065600000L, true);
        long long87 = dateTimeZone56.adjustOffset(127L, false);
        long long90 = dateTimeZone56.convertLocalToUTC(7200999L, true);
        org.joda.time.Chronology chronology91 = chronology19.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField92 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology19.monthOfYear();
        java.lang.Class<?> wildcardClass94 = chronology19.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4200000L + "'", long59 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100" + "'", str79, "100");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:10" + "'", str81, "-01:10");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3061065600000L + "'", long84 == 3061065600000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 127L + "'", long87 == 127L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 11400999L + "'", long90 == 11400999L);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DurationField durationField39 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField41.getType();
        long long44 = dateTimeField41.roundHalfCeiling(356400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.era();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology17.get(readablePeriod24, (long) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        boolean boolean18 = dateTimeParserBucket15.restoreState((java.lang.Object) 4200010L);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        java.util.Locale locale36 = dateTimeParserBucket35.getLocale();
        long long37 = dateTimeParserBucket35.computeMillis();
        long long40 = dateTimeParserBucket35.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket35.saveField(dateTimeFieldType41, 9);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        java.util.Locale locale63 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology61, locale63, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType41.getField(chronology61);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType41.getDurationType();
        java.util.Locale locale71 = new java.util.Locale("cinese (Cina)");
        java.lang.String str72 = locale71.getDisplayCountry();
        java.lang.String str73 = locale71.getScript();
        dateTimeParserBucket15.saveField(dateTimeFieldType41, "zh", locale71);
        java.lang.String str75 = dateTimeFieldType41.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (China)" + "'", str29, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertEquals(locale63.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals(locale71.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "monthOfYear" + "'", str75, "monthOfYear");
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        long long31 = chronology17.add((-180000L), 116572000L, 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1165540000L + "'", long31 == 1165540000L);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField49 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology43.weekyearOfCentury();
        boolean boolean53 = dateTimeFieldType0.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField54 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology43.millisOfDay();
        java.lang.String str57 = dateTimeField55.getAsShortText((-40329279647999950L));
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        boolean boolean66 = dateTimeField65.isLenient();
        org.joda.time.ReadablePartial readablePartial67 = null;
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale69.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = locale69.getDisplayName(locale71);
        java.lang.String str74 = dateTimeField65.getAsText(readablePartial67, (int) 'x', locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology62, locale71, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = chronology77.hours();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology77, locale80, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField83 = chronology77.months();
        org.joda.time.DateTimeField dateTimeField84 = chronology77.clockhourOfHalfday();
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("-1");
        java.lang.String str88 = dateTimeField84.getAsText((int) '#', locale87);
        java.lang.String str89 = dateTimeField55.getAsText(readablePartial58, (-59), locale87);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "50" + "'", str57, "50");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (China)" + "'", str70, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "it" + "'", str72, "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese (Cina)" + "'", str73, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "120" + "'", str74, "120");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "35" + "'", str88, "35");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-59" + "'", str89, "-59");
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        java.lang.Object obj10 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology12, locale13, (java.lang.Integer) 1);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        long long17 = dateTimeParserBucket15.computeMillis();
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        dateTimeParserBucket15.saveField(dateTimeFieldType20, "zh_CN", locale24);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getISO3Country();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale27.getISO3Language();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "hi!", locale27);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getCountry();
        java.lang.String str35 = locale27.getDisplayLanguage(locale33);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfDay]");
        java.util.Locale locale40 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale37.getDisplayName(locale40);
        java.lang.String str43 = locale33.getDisplayLanguage(locale37);
        java.lang.String str45 = locale33.getUnicodeLocaleType("fr");
        java.util.Locale locale47 = new java.util.Locale("1970");
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale33.getDisplayName(locale47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = locale47.getUnicodeLocaleType("german (germany)_JAPAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: german (germany)_JAPAN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "deu" + "'", str31, "deu");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str35, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals(locale40.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japanese" + "'", str43, "Japanese");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals(locale47.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japanese" + "'", str49, "Japanese");
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.secondOfMinute();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        boolean boolean39 = locale38.hasExtensions();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology9, locale38);
        org.joda.time.DateTimeField dateTimeField42 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField50 = dateTimeField47.getDurationField();
        int int52 = dateTimeField47.getMaximumValue((long) (short) 1);
        long long54 = dateTimeField47.roundHalfEven((long) ' ');
        int int56 = dateTimeField47.getMinimumValue((long) 100);
        int int57 = dateTimeField47.getMinimumValue();
        java.util.Locale locale62 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str63 = dateTimeField47.getAsShortText((int) '#', locale62);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int70 = dateTimeField68.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField71 = dateTimeField68.getDurationField();
        int int73 = dateTimeField68.getMaximumValue((long) (short) 1);
        long long75 = dateTimeField68.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder78.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder82 = builder78.clearExtensions();
        java.util.Locale locale83 = builder82.build();
        java.lang.String str84 = dateTimeField68.getAsShortText(readablePartial76, (int) (byte) 100, locale83);
        java.lang.String str85 = locale65.getDisplayScript(locale83);
        java.lang.String str86 = dateTimeField47.getAsText(360000000L, locale83);
        java.lang.String str87 = locale83.toLanguageTag();
        java.util.Set<java.lang.Character> charSet88 = locale83.getExtensionKeys();
        java.lang.String str89 = dateTimeField43.getAsText((long) 53, locale83);
        java.lang.String str90 = locale83.getDisplayCountry();
        java.util.Set<java.lang.String> strSet91 = locale83.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "35" + "'", str63, "35");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "100" + "'", str84, "100");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970" + "'", str86, "1970");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0" + "'", str89, "0");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(30347);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone11.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale16 = new java.util.Locale("cinese (Cina)");
        java.lang.String str17 = dateTimeZone11.getShortName(0L, locale16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone11.isLocalDateTimeGap(localDateTime18);
        java.lang.String str20 = dateTimeZone11.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals(locale16.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology16.days();
        org.joda.time.Chronology chronology23 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28);
        java.lang.Integer int32 = dateTimeParserBucket31.getPivotYear();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long37 = dateTimeZone35.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology38 = chronology33.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        boolean boolean44 = dateTimeField43.isLenient();
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.lang.String str52 = dateTimeField43.getAsText(readablePartial45, (int) 'x', locale49);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology56, locale57, (java.lang.Integer) 1);
        java.lang.Object obj60 = dateTimeParserBucket59.saveState();
        long long61 = dateTimeParserBucket59.computeMillis();
        long long64 = dateTimeParserBucket59.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int69 = dateTimeField67.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial70 = null;
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology73, locale74, (java.lang.Integer) 1);
        java.lang.String str77 = locale74.getScript();
        java.lang.String str78 = dateTimeField67.getAsShortText(readablePartial70, (int) ' ', locale74);
        boolean boolean79 = dateTimeField67.isLenient();
        dateTimeParserBucket59.saveField(dateTimeField67, 10);
        int int82 = dateTimeParserBucket59.getOffset();
        long long85 = dateTimeParserBucket59.computeMillis(false, "98");
        dateTimeParserBucket59.setOffset((java.lang.Integer) 4);
        java.util.Locale locale88 = dateTimeParserBucket59.getLocale();
        long long89 = dateTimeField43.set(84177446400000L, "20", locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) 600000, chronology33, locale88);
        java.util.Locale locale91 = locale88.stripExtensions();
        int int92 = dateTimeField24.getMaximumShortTextLength(locale91);
        java.lang.String str94 = dateTimeField24.getAsShortText((-50400000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3061425600000L + "'", long37 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "120" + "'", str52, "120");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "32" + "'", str78, "32");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-61820064000001L) + "'", long85 == (-61820064000001L));
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-61520947200000L) + "'", long89 == (-61520947200000L));
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "10" + "'", str94, "10");
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.millisOfSecond();
        long long33 = chronology17.add((-2L), 13L, (-4200000));
        org.joda.time.DateTimeField dateTimeField34 = chronology17.clockhourOfDay();
        java.util.Locale locale35 = null;
        int int36 = dateTimeField34.getMaximumShortTextLength(locale35);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-54600002L) + "'", long33 == (-54600002L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology16.add(readablePeriod19, (long) 1969, 366);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(4);
        long long27 = dateTimeZone25.convertUTCToLocal(2000L);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone25.isLocalDateTimeGap(localDateTime28);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1969L + "'", long22 == 1969L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 14402000L + "'", long27 == 14402000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.year();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-59), (int) (byte) 10);
        org.joda.time.Chronology chronology30 = chronology17.withZone(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone29.getOffset(readableInstant31);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-213000000) + "'", int32 == (-213000000));
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial10, (int) (byte) 100, locale17);
        long long20 = dateTimeField2.roundHalfEven((long) '#');
        int int21 = dateTimeField2.getMinimumValue();
        java.lang.String str22 = dateTimeField2.toString();
        int int24 = dateTimeField2.getMaximumValue((-31536025001L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[yearOfEra]" + "'", str22, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.util.Locale locale5 = dateTimeParserBucket4.getLocale();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean11 = dateTimeField10.isLenient();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField10.getAsText(readablePartial12, (int) 'x', locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology7, locale16, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology22.millis();
        org.joda.time.DurationField durationField26 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField28 = dateTimeField27.getRangeDurationField();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        java.util.Locale locale48 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology46, locale48, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField53 = chronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = chronology46.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        long long59 = dateTimeZone56.getMillisKeepLocal(dateTimeZone57, 1L);
        int int61 = dateTimeZone56.getOffsetFromLocal((long) (short) 0);
        boolean boolean62 = dateTimeZone56.isFixed();
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale67 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology69, locale70, (java.lang.Integer) 1);
        java.lang.String str73 = locale70.getScript();
        java.lang.String str74 = locale67.getDisplayScript(locale70);
        java.lang.String str75 = locale67.toLanguageTag();
        java.util.Locale.setDefault(category64, locale67);
        java.lang.String str77 = locale67.getDisplayScript();
        java.lang.String str78 = dateTimeZone56.getShortName(259200000L, locale67);
        java.util.Set<java.lang.String> strSet79 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale locale81 = new java.util.Locale("Chinook jargon");
        java.lang.String str83 = locale81.getExtension('x');
        java.lang.String str84 = locale67.getDisplayScript(locale81);
        java.lang.String str85 = dateTimeField54.getAsShortText(11, locale67);
        int int86 = dateTimeField27.getMaximumShortTextLength(locale67);
        boolean boolean87 = dateTimeParserBucket4.restoreState((java.lang.Object) locale67);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cinese (Cina)" + "'", str18, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "120" + "'", str19, "120");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (China)" + "'", str39, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals(locale48.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale67.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "und" + "'", str75, "und");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals(locale81.toString(), "chinook jargon");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "11" + "'", str85, "11");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DurationField durationField45 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField47 = dateTimeField46.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        dateTimeParserBucket5.saveField(dateTimeField34, (int) (byte) 100);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 81);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 7);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology43, locale44, (java.lang.Integer) 1);
        java.lang.Object obj47 = dateTimeParserBucket46.saveState();
        long long48 = dateTimeParserBucket46.computeMillis();
        dateTimeParserBucket46.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        dateTimeParserBucket46.saveField(dateTimeFieldType51, "zh_CN", locale55);
        dateTimeParserBucket5.saveField(dateTimeFieldType51, 100);
        java.lang.String str59 = dateTimeFieldType51.getName();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "minuteOfDay" + "'", str59, "minuteOfDay");
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        java.lang.String str20 = chronology16.toString();
        long long24 = chronology16.add(97L, 4L, 70);
        org.joda.time.DurationField durationField25 = chronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = chronology16.centuryOfEra();
        long long30 = chronology16.add(3600000L, 967766400009L, (int) (short) 100);
        org.joda.time.DurationField durationField31 = chronology16.weekyears();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology16.add(readablePeriod32, 1861920000000L, 67);
        org.joda.time.DateTimeField dateTimeField36 = chronology16.era();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = chronology16.get(readablePeriod37, 4740000L, (long) 20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 377L + "'", long24 == 377L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 96776643600900L + "'", long30 == 96776643600900L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1861920000000L + "'", long35 == 1861920000000L);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long26 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField33 = dateTimeField30.getDurationField();
        int int35 = dateTimeField30.getMaximumValue((long) (short) 1);
        long long37 = dateTimeField30.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder44 = builder40.clearExtensions();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = dateTimeField30.getAsShortText(readablePartial38, (int) (byte) 100, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = dateTimeZone23.getShortName((long) 1970, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale45);
        java.lang.Object obj50 = dateTimeParserBucket49.saveState();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket49.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket49.getZone();
        java.lang.Integer int53 = dateTimeParserBucket49.getPivotYear();
        java.util.Locale locale54 = dateTimeParserBucket49.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4200000L + "'", long26 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:10" + "'", str48, "-01:10");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone20.getMillisKeepLocal(dateTimeZone21, 1L);
        int int25 = dateTimeZone21.getOffsetFromLocal((long) (byte) 10);
        int int27 = dateTimeZone21.getOffset(100L);
        boolean boolean28 = dateTimeZone21.isFixed();
        int int30 = dateTimeZone21.getOffset(31L);
        org.joda.time.Chronology chronology31 = chronology16.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField32 = chronology16.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology16.getDateTimeMillis(212400000, 2, (-715580), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -715580 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        dateTimeParserBucket29.setOffset((java.lang.Integer) 100);
        dateTimeParserBucket29.setOffset((java.lang.Integer) 81);
        dateTimeParserBucket29.setOffset((java.lang.Integer) 86399);
        dateTimeParserBucket29.setOffset(600000);
        long long40 = dateTimeParserBucket29.computeMillis(false, "TEDESCO");
        dateTimeParserBucket29.setPivotYear((java.lang.Integer) (-706363269));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-600001L) + "'", long40 == (-600001L));
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField42 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology18.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10);
        java.lang.Integer int14 = dateTimeParserBucket13.getPivotYear();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone16.getMillisKeepLocal(dateTimeZone17, 1L);
        java.lang.String str21 = dateTimeZone16.getNameKey((long) '#');
        long long25 = dateTimeZone16.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str27 = dateTimeZone16.getNameKey((-58979923200001L));
        java.lang.String str29 = dateTimeZone16.getShortName((long) (byte) -1);
        java.lang.String str31 = dateTimeZone16.getName((long) 9);
        dateTimeParserBucket13.setZone(dateTimeZone16);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        long long54 = dateTimeField51.getDifferenceAsLong(0L, (long) (short) 0);
        dateTimeParserBucket13.saveField(dateTimeField51, 1);
        long long59 = dateTimeField51.add((long) 12, (int) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology61, locale70, (java.lang.Integer) (-1));
        java.util.Locale locale76 = dateTimeParserBucket75.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.util.Locale locale80 = java.util.Locale.US;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.lang.String str82 = locale79.getCountry();
        java.lang.String str83 = locale79.getISO3Country();
        dateTimeParserBucket75.saveField(dateTimeFieldType77, "CHN", locale79);
        int int85 = dateTimeField51.getMaximumShortTextLength(locale79);
        long long87 = dateTimeField51.roundHalfFloor(0L);
        dateTimeParserBucket4.saveField(dateTimeField51, 35940000);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31536000012L + "'", long59 == 31536000012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "cinese (Cina)" + "'", str69, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "JP" + "'", str82, "JP");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "JPN" + "'", str83, "JPN");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale22, (java.lang.Integer) 4, 1970);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology17.add(readablePeriod28, 1009843200012L, (-4200000));
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1009843200012L + "'", long31 == 1009843200012L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        long long8 = dateTimeZone1.convertUTCToLocal(0L);
        long long10 = dateTimeZone1.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology12, locale13, (java.lang.Integer) 1);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket15.getZone();
        boolean boolean19 = dateTimeZone17.isStandardOffset(3061425600000L);
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone17, (long) (-1));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.lang.String str23 = dateTimeZone17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale.setDefault(locale8);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale8);
        java.util.Locale locale14 = new java.util.Locale("", "Chinese (China)");
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale8.getDisplayLanguage(locale14);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale14.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField22.getMaximumValue(readablePartial25);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = dateTimeField22.getAsShortText(0L, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale28);
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 11400999);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        java.lang.Object obj24 = dateTimeParserBucket15.saveState();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        boolean boolean41 = dateTimeParserBucket15.restoreState((java.lang.Object) (-1));
        java.util.Locale locale42 = dateTimeParserBucket15.getLocale();
        java.util.Locale locale43 = dateTimeParserBucket15.getLocale();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfDay();
        org.joda.time.DurationField durationField46 = chronology44.eras();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology44.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        java.util.Locale locale6 = dateTimeParserBucket4.getLocale();
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology9.set(readablePartial12, (long) (-10));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology50.hours();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder55 = builder53.setLocale(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        boolean boolean59 = dateTimeField58.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = dateTimeField58.getAsText(readablePartial60, (int) 'x', locale64);
        java.lang.String str68 = locale54.getDisplayLanguage(locale64);
        java.lang.String str69 = locale54.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology50, locale54);
        java.util.Locale locale71 = dateTimeParserBucket70.getLocale();
        java.lang.String str72 = dateTimeZone27.getName(0L, locale71);
        java.lang.String str73 = locale71.getLanguage();
        java.util.Set<java.lang.Character> charSet74 = locale71.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((-152845142400000L), chronology18, locale71, (java.lang.Integer) 11, (-109));
        org.joda.time.DateTimeZone dateTimeZone78 = dateTimeParserBucket77.getZone();
        long long79 = dateTimeParserBucket77.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str43, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str63, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "120" + "'", str67, "120");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tedesco" + "'", str68, "tedesco");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "deu" + "'", str69, "deu");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "de" + "'", str73, "de");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-152845142400000L) + "'", long79 == (-152845142400000L));
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("11400999", (double) (-1277984));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1277984.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int21 = dateTimeField19.getLeapAmount((long) 0);
        long long23 = dateTimeField19.roundHalfCeiling((long) (byte) 0);
        long long26 = dateTimeField19.set((-1L), 100);
        int int28 = dateTimeField19.get((long) (byte) 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale33 = new java.util.Locale("", "tedesco");
        java.lang.String str34 = dateTimeField19.getAsText(readablePartial29, (int) (short) 100, locale33);
        java.lang.String str35 = locale13.getDisplayScript(locale33);
        java.util.Locale.Builder builder36 = builder10.setLocale(locale13);
        java.util.Locale locale37 = builder36.build();
        java.lang.String str38 = locale37.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-58979923200001L) + "'", long26 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertEquals(locale33.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ja_JP" + "'", str38, "ja_JP");
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        int int19 = dateTimeField18.getMaximumValue();
        long long22 = dateTimeField18.addWrapField((-99L), (-54));
        boolean boolean24 = dateTimeField18.isLeap((-18933978466970L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1704153600099L) + "'", long22 == (-1704153600099L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField19.getAsText(readablePartial21, (int) 'x', locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology16, locale25, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        boolean boolean34 = dateTimeFieldType9.isSupported(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.months();
        org.joda.time.Chronology chronology36 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.minuteOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "120" + "'", str28, "120");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket15.getZone();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        long long22 = dateTimeZone17.previousTransition(360431990L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360431990L + "'", long22 == 360431990L);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int28 = dateTimeField26.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField29 = dateTimeField26.getDurationField();
        int int31 = dateTimeField26.getMaximumValue((long) (short) 1);
        long long33 = dateTimeField26.roundHalfEven((long) ' ');
        int int35 = dateTimeField26.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale40 = new java.util.Locale("", "Chinese (China)");
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = dateTimeField26.getAsShortText(readablePartial36, (int) (short) -1, locale40);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = dateTimeField26.getAsShortText((long) (byte) 100, locale44);
        java.util.Locale.setDefault(locale44);
        java.lang.String str48 = dateTimeField21.getAsShortText(readablePartial22, 421200000, locale44);
        java.lang.String str49 = dateTimeField21.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals(locale40.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "421200000" + "'", str48, "421200000");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str49, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 1);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        long long25 = dateTimeParserBucket23.computeMillis();
        java.lang.Object obj26 = dateTimeParserBucket23.saveState();
        dateTimeParserBucket23.setOffset((java.lang.Integer) 1);
        java.lang.Object obj29 = dateTimeParserBucket23.saveState();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 1);
        java.lang.Object obj35 = dateTimeParserBucket34.saveState();
        long long36 = dateTimeParserBucket34.computeMillis();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        dateTimeParserBucket34.saveField(dateTimeFieldType39, "zh_CN", locale43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.getISO3Country();
        boolean boolean49 = locale46.hasExtensions();
        java.lang.String str50 = locale46.getISO3Language();
        dateTimeParserBucket23.saveField(dateTimeFieldType39, "hi!", locale46);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket23.getZone();
        long long54 = dateTimeZone52.previousTransition((-58979923200001L));
        org.joda.time.Chronology chronology55 = chronology16.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField56 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology16.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-58979923200001L) + "'", long54 == (-58979923200001L));
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfMonth();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.getISO3Country();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = dateTimeField25.getAsText(20, locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = locale27.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "20" + "'", str31, "20");
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.weekyearOfCentury();
        java.lang.String str28 = chronology17.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long5 = dateTimeZone2.convertLocalToUTC(0L, false);
        long long7 = dateTimeZone2.nextTransition((-31536000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone2.getOffset(readableInstant9);
        long long12 = dateTimeZone2.nextTransition(2678400081L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale24, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfMonth();
        boolean boolean33 = dateTimeField32.isSupported();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("117");
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = dateTimeField32.getAsShortText(1439, locale36);
        java.lang.String str39 = locale36.getDisplayScript();
        java.lang.String str40 = dateTimeZone2.getShortName((long) (-1277984), locale36);
        java.lang.String str41 = locale36.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4200000L + "'", long5 == 4200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-31536000000L) + "'", long7 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4200000) + "'", int10 == (-4200000));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2678400081L + "'", long12 == 2678400081L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1439" + "'", str38, "1439");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:10" + "'", str40, "-01:10");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology31 = chronology17.withUTC();
        org.joda.time.DurationField durationField32 = chronology31.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        long long36 = dateTimeField33.add(63072000000L, (-30754200000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayName(locale53);
        java.lang.String str56 = dateTimeField47.getAsText(readablePartial49, (int) 'x', locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology44, locale53, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekOfWeekyear();
        org.joda.time.DurationField durationField61 = chronology59.hours();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology59, locale62, (java.lang.Integer) 0);
        java.lang.String str65 = locale62.getLanguage();
        java.lang.String str66 = dateTimeField39.getAsText(readablePartial40, (int) (short) 0, locale62);
        boolean boolean67 = locale62.hasExtensions();
        java.lang.String str68 = locale62.getCountry();
        java.lang.String str69 = locale62.getVariant();
        int int70 = dateTimeField33.getMaximumTextLength(locale62);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-110715056928000000L) + "'", long36 == (-110715056928000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese (China)" + "'", str52, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cinese (Cina)" + "'", str55, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "120" + "'", str56, "120");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ja" + "'", str65, "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.dayOfWeek();
        java.lang.String str46 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.monthOfYear();
        org.joda.time.DurationField durationField48 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology18.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = chronology18.get(readablePeriod50, 7L, (-362880000000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfSecond();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27);
        java.lang.Integer int31 = dateTimeParserBucket30.getPivotYear();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale34, (java.lang.Integer) 1);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        long long38 = dateTimeParserBucket36.computeMillis();
        dateTimeParserBucket36.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        dateTimeParserBucket36.saveField(dateTimeFieldType41, "zh_CN", locale45);
        boolean boolean47 = dateTimeParserBucket30.restoreState((java.lang.Object) locale45);
        java.lang.String str48 = locale23.getDisplayVariant(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(967766400010L, chronology17, locale45, (java.lang.Integer) 10);
        long long53 = dateTimeParserBucket50.computeMillis(false, "und");
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket50.getZone();
        dateTimeParserBucket50.setOffset((-292277022));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4199999L + "'", long38 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 967766400010L + "'", long53 == 967766400010L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        java.lang.String str50 = dateTimeFieldType20.getName();
        java.lang.String str51 = dateTimeFieldType20.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "yearOfEra" + "'", str50, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfEra" + "'", str51, "yearOfEra");
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap9);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale19, locale21, locale24, locale26, locale28, locale30, locale32, locale34, locale37 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList40);
        java.lang.String[] strArray46 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayCountry();
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayCountry();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = locale64.getDisplayCountry();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale53, locale55, locale58, locale60, locale62, locale64, locale66, locale68, locale71 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList74, filteringMode77);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList78, filteringMode79);
        java.util.Locale locale81 = java.util.Locale.lookup(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale locale83 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList78);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "China" + "'", str20, "China");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "China" + "'", str27, "China");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "China" + "'", str29, "China");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "China" + "'", str54, "China");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "China" + "'", str59, "China");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "China" + "'", str61, "China");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "China" + "'", str63, "China");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "China" + "'", str65, "China");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode77.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode79.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNull(locale83);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale5 = new java.util.Locale("GBR", "weekOfWeekyear", "");
        java.lang.String str6 = locale0.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "gbr_WEEKOFWEEKYEAR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "WEEKOFWEEKYEAR" + "'", str7, "WEEKOFWEEKYEAR");
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        java.util.Locale locale2 = new java.util.Locale("363", "\u65e5\u672c");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = chronology21.hours();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology21, locale24, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField27 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean31 = dateTimeZone30.isFixed();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getISO3Country();
        boolean boolean36 = locale33.hasExtensions();
        java.lang.String str37 = locale33.getCountry();
        java.lang.String str38 = dateTimeZone30.getName(31536000001L, locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((-3540000L), chronology21, locale33);
        java.lang.String str40 = locale2.getDisplayName(locale33);
        java.util.Locale.setDefault(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u672c");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:10" + "'", str38, "-01:10");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c)" + "'", str40, "\u65e5\u672c)");
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, 1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        boolean boolean34 = dateTimeZone27.equals((java.lang.Object) "it");
        dateTimeParserBucket4.setZone(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.ReadablePartial readablePartial44 = null;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField42.getAsText(readablePartial44, (int) 'x', locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology39, locale48, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.seconds();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology54.getZone();
        long long60 = chronology54.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType36.getField(chronology54);
        dateTimeParserBucket4.saveField(dateTimeField61, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale66.getDisplayName();
        java.lang.String str68 = locale66.getDisplayCountry();
        dateTimeParserBucket4.saveField(dateTimeFieldType64, "+12:00", locale66);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket4.getZone();
        java.lang.String str72 = dateTimeZone70.getShortName((-61725484799990L));
        java.lang.String str74 = dateTimeZone70.getShortName((-61921065599002L));
        java.lang.String str75 = dateTimeZone70.getID();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4199999L + "'", long9 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cinese (Cina)" + "'", str50, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1958L + "'", long60 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese (China)" + "'", str67, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "China" + "'", str68, "China");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.joda.time.DurationField durationField20 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField21.getMinimumValue(readablePartial22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.ReadablePartial readablePartial29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = chronology17.get(readablePartial29, 62577446398561L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        java.util.Locale locale42 = dateTimeParserBucket41.getLocale();
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = locale42.stripExtensions();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder45.setLocale(locale46);
        java.util.Locale locale49 = new java.util.Locale("China");
        java.util.Locale.Builder builder50 = builder47.setLocale(locale49);
        java.util.Locale.Builder builder52 = builder50.addUnicodeLocaleAttribute("French");
        java.util.Locale locale53 = builder52.build();
        java.util.Locale.Builder builder55 = builder52.setLanguageTag("Japan");
        java.util.Locale.Builder builder57 = builder55.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int62 = dateTimeField60.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField63 = dateTimeField60.getDurationField();
        int int65 = dateTimeField60.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial66 = null;
        int[] intArray72 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int73 = dateTimeField60.getMaximumValue(readablePartial66, intArray72);
        java.util.Locale locale77 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology79 = null;
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology79, locale80, (java.lang.Integer) 1);
        java.lang.String str83 = locale80.getScript();
        java.lang.String str84 = locale77.getDisplayScript(locale80);
        java.util.Set<java.lang.String> strSet85 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str86 = dateTimeField60.getAsText((long) (-1), locale80);
        java.util.Locale.Builder builder87 = builder55.setLocale(locale80);
        java.util.Locale.Builder builder88 = builder87.clearExtensions();
        java.util.Locale.Builder builder90 = builder88.setLanguage("china");
        java.util.Locale.Builder builder92 = builder90.removeUnicodeLocaleAttribute("Germania");
        java.util.Locale locale93 = builder92.build();
        java.lang.String str94 = locale44.getDisplayScript(locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket97 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology18, locale44, (java.lang.Integer) 20, (-51011448));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italian (Italy)" + "'", str43, "Italian (Italy)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals(locale49.toString(), "china");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertEquals(locale77.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1969" + "'", str86, "1969");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "china");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekyear();
        long long22 = dateTimeField20.roundFloor((long) 366);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale23.getDisplayCountry(locale24);
        java.lang.String str27 = locale23.getDisplayName();
        int int28 = dateTimeField20.getMaximumShortTextLength(locale23);
        java.lang.String str29 = locale23.getDisplayCountry();
        java.lang.String str30 = locale23.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-259200000L) + "'", long22 == (-259200000L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("japan");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "japan");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(9496);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder17 = builder12.setExtension('a', "JPN");
        java.util.Locale.Builder builder18 = builder12.clearExtensions();
        java.util.Locale.Builder builder19 = builder12.clearExtensions();
        java.util.Locale.Builder builder20 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setVariant("97");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 97 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        long long3 = dateTimeZone1.convertUTCToLocal(3155756400000L);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3155756400097L + "'", long3 == 3155756400097L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.setExtension('a', "und");
        java.util.Locale.Builder builder9 = builder3.setVariant("italiano");
        java.util.Locale locale10 = builder3.build();
        java.lang.String str11 = locale10.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale10.getUnicodeLocaleType("\u7fa9\u5927\u5229");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology16.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology16.add(readablePeriod23, (-40329279734399637L), 0);
        org.joda.time.DateTimeField dateTimeField27 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology16.dayOfYear();
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        boolean boolean37 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField36.getAsText(readablePartial38, (int) 'x', locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology33, locale42, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.seconds();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        boolean boolean51 = dateTimeFieldType30.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfYear();
        long long55 = dateTimeField52.addWrapField((long) 'x', (-51011448));
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int61 = dateTimeField59.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField62 = dateTimeField59.getDurationField();
        int int64 = dateTimeField59.getMaximumValue((long) (short) 1);
        long long66 = dateTimeField59.roundHalfEven((long) ' ');
        int int68 = dateTimeField59.getMinimumValue((long) 100);
        long long71 = dateTimeField59.add(0L, (long) 0);
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        int int73 = dateTimeField59.getMaximumTextLength(locale72);
        org.joda.time.DurationField durationField74 = dateTimeField59.getLeapDurationField();
        java.util.Locale locale75 = java.util.Locale.UK;
        int int76 = dateTimeField59.getMaximumShortTextLength(locale75);
        int int78 = dateTimeField59.get((long) 53);
        org.joda.time.ReadablePartial readablePartial79 = null;
        int int80 = dateTimeField59.getMaximumValue(readablePartial79);
        org.joda.time.ReadablePartial readablePartial81 = null;
        int[] intArray82 = new int[] {};
        int int83 = dateTimeField59.getMinimumValue(readablePartial81, intArray82);
        int int84 = dateTimeField52.getMinimumValue(readablePartial56, intArray82);
        // The following exception was thrown during execution in test generation
        try {
            chronology16.validate(readablePartial29, intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-40329279734399637L) + "'", long26 == (-40329279734399637L));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (China)" + "'", str41, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cinese (Cina)" + "'", str44, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "120" + "'", str45, "120");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 19180800120L + "'", long55 == 19180800120L);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 4200000L + "'", long66 == 4200000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1969 + "'", int78 == 1969);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 292278993 + "'", int80 == 292278993);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(18000000);
        int int3 = dateTimeZone1.getOffsetFromLocal((-7686208L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18000000 + "'", int3 == 18000000);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        java.util.Locale locale2 = new java.util.Locale("366", "-01:10");
        java.lang.String str3 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "366_-01:10");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "366_-01:10" + "'", str3, "366_-01:10");
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) '#');
        long long9 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str11 = dateTimeZone0.getNameKey((long) (short) 1);
        long long13 = dateTimeZone0.nextTransition(4200000L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        int int16 = dateTimeZone0.getOffset(22L);
        java.lang.String str18 = dateTimeZone0.getName(432000000L);
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        int int21 = dateTimeZone0.getOffsetFromLocal(4200013L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4200000L + "'", long13 == 4200000L);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.util.Locale locale2 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e", "+00:00:00.081");
        org.junit.Assert.assertEquals(locale2.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e_+00:00:00.081");
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone8.getMillisKeepLocal(dateTimeZone9, 1L);
        java.lang.String str13 = dateTimeZone8.getNameKey((long) '#');
        long long17 = dateTimeZone8.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str19 = dateTimeZone8.getNameKey((-58979923200001L));
        java.lang.String str21 = dateTimeZone8.getShortName((long) (byte) -1);
        java.lang.String str23 = dateTimeZone8.getName((long) 9);
        dateTimeParserBucket5.setZone(dateTimeZone8);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyearOfCentury();
        long long46 = dateTimeField43.getDifferenceAsLong(0L, (long) (short) 0);
        dateTimeParserBucket5.saveField(dateTimeField43, 1);
        long long51 = dateTimeField43.add((long) 12, (int) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        boolean boolean57 = dateTimeField56.isLenient();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayName();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale60.getDisplayName(locale62);
        java.lang.String str65 = dateTimeField56.getAsText(readablePartial58, (int) 'x', locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology53, locale62, (java.lang.Integer) (-1));
        java.util.Locale locale68 = dateTimeParserBucket67.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale locale72 = java.util.Locale.US;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale71.getCountry();
        java.lang.String str75 = locale71.getISO3Country();
        dateTimeParserBucket67.saveField(dateTimeFieldType69, "CHN", locale71);
        int int77 = dateTimeField43.getMaximumShortTextLength(locale71);
        java.lang.String str78 = locale71.getLanguage();
        boolean boolean79 = locale71.hasExtensions();
        java.util.Set<java.lang.String> strSet80 = locale71.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 31536000012L + "'", long51 == 31536000012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese (China)" + "'", str61, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "it" + "'", str63, "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cinese (Cina)" + "'", str64, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "120" + "'", str65, "120");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JP" + "'", str74, "JP");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JPN" + "'", str75, "JPN");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ja" + "'", str78, "ja");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        int int8 = dateTimeZone1.getOffsetFromLocal(0L);
        long long10 = dateTimeZone1.previousTransition((long) (byte) -1);
        boolean boolean11 = dateTimeZone1.isFixed();
        boolean boolean12 = dateTimeZone1.isFixed();
        boolean boolean14 = dateTimeZone1.isStandardOffset((long) (-51011448));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology17.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int45 = dateTimeField43.getLeapAmount((long) 0);
        int int47 = dateTimeField43.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial48 = null;
        int[] intArray53 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int54 = dateTimeField43.getMaximumValue(readablePartial48, intArray53);
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int60 = dateTimeField58.getLeapAmount((long) 0);
        int int62 = dateTimeField58.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial63 = null;
        int[] intArray68 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int69 = dateTimeField58.getMaximumValue(readablePartial63, intArray68);
        int int70 = dateTimeField43.getMinimumValue(readablePartial55, intArray68);
        int[] intArray72 = dateTimeField38.add(readablePartial39, 8, intArray68, 0);
        org.joda.time.DurationField durationField73 = dateTimeField38.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 292278993 + "'", int69 == 292278993);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 100, 10, 0]");
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder10.setLanguage("USA");
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("ita");
        java.util.Locale.Builder builder22 = builder18.setLanguageTag("GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguageTag("DateTimeField[weekyearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: DateTimeField[weekyearOfCentury] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        int int18 = dateTimeParserBucket15.getOffset();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        long long24 = dateTimeField21.add(18616435200032L, 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 18616435200032L + "'", long24 == 18616435200032L);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        int int8 = dateTimeField6.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField9 = dateTimeField6.getDurationField();
        int int11 = dateTimeField6.getMaximumValue((long) (short) 1);
        long long13 = dateTimeField6.roundHalfEven((long) ' ');
        int int15 = dateTimeField6.getMinimumValue((long) 100);
        int int16 = dateTimeField6.getMinimumValue();
        java.util.Locale locale21 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str22 = dateTimeField6.getAsShortText((int) '#', locale21);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int29 = dateTimeField27.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField30 = dateTimeField27.getDurationField();
        int int32 = dateTimeField27.getMaximumValue((long) (short) 1);
        long long34 = dateTimeField27.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder41 = builder37.clearExtensions();
        java.util.Locale locale42 = builder41.build();
        java.lang.String str43 = dateTimeField27.getAsShortText(readablePartial35, (int) (byte) 100, locale42);
        java.lang.String str44 = locale24.getDisplayScript(locale42);
        java.lang.String str45 = dateTimeField6.getAsText(360000000L, locale42);
        int int46 = dateTimeField2.getMaximumShortTextLength(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField2.getType();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50);
        java.lang.Integer int54 = dateTimeParserBucket53.getPivotYear();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.centuries();
        org.joda.time.DurationField durationField57 = chronology55.minutes();
        boolean boolean58 = dateTimeFieldType47.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField59 = chronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4200000L + "'", long13 == 4200000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "35" + "'", str22, "35");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4200000L + "'", long34 == 4200000L);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.String str6 = locale2.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.seconds();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology25, locale27, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int35 = dateTimeField33.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField36 = dateTimeField33.getDurationField();
        int int38 = dateTimeField33.getMaximumValue((long) (short) 1);
        long long40 = dateTimeField33.roundHalfEven((long) ' ');
        int int42 = dateTimeField33.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale47 = new java.util.Locale("", "Chinese (China)");
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = dateTimeField33.getAsShortText(readablePartial43, (int) (short) -1, locale47);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = dateTimeField33.getAsShortText((long) (byte) 100, locale51);
        java.lang.String str55 = locale51.getExtension('a');
        int int56 = dateTimeField30.getMaximumTextLength(locale51);
        java.lang.String str57 = locale2.getDisplayScript(locale51);
        java.util.Locale locale58 = locale2.stripExtensions();
        java.lang.String str59 = locale2.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JPN" + "'", str6, "JPN");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4200000L + "'", long40 == 4200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals(locale47.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969" + "'", str53, "1969");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setVariant("german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setUnicodeLocaleKeyword("68", "\u706b\u66dc\u65e5");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        dateTimeParserBucket15.setOffset((java.lang.Integer) 2922789);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29);
        java.lang.Integer int33 = dateTimeParserBucket32.getPivotYear();
        long long36 = dateTimeParserBucket32.computeMillis(true, "120");
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        dateTimeParserBucket15.saveField(dateTimeField39, 998);
        org.joda.time.ReadablePartial readablePartial42 = null;
        int[] intArray49 = new int[] { (-292275054), 31, 2, (byte) 100, '4', ' ' };
        int int50 = dateTimeField39.getMinimumValue(readablePartial42, intArray49);
        int int51 = dateTimeField39.getMinimumValue();
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        java.util.Locale locale55 = java.util.Locale.getDefault(category53);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale58, (java.lang.Integer) 1);
        java.lang.Object obj61 = dateTimeParserBucket60.saveState();
        long long62 = dateTimeParserBucket60.computeMillis();
        dateTimeParserBucket60.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        dateTimeParserBucket60.saveField(dateTimeFieldType65, "zh_CN", locale69);
        org.joda.time.Chronology chronology72 = null;
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology72, locale73, (java.lang.Integer) 1);
        java.lang.Object obj76 = dateTimeParserBucket75.saveState();
        long long77 = dateTimeParserBucket75.computeMillis();
        dateTimeParserBucket75.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType80.getField(chronology81);
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        dateTimeParserBucket75.saveField(dateTimeFieldType80, "zh_CN", locale84);
        java.lang.String str86 = locale84.getVariant();
        java.lang.String str87 = locale69.getDisplayVariant(locale84);
        java.util.Locale.setDefault(category53, locale69);
        java.util.Locale locale89 = java.util.Locale.getDefault(category53);
        java.util.Locale locale90 = java.util.Locale.getDefault(category53);
        java.util.Locale locale92 = new java.util.Locale("2");
        java.util.Locale.setDefault(locale92);
        java.util.Locale.setDefault(category53, locale92);
        java.lang.String str95 = dateTimeField39.getAsShortText((int) (byte) -1, locale92);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4200000L + "'", long36 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-292275054, 31, 2, 100, 52, 32]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 4199999L + "'", long62 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 4199999L + "'", long77 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale92.toString(), "2");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1" + "'", str95, "-1");
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology3, locale4, (java.lang.Integer) 1);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        long long8 = dateTimeParserBucket6.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket6.saveState();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        boolean boolean31 = dateTimeParserBucket6.restoreState((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType1.getField(chronology28);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(1958L, chronology28, locale34, (java.lang.Integer) 1439);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone37.getMillisKeepLocal(dateTimeZone38, 1L);
        java.lang.String str41 = dateTimeZone38.getID();
        long long44 = dateTimeZone38.adjustOffset(31L, false);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = dateTimeZone38.getName((long) 0, locale46);
        java.lang.String str49 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology50 = chronology28.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long54 = dateTimeZone51.getMillisKeepLocal(dateTimeZone52, 1L);
        java.lang.String str56 = dateTimeZone51.getNameKey((long) '#');
        long long60 = dateTimeZone51.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str62 = dateTimeZone51.getNameKey((-58979923200001L));
        java.lang.String str64 = dateTimeZone51.getShortName((long) (byte) -1);
        java.lang.String str66 = dateTimeZone51.getName((long) 9);
        java.lang.String str67 = dateTimeZone51.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        long long70 = dateTimeZone38.getMillisKeepLocal(dateTimeZone51, 32L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4199999L + "'", long8 == 4199999L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31L + "'", long44 == 31L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 32L + "'", long70 == 32L);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        boolean boolean30 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology27);
        org.joda.time.DurationField durationField31 = chronology27.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology27.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.weekyearOfCentury();
        java.util.Locale locale37 = new java.util.Locale("hi!", "Chinese");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(97L, chronology27, locale37);
        java.lang.Object obj39 = locale37.clone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_CHINESE");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "hi!_CHINESE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "hi!_CHINESE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "hi!_CHINESE");
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CHN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        double double9 = languageRange1.getWeight();
        double double10 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chn" + "'", str4, "chn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "chn" + "'", str5, "chn");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chn" + "'", str7, "chn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chn" + "'", str8, "chn");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) 0.0f);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        java.lang.String str5 = languageRange2.getRange();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usa" + "'", str5, "usa");
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        int int21 = dateTimeField17.getDifference((long) (short) 1, (long) 10);
        long long24 = dateTimeField17.add(1L, 1L);
        long long26 = dateTimeField17.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField17.getMaximumValue(readablePartial27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale33 = new java.util.Locale("", "tedesco");
        java.lang.String str34 = dateTimeField17.getAsText(readablePartial29, 998, locale33);
        int int35 = dateTimeField14.getMaximumTextLength(locale33);
        java.util.Set<java.lang.String> strSet36 = locale33.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 31536000001L + "'", long24 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-31536000000L) + "'", long26 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale33.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "998" + "'", str34, "998");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology17, locale19, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        java.lang.String str24 = dateTimeField22.getAsShortText((long) 'u');
        long long26 = dateTimeField22.roundHalfFloor((long) 10);
        boolean boolean27 = dateTimeField22.isSupported();
        java.lang.String str29 = dateTimeField22.getAsText((-61788529140363L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1420" + "'", str29, "1420");
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 1);
        java.lang.String str12 = locale9.getScript();
        java.lang.String str13 = dateTimeField2.getAsShortText(readablePartial5, (int) ' ', locale9);
        java.lang.Object obj14 = locale9.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32" + "'", str13, "32");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "de");
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        int int19 = dateTimeField17.getMinimumValue((-31536000000L));
        long long21 = dateTimeField17.roundHalfEven(2727835488000009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2727835228800000L + "'", long21 == 2727835228800000L);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        long long26 = dateTimeField24.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField24.getMaximumValue(readablePartial27);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = dateTimeField24.getAsShortText(0L, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology19, locale30);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology19, locale37);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.era();
        org.joda.time.DateTimeField dateTimeField41 = chronology19.year();
        long long45 = chronology19.add((-34712582400000L), 4039374720000L, 24);
        org.joda.time.DateTimeField dateTimeField46 = chronology19.clockhourOfDay();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder49 = builder47.setLocale(locale48);
        java.util.Locale locale51 = new java.util.Locale("China");
        java.util.Locale.Builder builder52 = builder49.setLocale(locale51);
        java.util.Locale.Builder builder54 = builder52.addUnicodeLocaleAttribute("French");
        java.util.Locale locale55 = builder54.build();
        java.util.Locale.Builder builder57 = builder54.setLanguageTag("Japan");
        java.util.Locale.Builder builder59 = builder57.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        int int64 = dateTimeField62.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField65 = dateTimeField62.getDurationField();
        int int67 = dateTimeField62.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial68 = null;
        int[] intArray74 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int75 = dateTimeField62.getMaximumValue(readablePartial68, intArray74);
        java.util.Locale locale79 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology81, locale82, (java.lang.Integer) 1);
        java.lang.String str85 = locale82.getScript();
        java.lang.String str86 = locale79.getDisplayScript(locale82);
        java.util.Set<java.lang.String> strSet87 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str88 = dateTimeField62.getAsText((long) (-1), locale82);
        java.util.Locale.Builder builder89 = builder57.setLocale(locale82);
        java.util.Locale locale90 = locale82.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket(79L, chronology19, locale90);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 62232410880000L + "'", long45 == 62232410880000L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals(locale51.toString(), "china");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertEquals(locale79.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1969" + "'", str88, "1969");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("china");
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekOfWeekyear();
        org.joda.time.DurationField durationField44 = chronology42.hours();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology42, locale45, (java.lang.Integer) 0);
        java.lang.String str48 = locale45.getLanguage();
        java.lang.String str49 = dateTimeField22.getAsText(readablePartial23, (int) (short) 0, locale45);
        java.util.Set<java.lang.Character> charSet50 = locale45.getExtensionKeys();
        java.util.Locale locale51 = locale45.stripExtensions();
        java.util.Locale.Builder builder52 = builder19.setLocale(locale45);
        java.util.Locale.Builder builder54 = builder52.setLanguageTag("fr-FR");
        java.util.Locale.Builder builder55 = builder54.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ja" + "'", str48, "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology17.millis();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale39 = java.util.Locale.UK;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "Chinese (China)", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology17, locale39, (java.lang.Integer) 12, 100);
        java.lang.String str44 = locale39.getDisplayVariant();
        boolean boolean45 = locale39.hasExtensions();
        java.lang.String str46 = locale39.getCountry();
        java.lang.String str47 = locale39.getLanguage();
        java.lang.String str48 = locale39.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GB" + "'", str46, "GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        java.lang.String str21 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType22.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.minuteOfDay();
        java.lang.String str44 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        long long52 = dateTimeZone47.adjustOffset(1L, true);
        int int54 = dateTimeZone47.getOffsetFromLocal(0L);
        long long56 = dateTimeZone47.previousTransition((long) (byte) -1);
        long long58 = dateTimeZone47.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology59 = chronology39.withZone(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology39.add(readablePeriod60, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType0.getField(chronology39);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType0.getDurationType();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        boolean boolean21 = dateTimeField20.isLenient();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = dateTimeField20.getAsText(readablePartial22, (int) 'x', locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology17, locale26, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.seconds();
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology32, locale34, (java.lang.Integer) 1970);
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.lang.String str38 = locale34.getLanguage();
        java.lang.String str39 = locale34.getISO3Country();
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet41 = locale34.getExtensionKeys();
        java.util.Locale.Builder builder42 = builder14.setLocale(locale34);
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale.Builder builder44 = builder42.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder44.setUnicodeLocaleKeyword("year (GIAPPONE)", "Cina");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: year (GIAPPONE) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cinese (Cina)" + "'", str28, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "120" + "'", str29, "120");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr" + "'", str38, "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        int int38 = dateTimeField25.getMaximumShortTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = locale39.getLanguage();
        int int42 = dateTimeField25.getMaximumTextLength(locale39);
        long long44 = dateTimeField25.roundHalfCeiling((-1896400200L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1896400200L) + "'", long44 == (-1896400200L));
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        int int11 = dateTimeField2.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale16 = new java.util.Locale("", "Chinese (China)");
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial12, (int) (short) -1, locale16);
        long long21 = dateTimeField2.addWrapField(100800000L, 86399999);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField2.add((-1765773605497L), (-706363269));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -706361355 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2726520621364800000L + "'", long21 == 2726520621364800000L);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-3459475));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        boolean boolean21 = dateTimeFieldType1.isSupported(chronology18);
        java.lang.String str22 = dateTimeFieldType1.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType23.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.minuteOfDay();
        java.lang.String str45 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone47.getMillisKeepLocal(dateTimeZone48, 1L);
        long long53 = dateTimeZone48.adjustOffset(1L, true);
        int int55 = dateTimeZone48.getOffsetFromLocal(0L);
        long long57 = dateTimeZone48.previousTransition((long) (byte) -1);
        long long59 = dateTimeZone48.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology60 = chronology40.withZone(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        long long64 = chronology40.add(readablePeriod61, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType1.getField(chronology40);
        java.util.Locale locale68 = new java.util.Locale("year", "Giappone");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((-259200000L), chronology40, locale68, (java.lang.Integer) 1910);
        java.lang.String str71 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField72 = chronology40.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "secondOfDay" + "'", str22, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals(locale68.toString(), "year_GIAPPONE");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[UTC]" + "'", str71, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray12 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int13 = dateTimeField2.getMaximumValue(readablePartial7, intArray12);
        int int14 = dateTimeField2.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField2.getType();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19);
        java.lang.String str23 = dateTimeField2.getAsShortText(360000000, locale19);
        long long26 = dateTimeField2.addWrapField((long) (short) 100, 12);
        int int28 = dateTimeField2.get((-62104060799990L));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.seconds();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfHalfday();
        int int50 = dateTimeField49.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = dateTimeField49.getAsShortText(readablePartial51, 1, locale53);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale.setDefault(locale55);
        java.lang.String str58 = locale53.getDisplayName(locale55);
        java.lang.String str59 = dateTimeField2.getAsShortText(81, locale55);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Locale locale63 = new java.util.Locale("China");
        java.lang.String str64 = locale61.getDisplayLanguage(locale63);
        java.lang.String str65 = dateTimeField2.getAsShortText(850395L, locale61);
        java.lang.String str66 = dateTimeField2.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "360000000" + "'", str23, "360000000");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 378691200100L + "'", long26 == 378691200100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (China)" + "'", str39, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zho" + "'", str56, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)" + "'", str58, "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "81" + "'", str59, "81");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals(locale63.toString(), "china");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Italian" + "'", str64, "Italian");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970" + "'", str65, "1970");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "yearOfEra" + "'", str66, "yearOfEra");
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology16.weekyears();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology16.add(readablePeriod22, 1344L, 4);
        org.joda.time.DurationField durationField26 = chronology16.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology16.getDateTimeMillis((-9L), 28799901, 349200000, 20, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28799901 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str9, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1344L + "'", long25 == 1344L);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        java.lang.String str10 = dateTimeZone1.getShortName(378691200100L);
        java.lang.String str12 = dateTimeZone1.getNameKey(3155755800000L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        long long30 = dateTimeParserBucket28.computeMillis();
        long long33 = dateTimeParserBucket28.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket28.getZone();
        long long37 = dateTimeZone34.adjustOffset((long) (byte) 100, false);
        long long39 = dateTimeZone1.getMillisKeepLocal(dateTimeZone34, (long) 9);
        java.lang.String str41 = dateTimeZone34.getNameKey(6246446110859637L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str22, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology16.getZone();
        org.joda.time.DurationField durationField20 = chronology16.weekyears();
        org.joda.time.DurationField durationField21 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.clockhourOfHalfday();
        int int23 = dateTimeField22.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str9, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfMinute();
        long long25 = dateTimeField22.getDifferenceAsLong((-24074356896762886L), 292275053L);
        int int26 = dateTimeField22.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str9, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-24074357189037L) + "'", long25 == (-24074357189037L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int7 = dateTimeZone0.getOffsetFromLocal(4200000L);
        boolean boolean8 = dateTimeZone0.isFixed();
        long long11 = dateTimeZone0.adjustOffset(2727835228800000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2727835228800000L + "'", long11 == 2727835228800000L);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.millisOfDay();
        boolean boolean32 = dateTimeField31.isSupported();
        long long35 = dateTimeField31.add((long) 998, 45789148800100L);
        org.joda.time.DurationField durationField36 = dateTimeField31.getLeapDurationField();
        boolean boolean37 = dateTimeField31.isSupported();
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.yearOfEra();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder64 = builder62.setLocale(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder66 = builder62.setLocale(locale65);
        java.lang.String str67 = dateTimeField59.getAsText(readablePartial60, (int) (byte) 100, locale65);
        java.util.Locale.setDefault(category39, locale65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("ISOChronology[UTC]");
        java.lang.String str71 = locale70.getScript();
        java.lang.String str72 = locale65.getDisplayLanguage(locale70);
        java.util.Locale locale73 = locale65.stripExtensions();
        java.lang.String str74 = dateTimeField31.getAsShortText((-265714), locale65);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str19, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 45789148801098L + "'", long35 == 45789148801098L);
        org.junit.Assert.assertNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str49, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "German" + "'", str72, "German");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-265714" + "'", str74, "-265714");
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = dateTimeField19.getAsShortText((long) 999, locale22);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getVariant();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale31 = new java.util.Locale("", "tedesco");
        java.lang.String str32 = locale26.getDisplayScript(locale31);
        java.lang.String str33 = locale26.getDisplayCountry();
        java.lang.String str34 = dateTimeField19.getAsShortText((long) 366, locale26);
        org.joda.time.ReadablePartial readablePartial35 = null;
        int int36 = dateTimeField19.getMinimumValue(readablePartial35);
        int int37 = dateTimeField19.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str9, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u897f\u5143" + "'", str24, "\u897f\u5143");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale31.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Italia" + "'", str33, "Italia");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dopo Cristo" + "'", str34, "dopo Cristo");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        long long24 = chronology16.add((-18934093679002L), (long) 35, 344);
        org.joda.time.DateTimeField dateTimeField25 = chronology16.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-18934093666962L) + "'", long24 == (-18934093666962L));
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        long long54 = dateTimeParserBucket53.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 4200010L + "'", long54 == 4200010L);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder6.setLocale(locale7);
        java.util.Locale locale10 = new java.util.Locale("China");
        java.util.Locale.Builder builder11 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("French");
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.setLanguageTag("Japan");
        java.util.Locale.Builder builder18 = builder16.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int23 = dateTimeField21.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField24 = dateTimeField21.getDurationField();
        int int26 = dateTimeField21.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int[] intArray33 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int34 = dateTimeField21.getMaximumValue(readablePartial27, intArray33);
        java.util.Locale locale38 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology40, locale41, (java.lang.Integer) 1);
        java.lang.String str44 = locale41.getScript();
        java.lang.String str45 = locale38.getDisplayScript(locale41);
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str47 = dateTimeField21.getAsText((long) (-1), locale41);
        java.util.Locale.Builder builder48 = builder16.setLocale(locale41);
        java.util.Locale locale49 = locale41.stripExtensions();
        java.util.Locale.Builder builder50 = builder4.setLocale(locale41);
        java.util.Locale.Builder builder51 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals(locale10.toString(), "china");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertEquals(locale38.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1969" + "'", str47, "1969");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getExtension('a');
        java.lang.String str6 = locale0.getDisplayCountry(locale1);
        java.lang.String str7 = locale0.getScript();
        java.lang.String str8 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja-JP" + "'", str8, "ja-JP");
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology16.weekyears();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology16.add(readablePeriod22, 1344L, 4);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.millisOfSecond();
        org.joda.time.Chronology chronology28 = chronology16.withUTC();
        org.joda.time.DurationField durationField29 = chronology16.months();
        org.joda.time.Chronology chronology30 = chronology16.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1344L + "'", long25 == 1344L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology24.getDateTimeMillis((-110682600940800000L), (-15), 374, 99, 374);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -15 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        int int18 = dateTimeParserBucket15.getOffset();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        boolean boolean22 = dateTimeField20.isLeap((-30754200000L));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.minuteOfDay();
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale47.toLanguageTag();
        java.lang.String str50 = locale47.getScript();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54);
        java.lang.Integer int58 = dateTimeParserBucket57.getPivotYear();
        org.joda.time.Chronology chronology59 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long63 = dateTimeZone61.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology64 = chronology59.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = chronology59.centuryOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        boolean boolean71 = dateTimeField70.isLenient();
        org.joda.time.ReadablePartial readablePartial72 = null;
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str75 = locale74.getDisplayName();
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = locale74.getDisplayName(locale76);
        java.lang.String str79 = dateTimeField70.getAsText(readablePartial72, (int) 'x', locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology67, locale76, (java.lang.Integer) (-1));
        java.util.Locale locale82 = java.util.Locale.JAPAN;
        java.util.Locale locale83 = java.util.Locale.US;
        java.lang.String str84 = locale82.getDisplayVariant(locale83);
        java.util.Set<java.lang.String> strSet85 = locale83.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet86 = locale83.getExtensionKeys();
        java.lang.String str87 = locale76.getDisplayCountry(locale83);
        java.lang.String str88 = locale76.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology59, locale76, (java.lang.Integer) 1969);
        java.lang.String str91 = locale47.getDisplayScript(locale76);
        java.lang.String str92 = dateTimeField44.getAsShortText(31888800000L, locale76);
        java.lang.String str93 = locale76.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = dateTimeField20.set(60059807518300416L, "yearofera", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearofera\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja-JP" + "'", str49, "ja-JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3061425600000L + "'", long63 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "cinese (Cina)" + "'", str75, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "it" + "'", str77, "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "cinese (Cina)" + "'", str78, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "120" + "'", str79, "120");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Italy" + "'", str87, "Italy");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "120" + "'", str92, "120");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "italiano" + "'", str93, "italiano");
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "UTC");
        java.util.Locale.Builder builder12 = builder7.setLanguage("ja");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder16 = builder13.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder13.removeUnicodeLocaleAttribute("DateTimeField[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[yearOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        org.joda.time.Chronology chronology39 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        long long43 = dateTimeZone40.getMillisKeepLocal(dateTimeZone41, 1L);
        java.lang.String str44 = dateTimeZone41.getID();
        long long47 = dateTimeZone41.adjustOffset(31L, false);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.lang.String str52 = dateTimeZone41.getShortName((long) (byte) -1, locale49);
        java.lang.String str54 = dateTimeZone41.getNameKey(9223371985594200012L);
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField56 = chronology55.months();
        org.joda.time.DurationField durationField57 = chronology55.minutes();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 31L + "'", long47 == 31L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Italia" + "'", str51, "Italia");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = chronology21.hours();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology21, locale24, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField27 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType2.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.secondOfMinute();
        boolean boolean33 = dateTimeFieldType0.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField34 = chronology21.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekOfWeekyear" + "'", str1, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        java.util.Locale locale21 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology19, locale21, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.year();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32);
        java.lang.Integer int36 = dateTimeParserBucket35.getPivotYear();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology38, locale39, (java.lang.Integer) 1);
        java.lang.Object obj42 = dateTimeParserBucket41.saveState();
        long long43 = dateTimeParserBucket41.computeMillis();
        dateTimeParserBucket41.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        dateTimeParserBucket41.saveField(dateTimeFieldType46, "zh_CN", locale50);
        boolean boolean52 = dateTimeParserBucket35.restoreState((java.lang.Object) locale50);
        java.lang.String str53 = locale28.getDisplayVariant(locale50);
        java.lang.String str54 = dateTimeField25.getAsShortText(readablePartial26, (-1), locale50);
        java.util.Locale locale57 = new java.util.Locale("", "tedesco");
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder60 = builder58.setLocale(locale59);
        java.lang.String str61 = locale57.getDisplayName(locale59);
        int int62 = dateTimeField25.getMaximumShortTextLength(locale57);
        java.util.Locale.setDefault(locale57);
        java.lang.String str64 = locale57.getScript();
        java.util.Locale locale66 = new java.util.Locale("yearOfEra");
        java.lang.String str67 = locale66.getScript();
        java.util.Set<java.lang.Character> charSet68 = locale66.getExtensionKeys();
        java.lang.String str69 = locale57.getDisplayScript(locale66);
        java.lang.String str70 = locale1.getDisplayName(locale66);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals(locale21.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1" + "'", str54, "-1");
        org.junit.Assert.assertEquals(locale57.toString(), "_TEDESCO");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "TEDESCO" + "'", str61, "TEDESCO");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale66.toString(), "yearofera");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        int int7 = dateTimeZone1.getOffset((-58979923200000L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        long long14 = dateTimeZone1.nextTransition((long) 59);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 59L + "'", long14 == 59L);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getISO3Country();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "CHN", locale19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.millis();
        boolean boolean43 = dateTimeFieldType17.isSupported(chronology41);
        org.joda.time.Chronology chronology44 = chronology41.withUTC();
        org.joda.time.DurationField durationField45 = chronology41.weeks();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        boolean boolean51 = dateTimeField50.isLenient();
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale54.getDisplayName(locale56);
        java.lang.String str59 = dateTimeField50.getAsText(readablePartial52, (int) 'x', locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology47, locale56, (java.lang.Integer) (-1));
        java.util.Locale locale62 = dateTimeParserBucket61.getLocale();
        long long63 = dateTimeParserBucket61.computeMillis();
        long long66 = dateTimeParserBucket61.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket61.getZone();
        long long68 = dateTimeParserBucket61.computeMillis();
        java.util.Locale locale69 = dateTimeParserBucket61.getLocale();
        java.util.Locale locale70 = dateTimeParserBucket61.getLocale();
        java.lang.Object obj71 = dateTimeParserBucket61.saveState();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        long long75 = dateTimeZone72.getMillisKeepLocal(dateTimeZone73, 1L);
        long long78 = dateTimeZone73.adjustOffset(1L, true);
        int int80 = dateTimeZone73.getOffsetFromLocal(0L);
        long long82 = dateTimeZone73.previousTransition((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime83 = null;
        boolean boolean84 = dateTimeZone73.isLocalDateTimeGap(localDateTime83);
        boolean boolean86 = dateTimeZone73.isStandardOffset((long) (short) 0);
        long long90 = dateTimeZone73.convertLocalToUTC((long) 2, true, (long) 100);
        boolean boolean92 = dateTimeZone73.isStandardOffset(1L);
        org.joda.time.LocalDateTime localDateTime93 = null;
        boolean boolean94 = dateTimeZone73.isLocalDateTimeGap(localDateTime93);
        dateTimeParserBucket61.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology96 = chronology41.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField97 = chronology96.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JP" + "'", str22, "JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JPN" + "'", str23, "JPN");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str55, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese (Cina)" + "'", str58, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "120" + "'", str59, "120");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 2L + "'", long90 == 2L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(durationField97);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        boolean boolean22 = dateTimeField21.isLenient();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getDisplayName();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = dateTimeField21.getAsText(readablePartial23, (int) 'x', locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology18, locale27, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = chronology33.hours();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology33, locale36, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.hourOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        java.util.Locale locale60 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology58, locale60, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField64 = chronology58.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology58.yearOfEra();
        boolean boolean66 = dateTimeField65.isSupported();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        boolean boolean73 = dateTimeField72.isLenient();
        org.joda.time.ReadablePartial readablePartial74 = null;
        java.util.Locale locale76 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str77 = locale76.getDisplayName();
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.lang.String str79 = locale78.getLanguage();
        java.lang.String str80 = locale76.getDisplayName(locale78);
        java.lang.String str81 = dateTimeField72.getAsText(readablePartial74, (int) 'x', locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology69, locale78, (java.lang.Integer) (-1));
        java.util.Locale locale84 = dateTimeParserBucket83.getLocale();
        long long85 = dateTimeParserBucket83.computeMillis();
        long long88 = dateTimeParserBucket83.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone89 = dateTimeParserBucket83.getZone();
        long long90 = dateTimeParserBucket83.computeMillis();
        java.util.Locale locale91 = dateTimeParserBucket83.getLocale();
        java.util.Locale locale92 = dateTimeParserBucket83.getLocale();
        java.lang.String str93 = locale92.getDisplayCountry();
        java.lang.String str94 = dateTimeField65.getAsText(4039737292748L, locale92);
        java.lang.String str95 = dateTimeField39.getAsShortText((long) 1969, locale92);
        java.lang.String str96 = locale10.getDisplayCountry(locale92);
        java.util.Locale.setDefault(locale92);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str26, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "120" + "'", str30, "120");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str51, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals(locale60.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str77, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "it" + "'", str79, "it");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "cinese (Cina)" + "'", str80, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "120" + "'", str81, "120");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10L + "'", long85 == 10L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10L + "'", long90 == 10L);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str93, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2098" + "'", str94, "2098");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0" + "'", str95, "0");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Italia" + "'", str96, "Italia");
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        java.lang.String str29 = dateTimeZone24.getNameKey((long) '#');
        long long33 = dateTimeZone24.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str35 = dateTimeZone24.getNameKey((-58979923200001L));
        java.lang.String str37 = dateTimeZone24.getShortName((long) (byte) -1);
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType0.getField(chronology18);
        java.lang.String str41 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "centuryOfEra" + "'", str41, "centuryOfEra");
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zh_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology16.months();
        java.lang.Class<?> wildcardClass23 = durationField22.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("weekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'weekyear' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        java.util.Locale locale12 = builder7.build();
        java.util.Locale.Builder builder13 = builder7.clear();
        java.util.Locale.Builder builder14 = builder7.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        boolean boolean23 = dateTimeField22.isLenient();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = dateTimeField22.getAsText(readablePartial24, (int) 'x', locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology19, locale28, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        boolean boolean37 = dateTimeFieldType17.isSupported(chronology34);
        java.lang.String str38 = dateTimeFieldType17.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.DateTimeField dateTimeField60 = chronology56.minuteOfDay();
        java.lang.String str61 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology56.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        long long66 = dateTimeZone63.getMillisKeepLocal(dateTimeZone64, 1L);
        long long69 = dateTimeZone64.adjustOffset(1L, true);
        int int71 = dateTimeZone64.getOffsetFromLocal(0L);
        long long73 = dateTimeZone64.previousTransition((long) (byte) -1);
        long long75 = dateTimeZone64.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology76 = chronology56.withZone(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        long long80 = chronology56.add(readablePeriod77, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType17.getField(chronology56);
        java.util.Locale locale84 = new java.util.Locale("year", "Giappone");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((-259200000L), chronology56, locale84, (java.lang.Integer) 1910);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder87 = builder15.setLocale(locale84);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: GIAPPONE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "japan");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "120" + "'", str31, "120");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondOfDay" + "'", str38, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertEquals(locale84.toString(), "year_GIAPPONE");
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsShortText((long) 999, locale29);
        boolean boolean31 = dateTimeField27.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology37, locale42, (java.lang.Integer) 999, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField50 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology37.weekyearOfCentury();
        org.joda.time.DurationField durationField52 = dateTimeField51.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Country();
        java.lang.String str4 = locale0.getLanguage();
        java.util.Locale locale8 = new java.util.Locale("Japan", "ita", "JPN");
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = locale10.getDisplayVariant();
        java.lang.String str16 = locale10.getVariant();
        java.lang.String str17 = locale10.getVariant();
        java.lang.String str18 = locale8.getDisplayCountry(locale10);
        java.lang.String str19 = locale10.getDisplayLanguage();
        java.lang.String str20 = locale10.getDisplayVariant();
        java.lang.String str21 = locale10.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "cinese (Cina)" + "'", str1, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Cina" + "'", str2, "Cina");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertEquals(locale8.toString(), "japan_ITA_JPN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ITA" + "'", str18, "ITA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese" + "'", str19, "cinese");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese" + "'", str21, "cinese");
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone8.getMillisKeepLocal(dateTimeZone9, 1L);
        java.lang.String str13 = dateTimeZone8.getNameKey((long) '#');
        long long17 = dateTimeZone8.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str19 = dateTimeZone8.getNameKey((-58979923200001L));
        java.lang.String str21 = dateTimeZone8.getShortName((long) (byte) -1);
        java.lang.String str23 = dateTimeZone8.getName((long) 9);
        dateTimeParserBucket5.setZone(dateTimeZone8);
        boolean boolean26 = dateTimeZone8.isStandardOffset((-30231583200000L));
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone8.isLocalDateTimeGap(localDateTime27);
        java.lang.String str30 = dateTimeZone8.getShortName(2782L);
        java.util.TimeZone timeZone31 = dateTimeZone8.toTimeZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket22.getZone();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        boolean boolean29 = dateTimeParserBucket22.restoreState((java.lang.Object) nameProvider26);
        java.lang.Integer int30 = dateTimeParserBucket22.getOffsetInteger();
        long long32 = dateTimeParserBucket22.computeMillis(true);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.millisOfDay();
        org.joda.time.DurationField durationField25 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.monthOfYear();
        java.lang.String str27 = dateTimeField26.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "monthOfYear" + "'", str27, "monthOfYear");
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale22, (java.lang.Integer) 4, 1970);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology17.add(readablePeriod28, 1009843200012L, (-4200000));
        org.joda.time.Chronology chronology32 = chronology17.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology17.getDateTimeMillis(421200000, 101254046, 25800000, 20, 97, 1849, 865746);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1009843200012L + "'", long31 == 1009843200012L);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.Locale locale12 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        long long22 = dateTimeField15.roundHalfEven((long) ' ');
        int int24 = dateTimeField15.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale29 = new java.util.Locale("", "Chinese (China)");
        boolean boolean30 = locale29.hasExtensions();
        java.lang.String str31 = dateTimeField15.getAsShortText(readablePartial25, (int) (short) -1, locale29);
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = dateTimeField15.getAsShortText((long) (byte) 100, locale33);
        java.lang.String str36 = locale12.getDisplayLanguage(locale33);
        java.lang.String str37 = dateTimeZone1.getName((long) 9, locale33);
        long long40 = dateTimeZone1.convertLocalToUTC(15604999L, true);
        int int42 = dateTimeZone1.getStandardOffset(30927005051L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals(locale12.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals(locale29.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "china" + "'", str36, "china");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 15604999L + "'", long40 == 15604999L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        dateTimeParserBucket24.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone29.getMillisKeepLocal(dateTimeZone30, 1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        java.lang.String str35 = dateTimeZone29.toString();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        long long42 = dateTimeField39.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField39.getType();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        boolean boolean49 = dateTimeField48.isLenient();
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.lang.String str57 = dateTimeField48.getAsText(readablePartial50, (int) 'x', locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology45, locale54, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType43.getField(chronology60);
        dateTimeParserBucket24.saveField(dateTimeFieldType43, 421200000);
        java.lang.String str64 = dateTimeFieldType43.toString();
        java.lang.String str65 = dateTimeFieldType43.getName();
        java.lang.String str66 = dateTimeFieldType43.getName();
        dateTimeParserBucket5.saveField(dateTimeFieldType43, (-1030436006));
        org.joda.time.Chronology chronology69 = dateTimeParserBucket5.getChronology();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (China)" + "'", str53, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "cinese (Cina)" + "'", str56, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "120" + "'", str57, "120");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "minuteOfDay" + "'", str64, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "minuteOfDay" + "'", str65, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "minuteOfDay" + "'", str66, "minuteOfDay");
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u65e5\u672c)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=363(??)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology37, locale42, (java.lang.Integer) 999, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField50 = chronology37.weekyearOfCentury();
        long long52 = dateTimeField50.roundCeiling((long) 2922789);
        java.lang.String str54 = dateTimeField50.getAsShortText((-1765773605497L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31536000000L + "'", long52 == 31536000000L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "14" + "'", str54, "14");
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.minuteOfDay();
        long long25 = dateTimeField22.set(43200009L, "20");
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology44.millis();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.year();
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        int int57 = dateTimeField55.getLeapAmount((long) 0);
        int int59 = dateTimeField55.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial60 = null;
        int[] intArray65 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int66 = dateTimeField55.getMaximumValue(readablePartial60, intArray65);
        org.joda.time.ReadablePartial readablePartial67 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        int int72 = dateTimeField70.getLeapAmount((long) 0);
        int int74 = dateTimeField70.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial75 = null;
        int[] intArray80 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int81 = dateTimeField70.getMaximumValue(readablePartial75, intArray80);
        int int82 = dateTimeField55.getMinimumValue(readablePartial67, intArray80);
        int int83 = dateTimeField51.getMaximumValue(readablePartial52, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField22.set(readablePartial26, (-16383412), intArray80, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1200009L + "'", long25 == 1200009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292278993 + "'", int66 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 292278993 + "'", int83 == 292278993);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        long long5 = dateTimeField2.roundFloor((long) 10);
        int int7 = dateTimeField2.getMaximumValue((long) (byte) 1);
        long long9 = dateTimeField2.roundHalfFloor((long) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        int int11 = dateTimeField2.getMaximumTextLength(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale locale19 = new java.util.Locale("China");
        java.util.Locale.Builder builder20 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("French");
        java.util.Locale locale23 = builder22.build();
        java.util.Locale.Builder builder25 = builder22.setLanguageTag("Japan");
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder29 = builder25.setExtension('x', "Giappone");
        java.util.Locale.Builder builder31 = builder25.addUnicodeLocaleAttribute("Cina");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int36 = dateTimeField34.getLeapAmount((long) ' ');
        long long39 = dateTimeField34.add((long) (-1), (int) (byte) 1);
        long long42 = dateTimeField34.add(0L, 97L);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder45.setLocale(locale46);
        java.util.Locale locale49 = new java.util.Locale("China");
        java.util.Locale.Builder builder50 = builder47.setLocale(locale49);
        java.util.Locale.Builder builder52 = builder50.addUnicodeLocaleAttribute("French");
        java.util.Locale locale53 = builder52.build();
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = dateTimeField34.getAsText(readablePartial43, 1439, locale53);
        java.util.Locale.Builder builder56 = builder25.setLocale(locale53);
        java.lang.String str57 = locale12.getDisplayCountry(locale53);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale19.toString(), "china");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31535999999L + "'", long39 == 31535999999L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3061065600000L + "'", long42 == 3061065600000L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals(locale49.toString(), "china");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1439" + "'", str55, "1439");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("gen");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("-1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long13 = dateTimeZone11.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale16 = new java.util.Locale("cinese (Cina)");
        java.lang.String str17 = dateTimeZone11.getShortName(0L, locale16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, 1L);
        long long23 = dateTimeZone11.getMillisKeepLocal(dateTimeZone18, (long) (short) -1);
        long long26 = dateTimeZone11.convertLocalToUTC((-61914758400100L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.lang.String str28 = dateTimeZone11.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        long long31 = dateTimeZone11.convertUTCToLocal((-190800001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals(locale16.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61914758400100L) + "'", long26 == (-61914758400100L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-190800001L) + "'", long31 == (-190800001L));
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "Feb");
        java.util.Locale.Builder builder14 = builder9.setLanguageTag("zh-tw");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder9.setLanguage("35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean11 = dateTimeField10.isLenient();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField10.getAsText(readablePartial12, (int) 'x', locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology7, locale16, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.yearOfEra();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder28.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder32 = builder28.setLocale(locale31);
        java.lang.String str33 = dateTimeField25.getAsText(readablePartial26, (int) (byte) 100, locale31);
        java.lang.String str34 = dateTimeField2.getAsText((int) 'u', locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField2.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        java.lang.String str37 = dateTimeFieldType35.getName();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cinese (Cina)" + "'", str18, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "120" + "'", str19, "120");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "117" + "'", str34, "117");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yearOfEra" + "'", str37, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType38);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int7 = dateTimeZone0.getOffsetFromLocal(4200000L);
        boolean boolean9 = dateTimeZone0.equals((java.lang.Object) "1910");
        int int11 = dateTimeZone0.getOffsetFromLocal((long) 11114);
        java.lang.Class<?> wildcardClass12 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        long long32 = dateTimeZone25.convertUTCToLocal(0L);
        java.lang.String str34 = dateTimeZone25.getNameKey(0L);
        int int36 = dateTimeZone25.getOffset((long) 10);
        org.joda.time.Chronology chronology37 = chronology18.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = chronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology37.add(readablePeriod42, 31536000012L, 3540000);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str51 = locale47.getExtension('a');
        java.lang.String str52 = locale46.getDisplayCountry(locale47);
        java.lang.String str53 = locale47.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (-54), chronology37, locale47, (java.lang.Integer) (-51011448));
        dateTimeParserBucket55.setPivotYear((java.lang.Integer) (-16383412));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 31536000012L + "'", long45 == 31536000012L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u65e5\u672c" + "'", str52, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        long long23 = dateTimeField20.add((long) 1, (long) 'x');
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getISO3Country();
        java.lang.String str27 = dateTimeField20.getAsText((int) (byte) 0, locale25);
        long long29 = dateTimeField20.roundHalfCeiling(1958L);
        boolean boolean31 = dateTimeField20.isLeap(999L);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField20.getMinimumValue(readablePartial32);
        int int35 = dateTimeField20.get(35L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 120001L + "'", long23 == 120001L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "USA" + "'", str26, "USA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2000L + "'", long29 == 2000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology16.getZone();
        long long24 = dateTimeZone22.nextTransition(15600999L);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone22.isLocalDateTimeGap(localDateTime25);
        long long28 = dateTimeZone22.convertUTCToLocal((-54L));
        long long30 = dateTimeZone22.convertUTCToLocal(45758480994852L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 15600999L + "'", long24 == 15600999L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-54L) + "'", long28 == (-54L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 45758480994852L + "'", long30 == 45758480994852L);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField22.getMaximumValue(readablePartial25);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = dateTimeField22.getAsShortText(0L, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale28);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean41 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayName(locale46);
        java.lang.String str49 = dateTimeField40.getAsText(readablePartial42, (int) 'x', locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology37, locale46, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = chronology52.hours();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology52, locale55, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField58 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField62 = chronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = chronology52.weekyear();
        boolean boolean64 = dateTimeParserBucket34.restoreState((java.lang.Object) chronology52);
        org.joda.time.DateTimeField dateTimeField65 = chronology52.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology52.getZone();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        long long70 = chronology52.add(readablePeriod67, 3155760000000L, 600000);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "120" + "'", str49, "120");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3155760000000L + "'", long70 == 3155760000000L);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology17.millis();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale39 = java.util.Locale.UK;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "Chinese (China)", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology17, locale39, (java.lang.Integer) 12, 100);
        org.joda.time.DateTimeField dateTimeField44 = chronology17.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology17.add(readablePeriod45, (long) 1970, 19);
        org.joda.time.DurationField durationField49 = chronology17.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1970L + "'", long48 == 1970L);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.minuteOfDay();
        java.lang.String str23 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology26, locale27, (java.lang.Integer) 1);
        java.lang.Object obj30 = dateTimeParserBucket29.saveState();
        long long31 = dateTimeParserBucket29.computeMillis();
        dateTimeParserBucket29.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        dateTimeParserBucket29.saveField(dateTimeFieldType34, "zh_CN", locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(6048000052L, chronology18, locale38, (java.lang.Integer) 13);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long48 = dateTimeZone45.convertLocalToUTC(0L, false);
        long long50 = dateTimeZone45.nextTransition((-31536000000L));
        java.lang.String str51 = dateTimeZone45.toString();
        long long55 = dateTimeZone45.convertLocalToUTC(11400999L, false, 410227200000L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        long long59 = dateTimeZone56.getMillisKeepLocal(dateTimeZone57, 1L);
        java.lang.String str61 = dateTimeZone56.getNameKey((long) '#');
        long long65 = dateTimeZone56.convertLocalToUTC((long) 'a', true, 0L);
        long long68 = dateTimeZone56.convertLocalToUTC((long) ' ', false);
        java.lang.String str69 = dateTimeZone56.toString();
        long long71 = dateTimeZone45.getMillisKeepLocal(dateTimeZone56, 946684800000L);
        boolean boolean73 = dateTimeZone45.isStandardOffset(946680600000L);
        java.lang.String str75 = dateTimeZone45.getShortName((long) 998);
        long long77 = dateTimeZone42.getMillisKeepLocal(dateTimeZone45, 540000L);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone42.isLocalDateTimeGap(localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        int int81 = dateTimeZone42.getOffset(readableInstant80);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 4200000L + "'", long48 == 4200000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-31536000000L) + "'", long50 == (-31536000000L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-01:10" + "'", str51, "-01:10");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 15600999L + "'", long55 == 15600999L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 97L + "'", long65 == 97L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 946680600000L + "'", long71 == 946680600000L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-01:10" + "'", str75, "-01:10");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 4740000L + "'", long77 == 4740000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int10 = dateTimeField8.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField11 = dateTimeField8.getDurationField();
        int int13 = dateTimeField8.getMaximumValue((long) (short) 1);
        long long15 = dateTimeField8.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder22 = builder18.clearExtensions();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = dateTimeField8.getAsShortText(readablePartial16, (int) (byte) 100, locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str27 = dateTimeField2.getAsText((int) 'u', locale23);
        int int30 = dateTimeField2.getDifference((-62135596800000L), 31795200000L);
        int int31 = dateTimeField2.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "117" + "'", str27, "117");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1970) + "'", int30 == (-1970));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology16.weekyears();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology16.add(readablePeriod22, 1344L, 4);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.millisOfSecond();
        org.joda.time.Chronology chronology28 = chronology16.withUTC();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1344L + "'", long25 == 1344L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket15.getZone();
        dateTimeParserBucket15.setOffset(11400999);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        long long24 = dateTimeField21.add(1439L, 31);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.clockhourOfHalfday();
        int int46 = dateTimeField45.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51);
        java.lang.Integer int55 = dateTimeParserBucket54.getPivotYear();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale58, (java.lang.Integer) 1);
        java.lang.Object obj61 = dateTimeParserBucket60.saveState();
        long long62 = dateTimeParserBucket60.computeMillis();
        dateTimeParserBucket60.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        dateTimeParserBucket60.saveField(dateTimeFieldType65, "zh_CN", locale69);
        boolean boolean71 = dateTimeParserBucket54.restoreState((java.lang.Object) locale69);
        java.lang.String str72 = dateTimeField45.getAsShortText(readablePartial47, (int) 'a', locale69);
        java.util.Set<java.lang.Character> charSet73 = locale69.getExtensionKeys();
        java.lang.String str74 = dateTimeField21.getAsShortText(252374400000L, locale69);
        java.lang.String str75 = locale69.getScript();
        java.util.Locale locale76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = locale69.getDisplayLanguage(locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 978307201439L + "'", long24 == 978307201439L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "97" + "'", str72, "97");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "77" + "'", str74, "77");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.setLanguage("fr");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setLanguage("\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int26 = dateTimeField24.getLeapAmount((long) ' ');
        long long28 = dateTimeField24.roundFloor((long) 'x');
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = dateTimeField24.getAsShortText(59, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology17, locale30, (java.lang.Integer) 1970, 0);
        java.lang.String str36 = locale30.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale30.getDisplayScript(locale37);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("70");
        java.lang.String str42 = locale30.getDisplayCountry(locale41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        boolean boolean49 = dateTimeField48.isLenient();
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.lang.String str57 = dateTimeField48.getAsText(readablePartial50, (int) 'x', locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology45, locale54, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.clockhourOfDay();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = locale64.getDisplayName();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = locale64.getDisplayName(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(967766400000L, chronology60, locale66, (java.lang.Integer) 70, 0);
        java.lang.String str72 = locale41.getDisplayLanguage(locale66);
        java.lang.String str73 = locale66.getScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "China" + "'", str42, "China");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (China)" + "'", str53, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "cinese (Cina)" + "'", str56, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "120" + "'", str57, "120");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (China)" + "'", str65, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "cinese (Cina)" + "'", str68, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale locale6 = builder0.build();
        java.util.Locale locale7 = builder0.build();
        java.lang.String str9 = locale7.getUnicodeLocaleType("70");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE_Taiwan");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE_Taiwan");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = chronology16.get(readablePartial19, (-28857600000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology17.millis();
        java.lang.String str26 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMinimumValue(readablePartial31);
        long long34 = dateTimeField30.roundCeiling((-147600000L));
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder38 = builder36.setLocale(locale37);
        java.util.Locale locale40 = new java.util.Locale("China");
        java.util.Locale.Builder builder41 = builder38.setLocale(locale40);
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("French");
        java.util.Locale locale44 = builder41.build();
        java.lang.String str45 = locale44.getDisplayScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeField30.getAsShortText(readablePartial35, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-129600000L) + "'", long34 == (-129600000L));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals(locale40.toString(), "china");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "china__#u-french");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        int int22 = dateTimeField20.getMaximumValue(0L);
        long long24 = dateTimeField20.roundFloor(4200000L);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayName(locale29);
        java.lang.String str32 = locale27.getDisplayVariant();
        java.lang.String str33 = locale27.getVariant();
        java.lang.String str34 = locale27.getVariant();
        java.lang.String str35 = dateTimeField20.getAsText(readablePartial25, (int) (byte) 1, locale27);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology37, locale38, (java.lang.Integer) 1);
        java.lang.Object obj41 = dateTimeParserBucket40.saveState();
        long long42 = dateTimeParserBucket40.computeMillis();
        java.lang.Object obj43 = dateTimeParserBucket40.saveState();
        dateTimeParserBucket40.setOffset((java.lang.Integer) 1);
        java.lang.Object obj46 = dateTimeParserBucket40.saveState();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology48, locale49, (java.lang.Integer) 1);
        java.lang.Object obj52 = dateTimeParserBucket51.saveState();
        long long53 = dateTimeParserBucket51.computeMillis();
        dateTimeParserBucket51.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        dateTimeParserBucket51.saveField(dateTimeFieldType56, "zh_CN", locale60);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale63.getISO3Country();
        boolean boolean66 = locale63.hasExtensions();
        java.lang.String str67 = locale63.getISO3Language();
        dateTimeParserBucket40.saveField(dateTimeFieldType56, "hi!", locale63);
        int int69 = dateTimeField20.getMaximumShortTextLength(locale63);
        int int70 = dateTimeField20.getMaximumValue();
        java.lang.String str72 = dateTimeField20.getAsText(31535999999L);
        int int73 = dateTimeField20.getMinimumValue();
        long long75 = dateTimeField20.remainder((-17999987L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4200000L + "'", long24 == 4200000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (China)" + "'", str28, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "it" + "'", str30, "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "deu" + "'", str67, "deu");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "59" + "'", str72, "59");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 13L + "'", long75 == 13L);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        java.lang.Object obj6 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = chronology7.get(readablePeriod9, (-127251540897600030L), 4197052800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DurationField durationField21 = dateTimeField20.getRangeDurationField();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getLanguage();
        int int27 = dateTimeField20.getMaximumTextLength(locale23);
        java.lang.String str29 = dateTimeField20.getAsText(360000000L);
        int int31 = dateTimeField20.getMinimumValue(4190400010L);
        long long34 = dateTimeField20.set(9223371985593600012L, 190800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja-JP" + "'", str25, "ja-JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 6021004274640000012L + "'", long34 == 6021004274640000012L);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.minuteOfDay();
        long long25 = dateTimeField22.set(4039372800000L, (int) ' ');
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField22.getMaximumValue(readablePartial26);
        java.lang.String str28 = dateTimeField22.toString();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.lang.String str32 = locale30.getDisplayName();
        java.lang.String str33 = dateTimeField22.getAsShortText(59, locale30);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale30.getDisplayLanguage(locale34);
        java.lang.String str36 = locale34.getScript();
        java.lang.String str37 = locale34.getDisplayName();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int42 = dateTimeField40.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology46, locale47, (java.lang.Integer) 1);
        java.lang.String str50 = locale47.getScript();
        java.lang.String str51 = dateTimeField40.getAsShortText(readablePartial43, (int) ' ', locale47);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str57 = locale53.getExtension('a');
        java.lang.String str58 = locale52.getDisplayCountry(locale53);
        int int59 = dateTimeField40.getMaximumTextLength(locale52);
        java.lang.String str60 = locale34.getDisplayVariant(locale52);
        java.util.Locale.setDefault(locale34);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4039374720000L + "'", long25 == 4039374720000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str28, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4" + "'", str35, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Korean (South Korea)" + "'", str37, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "32" + "'", str51, "32");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u672c" + "'", str58, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale3 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CHN" + "'", str1, "CHN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int10 = dateTimeField8.getLeapAmount((long) 0);
        int int12 = dateTimeField8.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray18 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int19 = dateTimeField8.getMaximumValue(readablePartial13, intArray18);
        int int20 = dateTimeField8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField8.getType();
        java.util.Locale locale26 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        dateTimeParserBucket5.saveField(dateTimeFieldType21, "120", locale26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.monthOfYear();
        boolean boolean50 = dateTimeFieldType21.isSupported(chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology45.hourOfDay();
        org.joda.time.DurationField durationField54 = chronology45.days();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType0.getField(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str38, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        int int21 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        java.lang.String str25 = dateTimeFieldType22.getName();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder32 = builder30.setLocale(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        dateTimeParserBucket15.saveField(dateTimeFieldType22, "Canada", locale27);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean41 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayName(locale46);
        java.lang.String str49 = dateTimeField40.getAsText(readablePartial42, (int) 'x', locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology37, locale46, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekOfWeekyear();
        org.joda.time.DurationField durationField54 = chronology52.hours();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology52, locale55, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        long long61 = dateTimeZone58.getMillisKeepLocal(dateTimeZone59, 1L);
        long long64 = dateTimeZone59.adjustOffset(1L, true);
        long long66 = dateTimeZone59.convertUTCToLocal(0L);
        java.lang.String str68 = dateTimeZone59.getNameKey(0L);
        int int70 = dateTimeZone59.getOffset((long) 10);
        org.joda.time.Chronology chronology71 = chronology52.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField72 = chronology52.year();
        org.joda.time.ReadablePartial readablePartial73 = null;
        java.util.Locale locale75 = java.util.Locale.PRC;
        java.lang.String str76 = dateTimeField72.getAsShortText(readablePartial73, (int) 'x', locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField72.getType();
        java.lang.String str78 = dateTimeFieldType77.getName();
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType77.getDurationType();
        dateTimeParserBucket15.saveField(dateTimeFieldType77, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType77.getDurationType();
        java.lang.String str83 = dateTimeFieldType77.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Taiwan" + "'", str33, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "120" + "'", str49, "120");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "120" + "'", str76, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "year" + "'", str78, "year");
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "year" + "'", str83, "year");
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        java.lang.String str24 = dateTimeFieldType21.getName();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType21.getDurationType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType21.getRangeDurationType();
        java.lang.String str27 = dateTimeFieldType21.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "monthOfYear" + "'", str27, "monthOfYear");
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfWeek();
        org.joda.time.DurationField durationField39 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfDay();
        org.joda.time.DurationField durationField41 = chronology36.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology36.getDateTimeMillis(600000, 2922789, 99, 360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.yearOfCentury();
        long long27 = dateTimeField24.getDifferenceAsLong((long) 81, 59880000L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        org.joda.time.DurationField durationField48 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.millisOfSecond();
        java.util.Locale locale55 = new java.util.Locale("millisOfSecond", "en_US", "fr-FR");
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = dateTimeField50.getAsText((long) 25200000, locale55);
        int int58 = dateTimeField24.getMaximumShortTextLength(locale55);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale55.toString(), "millisofsecond_EN_US_fr-FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "EN_US" + "'", str56, "EN_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.clearExtensions();
        java.util.Locale locale8 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.setScript("");
        java.util.Locale.Builder builder12 = builder10.setLanguage("January");
        java.util.Locale.Builder builder13 = builder12.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setUnicodeLocaleKeyword("usa", "ita");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: usa [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField2.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        boolean boolean13 = dateTimeField12.isLenient();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.lang.String str21 = dateTimeField12.getAsText(readablePartial14, (int) 'x', locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology9, locale18, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType7.getField(chronology24);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology24, locale30, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.getMillisKeepLocal(dateTimeZone37, 1L);
        int int41 = dateTimeZone36.getOffsetFromLocal((long) (short) 0);
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology44 = chronology24.withZone(dateTimeZone36);
        long long48 = chronology44.add(19L, 1L, (int) (byte) -1);
        boolean boolean49 = dateTimeFieldType5.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.secondOfDay();
        java.lang.String str51 = chronology44.toString();
        org.joda.time.DurationField durationField52 = chronology44.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cinese (Cina)" + "'", str20, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "120" + "'", str21, "120");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 18L + "'", long48 == 18L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        long long28 = dateTimeParserBucket4.computeMillis(true);
        java.lang.Object obj29 = dateTimeParserBucket4.saveState();
        java.util.Locale locale30 = dateTimeParserBucket4.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        long long36 = dateTimeField33.roundFloor((long) 10);
        int int38 = dateTimeField33.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial39 = null;
        int int40 = dateTimeField33.getMaximumValue(readablePartial39);
        java.util.Locale locale43 = new java.util.Locale("cinese (Cina)");
        java.lang.String str44 = locale43.getDisplayCountry();
        java.lang.String str45 = dateTimeField33.getAsShortText(70, locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField33.getType();
        dateTimeParserBucket4.saveField(dateTimeFieldType46, 190);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getRangeDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61851600000000L) + "'", long28 == (-61851600000000L));
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertEquals(locale43.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "70" + "'", str45, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType49);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder10.setLanguage("USA");
        java.util.Locale.Builder builder20 = builder10.setLanguage("allemand");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        long long28 = dateTimeField26.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField26.getMaximumValue(readablePartial29);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str36 = locale32.getExtension('a');
        java.lang.String str37 = dateTimeField26.getAsShortText(0L, locale32);
        long long39 = dateTimeField26.roundCeiling((-3538082L));
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        long long50 = dateTimeField47.roundFloor((long) 10);
        int int52 = dateTimeField47.getMaximumValue((long) (byte) 1);
        long long54 = dateTimeField47.roundHalfFloor((long) (byte) -1);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        int int56 = dateTimeField47.getMaximumTextLength(locale55);
        java.util.Locale locale57 = locale55.stripExtensions();
        java.util.Locale.Builder builder58 = builder44.setLocale(locale55);
        java.util.Locale locale59 = builder44.build();
        java.lang.String str60 = dateTimeField26.getAsText(readablePartial40, 100, locale59);
        java.util.Locale.Builder builder61 = builder22.setLocale(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder63 = builder22.setScript("China");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: China [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 999 + "'", int30 == 999);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3538082L) + "'", long39 == (-3538082L));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayCountry();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "China" + "'", str1, "China");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology30.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField49 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology43.weekyearOfCentury();
        boolean boolean53 = dateTimeFieldType0.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField54 = chronology43.monthOfYear();
        int int57 = dateTimeField54.getDifference(63082368000000L, (-16725224460000L));
        int int59 = dateTimeField54.getMaximumValue((-9223309849910611675L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 30347 + "'", int57 == 30347);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        org.joda.time.Chronology chronology40 = chronology18.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone41.getMillisKeepLocal(dateTimeZone42, 1L);
        java.lang.String str45 = dateTimeZone42.getID();
        long long48 = dateTimeZone42.adjustOffset(31L, false);
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getVariant();
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = dateTimeZone42.getShortName((long) (byte) -1, locale50);
        java.lang.String str55 = dateTimeZone42.getNameKey(9223371985594200012L);
        org.joda.time.Chronology chronology56 = chronology18.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField57 = chronology56.months();
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder60 = builder58.setLocale(locale59);
        java.util.Locale locale62 = new java.util.Locale("China");
        java.util.Locale.Builder builder63 = builder60.setLocale(locale62);
        java.util.Locale.Builder builder65 = builder63.addUnicodeLocaleAttribute("French");
        java.util.Locale locale66 = builder65.build();
        java.util.Locale.Builder builder68 = builder65.setLanguageTag("Japan");
        java.util.Locale.Builder builder70 = builder68.setLanguage("German");
        java.util.Locale locale71 = builder68.build();
        java.util.Locale.Builder builder73 = builder68.setLanguage("");
        java.util.Locale locale74 = builder73.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(2082758400000L, chronology56, locale74);
        java.util.Locale.setDefault(locale74);
        java.lang.String str77 = locale74.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 31L + "'", long48 == 31L);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Italy" + "'", str52, "Italy");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals(locale62.toString(), "china");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "german");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("Chinesisch (China)");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = dateTimeField22.getAsText(readablePartial23, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Jan");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jan" + "'", str2, "jan");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jan" + "'", str4, "jan");
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField25.getType();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType26.getField(chronology43);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType26.getDurationType();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType26.isSupported(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.adjustOffset(31L, false);
        int int9 = dateTimeZone1.getStandardOffset((long) 9);
        long long11 = dateTimeZone1.nextTransition((long) 100);
        boolean boolean13 = dateTimeZone1.isStandardOffset((long) 86399);
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) 360000000L);
        boolean boolean17 = dateTimeZone1.isStandardOffset((long) 9);
        java.lang.String str19 = dateTimeZone1.getShortName(439L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31L + "'", long7 == 31L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zho", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet11);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale28);
        java.lang.String str30 = locale27.getDisplayCountry(locale28);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int40 = dateTimeField38.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField41 = dateTimeField38.getDurationField();
        int int43 = dateTimeField38.getMaximumValue((long) (short) 1);
        long long45 = dateTimeField38.roundHalfEven((long) ' ');
        int int47 = dateTimeField38.getMinimumValue((long) 100);
        int int48 = dateTimeField38.getMinimumValue();
        java.util.Locale locale53 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str54 = dateTimeField38.getAsShortText((int) '#', locale53);
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str59 = locale55.getExtension('a');
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = locale60.getCountry();
        java.lang.String str64 = locale60.getScript();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int69 = dateTimeField67.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField70 = dateTimeField67.getDurationField();
        int int72 = dateTimeField67.getMaximumValue((long) (short) 1);
        long long74 = dateTimeField67.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial75 = null;
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder77.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder81 = builder77.clearExtensions();
        java.util.Locale locale82 = builder81.build();
        java.lang.String str83 = dateTimeField67.getAsShortText(readablePartial75, (int) (byte) 100, locale82);
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray86 = new java.util.Locale[] { locale27, locale33, locale35, locale53, locale55, locale60, locale82 };
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList87, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList17, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "35" + "'", str54, "35");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "JP" + "'", str63, "JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100" + "'", str83, "100");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.millis();
        org.joda.time.Chronology chronology47 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField49 = dateTimeField48.getRangeDurationField();
        long long51 = dateTimeField48.roundCeiling((-51009466L));
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.secondOfMinute();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        boolean boolean39 = locale38.hasExtensions();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology9, locale38);
        org.joda.time.DateTimeField dateTimeField42 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology9.year();
        int int47 = dateTimeField45.getLeapAmount(0L);
        org.joda.time.DurationField durationField48 = dateTimeField45.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial49 = null;
        int int50 = dateTimeField45.getMinimumValue(readablePartial49);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        java.util.Locale locale13 = builder10.build();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = new java.util.Locale("China");
        java.lang.String str17 = locale14.getDisplayLanguage(locale16);
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.String str19 = locale13.getDisplayLanguage(locale16);
        java.lang.String str20 = locale13.getISO3Country();
        java.lang.String str21 = locale13.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "german");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals(locale16.toString(), "china");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "china");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "german" + "'", str19, "german");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "german" + "'", str21, "german");
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology17.weekyear();
        long long43 = dateTimeField41.roundFloor((-48313238400000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-48313497600000L) + "'", long43 == (-48313497600000L));
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        java.lang.String str33 = dateTimeZone28.getNameKey((long) '#');
        long long37 = dateTimeZone28.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str39 = dateTimeZone28.getNameKey((-58979923200001L));
        java.lang.String str41 = dateTimeZone28.getShortName((long) (byte) -1);
        java.lang.String str43 = dateTimeZone28.getName((long) 9);
        dateTimeParserBucket25.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology45 = chronology16.withZone(dateTimeZone28);
        long long51 = chronology16.getDateTimeMillis(31536000012L, 9, (int) ' ', 0, 998);
        org.joda.time.DateTimeField dateTimeField52 = chronology16.millisOfDay();
        java.lang.String str53 = dateTimeField52.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 31570320998L + "'", long51 == 31570320998L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "millisOfDay" + "'", str53, "millisOfDay");
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        java.lang.Object obj10 = dateTimeParserBucket4.saveState();
        long long13 = dateTimeParserBucket4.computeMillis(true, "127");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        java.lang.String str13 = dateTimeZone8.getID();
        java.lang.String str15 = dateTimeZone8.getNameKey(0L);
        long long17 = dateTimeZone8.convertUTCToLocal(0L);
        long long19 = dateTimeZone8.previousTransition((-81790773757800000L));
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone8.isLocalDateTimeGap(localDateTime20);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-81790773757800000L) + "'", long19 == (-81790773757800000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder17.clear();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 1);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        long long25 = dateTimeParserBucket23.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, 1L);
        java.lang.String str30 = dateTimeZone27.getID();
        dateTimeParserBucket23.setZone(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.getID();
        boolean boolean33 = dateTimeZone27.isFixed();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone34, (long) 13);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.ReadablePartial readablePartial44 = null;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField42.getAsText(readablePartial44, (int) 'x', locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology39, locale48, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = dateTimeField55.getAsShortText(1439, locale57);
        java.lang.String str59 = dateTimeZone27.getShortName(292278782L, locale57);
        java.lang.String str60 = locale57.getDisplayLanguage();
        java.util.Locale.Builder builder61 = builder18.setLocale(locale57);
        java.util.Locale.Builder builder63 = builder61.setLanguage("FRA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder61.setUnicodeLocaleKeyword("-51011448", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -51011448 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 13L + "'", long36 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cinese (Cina)" + "'", str50, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1439" + "'", str58, "1439");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese" + "'", str60, "Chinese");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale43 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology41, locale43, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        java.lang.String str48 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = dateTimeField49.set((long) 2922789, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals(locale43.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        long long18 = dateTimeParserBucket16.computeMillis();
        long long21 = dateTimeParserBucket16.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket16.saveField(dateTimeFieldType22, 9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        boolean boolean44 = dateTimeFieldType22.isSupported(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int49 = dateTimeField47.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology53, locale54, (java.lang.Integer) 1);
        java.lang.String str57 = locale54.getScript();
        java.lang.String str58 = dateTimeField47.getAsShortText(readablePartial50, (int) ' ', locale54);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str64 = locale60.getExtension('a');
        java.lang.String str65 = locale59.getDisplayCountry(locale60);
        int int66 = dateTimeField47.getMaximumTextLength(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 4, chronology41, locale59);
        dateTimeParserBucket67.setPivotYear((java.lang.Integer) (-51011448));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32" + "'", str58, "32");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u672c" + "'", str65, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder10.setLanguage("USA");
        java.util.Locale.Builder builder20 = builder10.setLanguage("allemand");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("Jan");
        java.util.Locale.Builder builder27 = builder25.setRegion("ko");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.year();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology17.add(readablePeriod28, 100800000L, 12);
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = chronology17.get(readablePartial32, (long) 70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100800000L + "'", long31 == 100800000L);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale23 = new java.util.Locale("ita");
        java.lang.String str24 = locale20.getDisplayVariant(locale23);
        java.lang.String str25 = locale23.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(3376684800000L, chronology17, locale23, (java.lang.Integer) 292320000, 50);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale23.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale43 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology41, locale43, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        java.lang.String str48 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.dayOfMonth();
        int int51 = dateTimeField49.getMinimumValue(86398L);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int58 = dateTimeField56.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField59 = dateTimeField56.getDurationField();
        int int61 = dateTimeField56.getMaximumValue((long) (short) 1);
        long long63 = dateTimeField56.roundHalfEven((long) ' ');
        int int65 = dateTimeField56.getMinimumValue((long) 100);
        long long68 = dateTimeField56.add(0L, (long) 0);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        int int70 = dateTimeField56.getMaximumTextLength(locale69);
        java.lang.String str71 = locale69.getDisplayScript();
        java.lang.String str72 = locale69.getDisplayCountry();
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale69.getDisplayVariant();
        java.util.Set<java.lang.String> strSet75 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str76 = locale69.getDisplayLanguage();
        java.lang.String str77 = dateTimeField49.getAsText(readablePartial52, (int) (byte) 10, locale69);
        long long79 = dateTimeField49.remainder(68399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals(locale43.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Canada" + "'", str72, "Canada");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "French" + "'", str76, "French");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "10" + "'", str77, "10");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 68399999L + "'", long79 == 68399999L);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=french(canada)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(7);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean9 = dateTimeField8.isLenient();
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = dateTimeField8.getAsText(readablePartial10, (int) 'x', locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology5, locale14, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology20.hours();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        java.lang.String str38 = locale24.getDisplayLanguage(locale34);
        java.lang.String str39 = locale24.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology20, locale24);
        org.joda.time.DateTimeField dateTimeField41 = chronology20.minuteOfHour();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(97L, chronology20, locale42, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField47 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField48 = chronology20.millis();
        org.joda.time.Chronology chronology49 = chronology20.withUTC();
        boolean boolean50 = dateTimeZone1.equals((java.lang.Object) chronology20);
        org.joda.time.DateTimeField dateTimeField51 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField53 = dateTimeField52.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese (Cina)" + "'", str16, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "120" + "'", str17, "120");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tedesco" + "'", str38, "tedesco");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "deu" + "'", str39, "deu");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField49 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.hourOfDay();
        org.joda.time.DurationField durationField51 = chronology43.weeks();
        org.joda.time.DurationField durationField52 = chronology43.millis();
        org.joda.time.Chronology chronology53 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType0.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField46 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = chronology18.getDateTimeMillis(865746, 100, 3368, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        java.lang.String str22 = dateTimeField20.getAsText((-82199999L));
        long long24 = dateTimeField20.roundHalfFloor(1344L);
        int int25 = dateTimeField20.getMinimumValue();
        int int27 = dateTimeField20.get((-1483224600001L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Wednesday" + "'", str22, "Wednesday");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isSupported();
        int int5 = dateTimeField2.get(10L);
        long long8 = dateTimeField2.add((long) 86399, 11400999);
        boolean boolean10 = dateTimeField2.isLeap((-252460800000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 684060026399L + "'", long8 == 684060026399L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        boolean boolean29 = locale28.hasExtensions();
        int int30 = dateTimeField27.getMaximumShortTextLength(locale28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        long long37 = dateTimeZone32.adjustOffset(1L, true);
        boolean boolean38 = dateTimeZone32.isFixed();
        long long40 = dateTimeZone32.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone41 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        long long44 = dateTimeZone42.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale47 = new java.util.Locale("cinese (Cina)");
        java.lang.String str48 = dateTimeZone42.getShortName(0L, locale47);
        int int49 = dateTimeField27.getMaximumTextLength(locale47);
        org.joda.time.DurationField durationField50 = dateTimeField27.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial51 = null;
        int int52 = dateTimeField27.getMinimumValue(readablePartial51);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals(locale47.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.eras();
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getName((long) (-1));
        boolean boolean25 = dateTimeZone21.isStandardOffset((long) 10);
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone21);
        long long28 = dateTimeZone21.previousTransition(62577480720998L);
        java.lang.String str29 = dateTimeZone21.toString();
        int int31 = dateTimeZone21.getStandardOffset(4190400020L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 62577480720998L + "'", long28 == 62577480720998L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        int int31 = dateTimeField29.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField32 = dateTimeField29.getDurationField();
        int int34 = dateTimeField29.getMaximumValue((long) (short) 1);
        long long36 = dateTimeField29.roundHalfEven((long) ' ');
        int int38 = dateTimeField29.getMinimumValue((long) 100);
        long long41 = dateTimeField29.add(0L, (long) 0);
        long long43 = dateTimeField29.remainder((long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int48 = dateTimeField46.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField49 = dateTimeField46.getDurationField();
        int int51 = dateTimeField46.getMaximumValue((long) (short) 1);
        long long53 = dateTimeField46.roundHalfEven((long) ' ');
        int int55 = dateTimeField46.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale60 = new java.util.Locale("", "Chinese (China)");
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = dateTimeField46.getAsShortText(readablePartial56, (int) (short) -1, locale60);
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = dateTimeField46.getAsShortText((long) (byte) 100, locale64);
        int int67 = dateTimeField29.getMaximumShortTextLength(locale64);
        java.lang.String str68 = dateTimeField25.getAsShortText((long) 'a', locale64);
        java.lang.String str69 = locale64.getDisplayName();
        java.lang.String str70 = locale64.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals(locale60.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1" + "'", str62, "-1");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970" + "'", str66, "1970");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (United Kingdom)" + "'", str69, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial10, (int) (byte) 100, locale17);
        long long20 = dateTimeField2.roundHalfEven((long) '#');
        int int21 = dateTimeField2.getMinimumValue();
        java.lang.String str22 = dateTimeField2.toString();
        int int24 = dateTimeField2.getMaximumValue(9223372036739575807L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[yearOfEra]" + "'", str22, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long5 = dateTimeZone2.convertLocalToUTC(0L, false);
        long long7 = dateTimeZone2.nextTransition((-31536000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str9 = dateTimeZone2.toString();
        java.lang.String str11 = dateTimeZone2.getShortName(115200031L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4200000L + "'", long5 == 4200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-31536000000L) + "'", long7 == (-31536000000L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:10" + "'", str9, "-01:10");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:10" + "'", str11, "-01:10");
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str2 = dateTimeZone0.toString();
        long long4 = dateTimeZone0.convertUTCToLocal(378691200000L);
        java.lang.String str6 = dateTimeZone0.getShortName(22L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long10 = dateTimeZone0.adjustOffset(53L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-01:10" + "'", str2, "-01:10");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 378687000000L + "'", long4 == 378687000000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:10" + "'", str6, "-01:10");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 53L + "'", long10 == 53L);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfHalfday();
        boolean boolean23 = dateTimeField22.isLenient();
        long long25 = dateTimeField22.remainder(100800000L);
        boolean boolean26 = dateTimeField22.isSupported();
        boolean boolean27 = dateTimeField22.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        java.lang.String str28 = dateTimeFieldType20.getName();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        boolean boolean35 = dateTimeField34.isLenient();
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = dateTimeField34.getAsText(readablePartial36, (int) 'x', locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology31, locale40, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        boolean boolean55 = dateTimeField54.isLenient();
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale58.getDisplayName(locale60);
        java.lang.String str63 = dateTimeField54.getAsText(readablePartial56, (int) 'x', locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology51, locale60, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.secondOfDay();
        boolean boolean70 = dateTimeFieldType20.isSupported(chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.secondOfMinute();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfEra" + "'", str28, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (China)" + "'", str39, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese (Cina)" + "'", str42, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "120" + "'", str43, "120");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (China)" + "'", str59, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cinese (Cina)" + "'", str62, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "120" + "'", str63, "120");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone32.getMillisKeepLocal(dateTimeZone33, 1L);
        java.lang.String str36 = dateTimeZone33.getID();
        long long39 = dateTimeZone33.adjustOffset(31L, false);
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = dateTimeZone33.getShortName((long) (byte) -1, locale41);
        java.lang.String str46 = dateTimeZone33.getNameKey(9223371985594200012L);
        org.joda.time.Chronology chronology47 = chronology17.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField48 = chronology17.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = chronology17.get(readablePeriod49, 2726887939200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31L + "'", long39 == 31L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italy" + "'", str43, "Italy");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        int int6 = dateTimeField2.getMinimumValue(100800000L);
        long long8 = dateTimeField2.roundHalfFloor((-97519L));
        long long10 = dateTimeField2.roundCeiling(157854867001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4200000L + "'", long8 == 4200000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 189306600000L + "'", long10 == 189306600000L);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket4.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int16 = dateTimeField14.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField17 = dateTimeField14.getDurationField();
        java.lang.String str18 = dateTimeField14.toString();
        dateTimeParserBucket4.saveField(dateTimeField14, (int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int25 = dateTimeField23.getLeapAmount((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField23.getType();
        dateTimeParserBucket4.saveField(dateTimeFieldType26, 8);
        long long30 = dateTimeParserBucket4.computeMillis(true);
        dateTimeParserBucket4.setOffset((int) 'x');
        java.util.Locale locale33 = dateTimeParserBucket4.getLocale();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[yearOfEra]" + "'", str18, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61914758400100L) + "'", long30 == (-61914758400100L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.Chronology chronology27 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.dayOfYear();
        int int30 = dateTimeField28.getLeapAmount(360000097L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology31 = chronology17.withUTC();
        long long35 = chronology31.add(110417821800000L, 967766399L, 0);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.secondOfMinute();
        long long38 = dateTimeField36.remainder(524522L);
        org.joda.time.ReadablePartial readablePartial39 = null;
        int int40 = dateTimeField36.getMinimumValue(readablePartial39);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 110417821800000L + "'", long35 == 110417821800000L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 522L + "'", long38 == 522L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology28, locale29, (java.lang.Integer) 1);
        java.lang.Object obj32 = dateTimeParserBucket31.saveState();
        long long33 = dateTimeParserBucket31.computeMillis();
        dateTimeParserBucket31.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        dateTimeParserBucket31.saveField(dateTimeFieldType36, "zh_CN", locale40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology43, locale44, (java.lang.Integer) 1);
        java.lang.Object obj47 = dateTimeParserBucket46.saveState();
        long long48 = dateTimeParserBucket46.computeMillis();
        dateTimeParserBucket46.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        dateTimeParserBucket46.saveField(dateTimeFieldType51, "zh_CN", locale55);
        java.lang.String str57 = locale55.getVariant();
        java.lang.String str58 = locale40.getDisplayVariant(locale55);
        int int59 = dateTimeField12.getMaximumTextLength(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        int int64 = dateTimeField62.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField65 = dateTimeField62.getDurationField();
        int int67 = dateTimeField62.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial68 = null;
        int[] intArray74 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int75 = dateTimeField62.getMaximumValue(readablePartial68, intArray74);
        java.util.Locale locale79 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology81, locale82, (java.lang.Integer) 1);
        java.lang.String str85 = locale82.getScript();
        java.lang.String str86 = locale79.getDisplayScript(locale82);
        java.util.Set<java.lang.String> strSet87 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str88 = dateTimeField62.getAsText((long) (-1), locale82);
        java.lang.String str89 = locale40.getDisplayName(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = locale82.getUnicodeLocaleType("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4199999L + "'", long9 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4199999L + "'", long33 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 4199999L + "'", long48 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertEquals(locale79.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1969" + "'", str88, "1969");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Franz\366sisch (Frankreich)" + "'", str89, "Franz\366sisch (Frankreich)");
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long9 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        dateTimeParserBucket4.saveField(dateTimeField28, (int) (byte) 10);
        dateTimeParserBucket4.setOffset(0);
        java.util.Locale locale33 = dateTimeParserBucket4.getLocale();
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = locale33.getScript();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4199999L + "'", long9 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("-132345");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-132345");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        long long11 = dateTimeField2.roundFloor((long) (byte) -1);
        boolean boolean12 = dateTimeField2.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-31531800000L) + "'", long11 == (-31531800000L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("+04:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: +04:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        java.util.Locale locale6 = dateTimeParserBucket4.getLocale();
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket4.getChronology();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale24, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = chronology30.hours();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology30, locale33, (java.lang.Integer) 0);
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getVariant();
        java.util.Locale.setDefault(locale36);
        java.util.Locale locale41 = new java.util.Locale("", "tedesco");
        java.lang.String str42 = locale36.getDisplayScript(locale41);
        java.lang.String str43 = locale36.getISO3Language();
        java.lang.String str44 = locale33.getDisplayVariant(locale36);
        boolean boolean45 = locale36.hasExtensions();
        java.util.Set<java.lang.Character> charSet46 = locale36.getExtensionKeys();
        int int47 = dateTimeField11.getMaximumShortTextLength(locale36);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 59);
        long long52 = dateTimeZone50.convertUTCToLocal(946684800000L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        boolean boolean60 = dateTimeField59.isLenient();
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayName(locale65);
        java.lang.String str68 = dateTimeField59.getAsText(readablePartial61, (int) 'x', locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology56, locale65, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = chronology71.millis();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType77.getField(chronology78);
        boolean boolean80 = dateTimeField79.isLenient();
        org.joda.time.ReadablePartial readablePartial81 = null;
        java.util.Locale locale83 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str84 = locale83.getDisplayName();
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.lang.String str86 = locale85.getLanguage();
        java.lang.String str87 = locale83.getDisplayName(locale85);
        java.lang.String str88 = dateTimeField79.getAsText(readablePartial81, (int) 'x', locale85);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology76, locale85, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale93 = java.util.Locale.UK;
        dateTimeParserBucket90.saveField(dateTimeFieldType91, "Chinese (China)", locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket97 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology71, locale93, (java.lang.Integer) 12, 100);
        java.lang.String str98 = dateTimeZone50.getName(19166340000L, locale93);
        java.lang.String str99 = locale36.getDisplayName(locale93);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale41.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ita" + "'", str43, "ita");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 946688340000L + "'", long52 == 946688340000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cinese (Cina)" + "'", str64, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cinese (Cina)" + "'", str67, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "120" + "'", str68, "120");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "cinese (Cina)" + "'", str84, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "it" + "'", str86, "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "cinese (Cina)" + "'", str87, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "120" + "'", str88, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "+00:59" + "'", str98, "+00:59");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "Italian (Italy)" + "'", str99, "Italian (Italy)");
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        long long15 = dateTimeZone11.convertLocalToUTC((long) 1982, true, 0L);
        long long19 = dateTimeZone11.convertLocalToUTC(7783200009L, false, 4201985L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology23, locale32, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.monthOfYear();
        org.joda.time.DurationField durationField42 = chronology38.hours();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale43, (java.lang.Integer) 4, 1970);
        long long50 = dateTimeParserBucket48.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        long long54 = dateTimeZone51.getMillisKeepLocal(dateTimeZone52, 1L);
        java.lang.String str55 = dateTimeZone52.getID();
        long long58 = dateTimeZone52.adjustOffset(31L, false);
        int int60 = dateTimeZone52.getStandardOffset((long) 9);
        long long62 = dateTimeZone52.nextTransition((long) 100);
        boolean boolean64 = dateTimeZone52.isStandardOffset((long) (byte) 0);
        dateTimeParserBucket48.setZone(dateTimeZone52);
        long long67 = dateTimeZone11.getMillisKeepLocal(dateTimeZone52, (-1704153600099L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1982L + "'", long15 == 1982L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 7783200009L + "'", long19 == 7783200009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31L + "'", long58 == 31L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1704153600099L) + "'", long67 == (-1704153600099L));
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str2 = dateTimeFieldType1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyear();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getISO3Country();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = java.util.Locale.PRC;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        long long33 = dateTimeField31.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial34 = null;
        int int35 = dateTimeField31.getMaximumValue(readablePartial34);
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str41 = locale37.getExtension('a');
        java.lang.String str42 = dateTimeField31.getAsShortText(0L, locale37);
        java.lang.String str43 = locale28.getDisplayLanguage(locale37);
        java.lang.String str44 = locale24.getDisplayName(locale37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.seconds();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.secondOfMinute();
        long long68 = dateTimeField65.add((long) 1, (long) 'x');
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale70.getISO3Country();
        java.lang.String str72 = dateTimeField65.getAsText((int) (byte) 0, locale70);
        java.lang.String str73 = locale70.getScript();
        java.lang.String str74 = locale37.getDisplayLanguage(locale70);
        java.lang.String str75 = locale70.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(65196662400000L, chronology19, locale70, (java.lang.Integer) 1164, (int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyear" + "'", str2, "weekyear");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 999 + "'", int35 == 999);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str43, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str44, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 120001L + "'", long68 == 120001L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "USA" + "'", str71, "USA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Japanese" + "'", str74, "Japanese");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "USA" + "'", str75, "USA");
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap5);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.US;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale15, locale17, locale20, locale22, locale24, locale26, locale28, locale30, locale33 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList36);
        java.lang.String[] strArray42 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str50 = locale49.getDisplayCountry();
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayCountry();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = locale56.getDisplayCountry();
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale49, locale51, locale54, locale56, locale58, locale60, locale62, locale64, locale67 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList70, filteringMode73);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList74, filteringMode75);
        java.util.Locale locale77 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap80);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Cina" + "'", str16, "Cina");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Cina" + "'", str21, "Cina");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Cina" + "'", str23, "Cina");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Cina" + "'", str25, "Cina");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Cina" + "'", str27, "Cina");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Cina" + "'", str50, "Cina");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Cina" + "'", str55, "Cina");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Cina" + "'", str57, "Cina");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Cina" + "'", str59, "Cina");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Cina" + "'", str61, "Cina");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode73.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode75.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(languageRangeList81);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        long long5 = dateTimeZone1.convertLocalToUTC((-61788529140355L), true, 0L);
        java.lang.String str7 = dateTimeZone1.getShortName(3376684801910L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61788529140363L) + "'", long5 == (-61788529140363L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.008" + "'", str7, "+00:00:00.008");
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CHINESISCH (CHINA)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinesisch (china)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale13, locale15, locale18, locale20, locale22, locale24, locale26, locale28, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList34);
        java.lang.String[] strArray40 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayCountry();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayCountry();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = locale56.getDisplayCountry();
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale47, locale49, locale52, locale54, locale56, locale58, locale60, locale62, locale65 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList68, filteringMode71);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList72, filteringMode73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap75);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Cina" + "'", str14, "Cina");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Cina" + "'", str19, "Cina");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Cina" + "'", str21, "Cina");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Cina" + "'", str23, "Cina");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Cina" + "'", str25, "Cina");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Cina" + "'", str48, "Cina");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Cina" + "'", str53, "Cina");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Cina" + "'", str55, "Cina");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Cina" + "'", str57, "Cina");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Cina" + "'", str59, "Cina");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(languageRangeList76);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long26 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField33 = dateTimeField30.getDurationField();
        int int35 = dateTimeField30.getMaximumValue((long) (short) 1);
        long long37 = dateTimeField30.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder44 = builder40.clearExtensions();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = dateTimeField30.getAsShortText(readablePartial38, (int) (byte) 100, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = dateTimeZone23.getShortName((long) 1970, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale45);
        org.joda.time.Chronology chronology50 = chronology17.withUTC();
        org.joda.time.ReadablePartial readablePartial51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = chronology17.get(readablePartial51, 13440L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4200000L + "'", long26 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:10" + "'", str48, "-01:10");
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("japan_ITA_JPN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=japan_ita_jpn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.UK;
        dateTimeParserBucket15.saveField(dateTimeFieldType16, "Chinese (China)", locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField24.getAsText(readablePartial26, (int) 'x', locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology21, locale30, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType16.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.weekOfWeekyear();
        long long45 = dateTimeField42.add((long) (-51011448), 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField42.getType();
        java.lang.String str47 = dateTimeFieldType46.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese (Cina)" + "'", str32, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "120" + "'", str33, "120");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-51011448L) + "'", long45 == (-51011448L));
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekOfWeekyear" + "'", str47, "weekOfWeekyear");
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology18, locale20, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.secondOfDay();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("117");
        java.lang.String str26 = locale25.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology18, locale25, (java.lang.Integer) 2077);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType30.getField(chronology47);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology47, locale53, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        long long62 = dateTimeZone59.getMillisKeepLocal(dateTimeZone60, 1L);
        int int64 = dateTimeZone59.getOffsetFromLocal((long) (short) 0);
        boolean boolean66 = dateTimeZone59.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology67 = chronology47.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.era();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.year();
        dateTimeParserBucket28.saveField(dateTimeField70, (-1030436006));
        org.joda.time.DurationField durationField73 = dateTimeField70.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        long long43 = chronology17.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology17.secondOfDay();
        boolean boolean58 = dateTimeField57.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = dateTimeField57.getDifference(68941L, (-6629916722400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6629916722468");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder22.setLocale(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale23);
        int int26 = dateTimeField18.getMaximumShortTextLength(locale23);
        java.lang.String str27 = locale23.getISO3Language();
        java.lang.String str28 = locale23.getDisplayCountry();
        java.util.Set<java.lang.String> strSet29 = locale23.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deu" + "'", str27, "deu");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Germania" + "'", str28, "Germania");
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("-1");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        java.util.Locale locale18 = dateTimeParserBucket17.getLocale();
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = locale1.getDisplayLanguage(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale1.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italia" + "'", str19, "Italia");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 1);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        long long25 = dateTimeParserBucket23.computeMillis();
        java.lang.Object obj26 = dateTimeParserBucket23.saveState();
        dateTimeParserBucket23.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket23.setOffset((int) (byte) 100);
        dateTimeParserBucket23.setOffset(421200000);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone33.getMillisKeepLocal(dateTimeZone34, 1L);
        int int38 = dateTimeZone33.getOffsetFromLocal((long) (short) 0);
        dateTimeParserBucket23.setZone(dateTimeZone33);
        org.joda.time.Chronology chronology40 = chronology16.withZone(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology40.add(readablePeriod41, 360000000L, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology40.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 360000000L + "'", long44 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        boolean boolean19 = dateTimeField18.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.millis();
        org.joda.time.Chronology chronology47 = chronology18.withUTC();
        org.joda.time.DurationField durationField48 = chronology47.hours();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.centuryOfEra();
        long long40 = dateTimeField38.roundHalfEven(14401982L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 946684800000L + "'", long40 == 946684800000L);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField19.getAsText(readablePartial21, (int) 'x', locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology16, locale25, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        java.util.Locale locale33 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology31, locale33, (java.lang.Integer) 12, (int) (byte) 10);
        java.util.Set<java.lang.String> strSet37 = locale33.getUnicodeLocaleKeys();
        dateTimeParserBucket5.saveField(dateTimeFieldType10, "\u65e5\u672c", locale33);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = chronology56.hours();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder61 = builder59.setLocale(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        java.lang.String str74 = locale60.getDisplayLanguage(locale70);
        java.lang.String str75 = locale60.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology56, locale60);
        org.joda.time.DurationField durationField77 = chronology56.years();
        org.joda.time.DateTimeField dateTimeField78 = chronology56.dayOfMonth();
        long long82 = chronology56.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology84 = null;
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology84, locale85, (java.lang.Integer) 1);
        java.lang.Object obj88 = dateTimeParserBucket87.saveState();
        long long89 = dateTimeParserBucket87.computeMillis();
        java.lang.Object obj90 = dateTimeParserBucket87.saveState();
        dateTimeParserBucket87.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTimeParserBucket87.getZone();
        org.joda.time.Chronology chronology94 = chronology56.withZone(dateTimeZone93);
        boolean boolean95 = dateTimeFieldType10.isSupported(chronology56);
        org.joda.time.DateTimeField dateTimeField96 = chronology56.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial97 = null;
        int int98 = dateTimeField96.getMinimumValue(readablePartial97);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "120" + "'", str28, "120");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals(locale33.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "cinese (Cina)" + "'", str69, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tedesco" + "'", str74, "tedesco");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "deu" + "'", str75, "deu");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 22L + "'", long82 == 22L);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        int int21 = dateTimeParserBucket15.getOffset();
        long long24 = dateTimeParserBucket15.computeMillis(true, "Japon");
        java.lang.Object obj25 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str27 = dateTimeFieldType26.toString();
        java.lang.String str28 = dateTimeFieldType26.toString();
        java.lang.String str29 = dateTimeFieldType26.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        org.joda.time.DurationField durationField49 = chronology47.hours();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology47, locale50, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField53 = chronology47.centuries();
        org.joda.time.DurationField durationField54 = chronology47.years();
        org.joda.time.DateTimeField dateTimeField55 = chronology47.secondOfMinute();
        org.joda.time.DurationField durationField56 = chronology47.hours();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType26.getField(chronology47);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology60, locale61, (java.lang.Integer) 1);
        java.lang.Object obj64 = dateTimeParserBucket63.saveState();
        long long65 = dateTimeParserBucket63.computeMillis();
        long long68 = dateTimeParserBucket63.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket63.saveField(dateTimeFieldType69, 2922789);
        dateTimeParserBucket63.setOffset((java.lang.Integer) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeParserBucket63.getZone();
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone74.isLocalDateTimeGap(localDateTime75);
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder79 = builder77.setLocale(locale78);
        java.util.Locale locale81 = new java.util.Locale("China");
        java.util.Locale.Builder builder82 = builder79.setLocale(locale81);
        java.util.Locale.Builder builder84 = builder82.addUnicodeLocaleAttribute("French");
        java.util.Locale locale85 = builder82.build();
        java.lang.String str86 = locale85.getDisplayScript();
        boolean boolean87 = dateTimeZone74.equals((java.lang.Object) locale85);
        dateTimeParserBucket15.saveField(dateTimeFieldType26, "78", locale85);
        java.lang.Integer int89 = dateTimeParserBucket15.getOffsetInteger();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hourOfDay" + "'", str27, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hourOfDay" + "'", str28, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hourOfDay" + "'", str29, "hourOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals(locale81.toString(), "china");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "china__#u-french");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(int89);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology16, locale17, (java.lang.Integer) 1);
        java.lang.Object obj20 = dateTimeParserBucket19.saveState();
        long long21 = dateTimeParserBucket19.computeMillis();
        dateTimeParserBucket19.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        dateTimeParserBucket19.saveField(dateTimeFieldType24, "zh_CN", locale28);
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale13.getDisplayVariant(locale28);
        java.lang.String str32 = locale13.toLanguageTag();
        java.lang.String str33 = locale13.getISO3Language();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology35, locale36, (java.lang.Integer) 1);
        java.lang.Object obj39 = dateTimeParserBucket38.saveState();
        long long40 = dateTimeParserBucket38.computeMillis();
        long long43 = dateTimeParserBucket38.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int48 = dateTimeField46.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology52, locale53, (java.lang.Integer) 1);
        java.lang.String str56 = locale53.getScript();
        java.lang.String str57 = dateTimeField46.getAsShortText(readablePartial49, (int) ' ', locale53);
        boolean boolean58 = dateTimeField46.isLenient();
        dateTimeParserBucket38.saveField(dateTimeField46, 10);
        long long62 = dateTimeParserBucket38.computeMillis(true);
        java.lang.Object obj63 = dateTimeParserBucket38.saveState();
        java.util.Locale locale64 = dateTimeParserBucket38.getLocale();
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.lang.String str66 = locale13.getDisplayScript(locale64);
        java.lang.String str67 = locale64.getDisplayScript();
        java.lang.String str68 = locale64.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = locale64.getUnicodeLocaleType("Germany");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Germany");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr-FR" + "'", str32, "fr-FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fra" + "'", str33, "fra");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "32" + "'", str57, "32");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-61851600000000L) + "'", long62 == (-61851600000000L));
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.hours();
        org.joda.time.DurationField durationField47 = chronology18.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Cina)" + "'", str11, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        java.util.Locale locale3 = new java.util.Locale("millisOfSecond", "en_US", "fr-FR");
        java.util.Locale.setDefault(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getUnicodeLocaleType("ja-JP");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ja-JP");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "millisofsecond_EN_US_fr-FR");
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField19.getAsText(readablePartial21, (int) 'x', locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology16, locale25, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        java.util.Locale locale33 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology31, locale33, (java.lang.Integer) 12, (int) (byte) 10);
        java.util.Set<java.lang.String> strSet37 = locale33.getUnicodeLocaleKeys();
        dateTimeParserBucket5.saveField(dateTimeFieldType10, "\u65e5\u672c", locale33);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = chronology56.hours();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder61 = builder59.setLocale(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        java.lang.String str74 = locale60.getDisplayLanguage(locale70);
        java.lang.String str75 = locale60.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology56, locale60);
        org.joda.time.DurationField durationField77 = chronology56.years();
        org.joda.time.DateTimeField dateTimeField78 = chronology56.dayOfMonth();
        long long82 = chronology56.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology84 = null;
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology84, locale85, (java.lang.Integer) 1);
        java.lang.Object obj88 = dateTimeParserBucket87.saveState();
        long long89 = dateTimeParserBucket87.computeMillis();
        java.lang.Object obj90 = dateTimeParserBucket87.saveState();
        dateTimeParserBucket87.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTimeParserBucket87.getZone();
        org.joda.time.Chronology chronology94 = chronology56.withZone(dateTimeZone93);
        boolean boolean95 = dateTimeFieldType10.isSupported(chronology56);
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType97 = dateTimeFieldType10.getDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "120" + "'", str28, "120");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals(locale33.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese (China)" + "'", str69, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tedesco" + "'", str74, "tedesco");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "deu" + "'", str75, "deu");
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 22L + "'", long82 == 22L);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertNotNull(durationFieldType97);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.era();
        int int25 = dateTimeField23.get(31450200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.Chronology chronology27 = chronology17.withUTC();
        org.joda.time.DurationField durationField28 = chronology17.centuries();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology17.getZone();
        java.lang.String str30 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        int int21 = dateTimeField19.getLeapAmount(11400999L);
        int int22 = dateTimeField19.getMinimumValue();
        long long25 = dateTimeField19.addWrapField((-16725225600001L), 999);
        long long27 = dateTimeField19.roundHalfEven(967957200009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-107546054400001L) + "'", long25 == (-107546054400001L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62135596800000L) + "'", long27 == (-62135596800000L));
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        long long43 = chronology17.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology45, locale46, (java.lang.Integer) 1);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        long long50 = dateTimeParserBucket48.computeMillis();
        java.lang.Object obj51 = dateTimeParserBucket48.saveState();
        dateTimeParserBucket48.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = chronology17.withZone(dateTimeZone54);
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder58 = builder56.setLocale(locale57);
        java.util.Locale locale60 = new java.util.Locale("China");
        java.util.Locale.Builder builder61 = builder58.setLocale(locale60);
        java.util.Locale.Builder builder63 = builder61.addUnicodeLocaleAttribute("French");
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder66 = builder63.setLanguageTag("Japan");
        java.util.Locale.Builder builder68 = builder66.setLanguage("German");
        boolean boolean69 = dateTimeZone54.equals((java.lang.Object) "German");
        java.lang.String str71 = dateTimeZone54.getShortName((long) (-4200000));
        int int73 = dateTimeZone54.getOffsetFromLocal(946689000000L);
        long long76 = dateTimeZone54.adjustOffset((-937968L), true);
        int int78 = dateTimeZone54.getStandardOffset((-129503000L));
        java.lang.String str80 = dateTimeZone54.getNameKey((-61826163960000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals(locale60.toString(), "china");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-937968L) + "'", long76 == (-937968L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        long long21 = chronology16.add(31536000000L, 6048000052L, 99);
        org.joda.time.DurationField durationField22 = chronology16.centuries();
        org.joda.time.DurationField durationField23 = chronology16.months();
        org.joda.time.DurationField durationField24 = chronology16.hours();
        org.joda.time.DurationField durationField25 = chronology16.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 630288005148L + "'", long21 == 630288005148L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology4, locale5, (java.lang.Integer) 1);
        java.lang.Object obj8 = dateTimeParserBucket7.saveState();
        long long9 = dateTimeParserBucket7.computeMillis();
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        dateTimeParserBucket7.saveField(dateTimeFieldType12, "zh_CN", locale16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology19, locale20, (java.lang.Integer) 1);
        java.lang.Object obj23 = dateTimeParserBucket22.saveState();
        long long24 = dateTimeParserBucket22.computeMillis();
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        dateTimeParserBucket22.saveField(dateTimeFieldType27, "zh_CN", locale31);
        java.lang.String str33 = locale31.getVariant();
        java.lang.String str34 = locale16.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale16);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean41 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayName(locale46);
        java.lang.String str49 = dateTimeField40.getAsText(readablePartial42, (int) 'x', locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology37, locale46, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.clockhourOfHalfday();
        int int56 = dateTimeField55.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61);
        java.lang.Integer int65 = dateTimeParserBucket64.getPivotYear();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology67, locale68, (java.lang.Integer) 1);
        java.lang.Object obj71 = dateTimeParserBucket70.saveState();
        long long72 = dateTimeParserBucket70.computeMillis();
        dateTimeParserBucket70.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType75.getField(chronology76);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        dateTimeParserBucket70.saveField(dateTimeFieldType75, "zh_CN", locale79);
        boolean boolean81 = dateTimeParserBucket64.restoreState((java.lang.Object) locale79);
        java.lang.String str82 = dateTimeField55.getAsShortText(readablePartial57, (int) 'a', locale79);
        java.util.Set<java.lang.Character> charSet83 = locale79.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale79);
        java.util.Locale locale85 = java.util.Locale.getDefault(category0);
        java.util.Locale locale86 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "millisofsecond_EN_US_fr-FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "millisofsecond_EN_US_fr-FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "120" + "'", str49, "120");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "97" + "'", str82, "97");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.adjustOffset(31L, false);
        int int9 = dateTimeZone1.getStandardOffset((long) 9);
        long long11 = dateTimeZone1.nextTransition((long) 100);
        boolean boolean13 = dateTimeZone1.isStandardOffset((long) (byte) 0);
        java.lang.String str15 = dateTimeZone1.getName((-259200000L));
        java.lang.String str17 = dateTimeZone1.getNameKey(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int23 = dateTimeField21.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField24 = dateTimeField21.getDurationField();
        int int26 = dateTimeField21.getMaximumValue((long) (short) 1);
        long long28 = dateTimeField21.roundHalfEven((long) ' ');
        int int30 = dateTimeField21.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale35 = new java.util.Locale("", "Chinese (China)");
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = dateTimeField21.getAsShortText(readablePartial31, (int) (short) -1, locale35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        boolean boolean44 = dateTimeField43.isLenient();
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale47.getDisplayName(locale49);
        java.lang.String str52 = dateTimeField43.getAsText(readablePartial45, (int) 'x', locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology40, locale49, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekOfWeekyear();
        org.joda.time.DurationField durationField57 = chronology55.hours();
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder60 = builder58.setLocale(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        boolean boolean64 = dateTimeField63.isLenient();
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale67.getDisplayName();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale67.getDisplayName(locale69);
        java.lang.String str72 = dateTimeField63.getAsText(readablePartial65, (int) 'x', locale69);
        java.lang.String str73 = locale59.getDisplayLanguage(locale69);
        java.lang.String str74 = locale59.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology55, locale59);
        java.lang.String str76 = locale35.getDisplayScript(locale59);
        java.lang.String str77 = locale35.getLanguage();
        java.util.Set<java.lang.String> strSet78 = locale35.getUnicodeLocaleKeys();
        java.lang.String str79 = dateTimeZone1.getName((-16724929080000L), locale35);
        java.lang.String str80 = locale35.getDisplayScript();
        boolean boolean81 = locale35.hasExtensions();
        java.lang.String str82 = locale35.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31L + "'", long7 == 31L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals(locale35.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "120" + "'", str52, "120");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese (China)" + "'", str68, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "cinese (Cina)" + "'", str71, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "120" + "'", str72, "120");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tedesco" + "'", str73, "tedesco");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "deu" + "'", str74, "deu");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "CHINESE (CHINA)" + "'", str82, "CHINESE (CHINA)");
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology17.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = dateTimeField19.getAsShortText((long) 999, locale22);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getVariant();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale31 = new java.util.Locale("", "tedesco");
        java.lang.String str32 = locale26.getDisplayScript(locale31);
        java.lang.String str33 = locale26.getDisplayCountry();
        java.lang.String str34 = dateTimeField19.getAsShortText((long) 366, locale26);
        long long36 = dateTimeField19.roundHalfFloor(4039377000000L);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeField19.set((long) 2067, 115200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 115200000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AD" + "'", str24, "AD");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale31.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Italia" + "'", str33, "Italia");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dopo Cristo" + "'", str34, "dopo Cristo");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-62135596800000L) + "'", long36 == (-62135596800000L));
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3);
        java.lang.Integer int7 = dateTimeParserBucket6.getPivotYear();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        java.util.Locale locale26 = dateTimeParserBucket25.getLocale();
        java.lang.String str27 = locale26.getDisplayCountry();
        java.lang.String str28 = locale26.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1910, chronology8, locale26);
        org.joda.time.DateTimeField dateTimeField30 = chronology8.halfdayOfDay();
        long long34 = chronology8.add((-61826163958030L), (-16383409933L), 52);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italia" + "'", str27, "Italia");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ITA" + "'", str28, "ITA");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62678101274546L) + "'", long34 == (-62678101274546L));
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String str31 = dateTimeFieldType30.toString();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getDisplayName();
        dateTimeParserBucket4.saveField(dateTimeFieldType30, "", locale33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone37.getMillisKeepLocal(dateTimeZone38, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        int int43 = dateTimeZone38.getOffsetFromLocal(9223371985593600012L);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        dateTimeParserBucket4.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket4.getZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "yearOfEra" + "'", str31, "yearOfEra");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco (Germania)" + "'", str35, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone46);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset(65196662400000L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long8 = dateTimeZone5.getMillisKeepLocal(dateTimeZone6, 1L);
        long long11 = dateTimeZone6.adjustOffset(1L, true);
        boolean boolean12 = dateTimeZone6.isFixed();
        long long14 = dateTimeZone6.convertUTCToLocal((long) 100);
        java.util.Locale locale17 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int22 = dateTimeField20.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField23 = dateTimeField20.getDurationField();
        int int25 = dateTimeField20.getMaximumValue((long) (short) 1);
        long long27 = dateTimeField20.roundHalfEven((long) ' ');
        int int29 = dateTimeField20.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale34 = new java.util.Locale("", "Chinese (China)");
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String str36 = dateTimeField20.getAsShortText(readablePartial30, (int) (short) -1, locale34);
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = dateTimeField20.getAsShortText((long) (byte) 100, locale38);
        java.lang.String str41 = locale17.getDisplayLanguage(locale38);
        java.lang.String str42 = dateTimeZone6.getName((long) 9, locale38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        long long46 = dateTimeZone43.getMillisKeepLocal(dateTimeZone44, 1L);
        int int48 = dateTimeZone43.getOffsetFromLocal((long) (short) 0);
        int int50 = dateTimeZone43.getOffsetFromLocal(4200000L);
        long long53 = dateTimeZone43.adjustOffset((long) 100, true);
        int int55 = dateTimeZone43.getOffsetFromLocal((long) 0);
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone43.getOffset(readableInstant56);
        long long59 = dateTimeZone6.getMillisKeepLocal(dateTimeZone43, (-58979923200001L));
        int int61 = dateTimeZone6.getOffset(4200000L);
        long long64 = dateTimeZone6.convertLocalToUTC((long) 19, false);
        int int66 = dateTimeZone6.getOffsetFromLocal(420767L);
        long long68 = dateTimeZone2.getMillisKeepLocal(dateTimeZone6, 19166340000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals(locale17.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals(locale34.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "china" + "'", str41, "china");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-58979923200001L) + "'", long59 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 19L + "'", long64 == 19L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 19166940000L + "'", long68 == 19166940000L);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long24 = dateTimeField22.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField22.getMaximumValue(readablePartial25);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = dateTimeField22.getAsShortText(0L, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale28);
        org.joda.time.DateTimeField dateTimeField35 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology17.dayOfYear();
        long long40 = chronology17.add(60000L, (long) 999, 100);
        org.joda.time.DateTimeField dateTimeField41 = chronology17.yearOfCentury();
        boolean boolean42 = dateTimeField41.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 159900L + "'", long40 == 159900L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology16.getZone();
        long long22 = dateTimeZone19.adjustOffset(100800000L, true);
        boolean boolean23 = dateTimeZone19.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100800000L + "'", long22 == 100800000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology18.weekyearOfCentury();
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale53 = new java.util.Locale("UTC");
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        java.lang.String str58 = locale54.getDisplayCountry();
        java.lang.String str59 = locale53.getDisplayCountry(locale54);
        boolean boolean60 = locale53.hasExtensions();
        java.util.Locale.setDefault(category50, locale53);
        java.util.Locale locale63 = new java.util.Locale("Chinook jargon");
        java.lang.String str65 = locale63.getExtension('x');
        java.util.Locale.setDefault(category50, locale63);
        java.lang.String str67 = locale63.getDisplayVariant();
        java.lang.String str68 = locale63.getScript();
        int int69 = dateTimeField49.getMaximumTextLength(locale63);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale53.toString(), "utc");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japan" + "'", str58, "Japan");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "chinook jargon");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getPivotYear();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        java.lang.String str33 = dateTimeZone28.getNameKey((long) '#');
        long long37 = dateTimeZone28.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str39 = dateTimeZone28.getNameKey((-58979923200001L));
        java.lang.String str41 = dateTimeZone28.getShortName((long) (byte) -1);
        java.lang.String str43 = dateTimeZone28.getName((long) 9);
        dateTimeParserBucket25.setZone(dateTimeZone28);
        org.joda.time.Chronology chronology45 = chronology16.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField46 = chronology16.months();
        org.joda.time.DurationField durationField47 = chronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = chronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology16.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.dayOfWeek();
        java.lang.String str46 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology18.hourOfHalfday();
        org.joda.time.DurationField durationField52 = dateTimeField51.getRangeDurationField();
        org.joda.time.DurationField durationField53 = dateTimeField51.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = dateTimeField2.getType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        long long10 = dateTimeField8.roundHalfEven(0L);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale24, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        java.util.Locale locale32 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology30, locale32, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.year();
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.ReadablePartial readablePartial44 = null;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale46.getDisplayName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField42.getAsText(readablePartial44, (int) 'x', locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology39, locale48, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial57 = null;
        int[] intArray58 = null;
        int int59 = dateTimeField56.getMinimumValue(readablePartial57, intArray58);
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int66 = dateTimeField64.getLeapAmount((long) 0);
        int int68 = dateTimeField64.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial69 = null;
        int[] intArray74 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int75 = dateTimeField64.getMaximumValue(readablePartial69, intArray74);
        int[] intArray77 = dateTimeField56.add(readablePartial60, (int) 'a', intArray74, (int) (short) 0);
        int int78 = dateTimeField36.getMaximumValue(readablePartial37, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField8.addWrapField(readablePartial11, (-59), intArray74, 865746);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals(locale32.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cinese (Cina)" + "'", str50, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 292278993 + "'", int78 == 292278993);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        long long22 = dateTimeField19.addWrapField((long) 81, 1969);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = dateTimeField19.getAsShortText((int) (byte) 10, locale24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone29.getMillisKeepLocal(dateTimeZone30, 1L);
        int int34 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        boolean boolean35 = dateTimeZone29.isFixed();
        long long38 = dateTimeZone29.adjustOffset(0L, true);
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone29.getOffset(readableInstant39);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        java.util.Locale.Builder builder45 = builder42.clearExtensions();
        java.util.Locale locale46 = builder45.build();
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = locale46.toLanguageTag();
        java.util.Locale locale50 = new java.util.Locale("CHN");
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str52 = locale46.getDisplayName(locale50);
        java.lang.String str53 = dateTimeZone29.getName(0L, locale46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        boolean boolean59 = dateTimeField58.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = dateTimeField58.getAsText(readablePartial60, (int) 'x', locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology55, locale64, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.seconds();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.yearOfEra();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.yearOfEra();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.monthOfYear();
        org.joda.time.DurationField durationField75 = chronology70.weekyears();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = chronology70.add(readablePeriod76, 1344L, 4);
        org.joda.time.DateTimeField dateTimeField80 = chronology70.dayOfYear();
        java.util.Locale locale85 = new java.util.Locale("giapponese", "888", "AM");
        java.util.Locale locale87 = new java.util.Locale("en_GB");
        java.lang.String str88 = locale85.getDisplayScript(locale87);
        java.lang.String str89 = dateTimeField80.getAsShortText((-62104024800000L), locale87);
        java.lang.String str90 = locale46.getDisplayVariant(locale87);
        java.lang.String str91 = locale87.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = dateTimeField19.getAsText(readablePartial27, (int) 'u', locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2678400081L + "'", long22 == 2678400081L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Okt" + "'", str26, "Okt");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "de-DE" + "'", str48, "de-DE");
        org.junit.Assert.assertEquals(locale50.toString(), "chn");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinook jargon" + "'", str51, "Chinook jargon");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "German (Germany)" + "'", str52, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "cinese (Cina)" + "'", str66, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "120" + "'", str67, "120");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1344L + "'", long79 == 1344L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals(locale85.toString(), "giapponese_888_AM");
        org.junit.Assert.assertEquals(locale87.toString(), "en_gb");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "en_gb" + "'", str91, "en_gb");
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        org.joda.time.DurationField durationField50 = chronology45.years();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType28.getField(chronology45);
        org.joda.time.DateTimeField dateTimeField52 = chronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType27.getField(chronology45);
        org.joda.time.DateTimeField dateTimeField54 = chronology45.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyear();
        long long30 = dateTimeField28.roundHalfCeiling((long) 1982);
        long long33 = dateTimeField28.add(292278782L, 0);
        java.util.Locale locale38 = new java.util.Locale("Chinese (China)", "\u4e2d\u6587\u4e2d\u570b)", "");
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = dateTimeField28.getAsShortText((-1789L), locale38);
        java.lang.String str41 = locale38.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-259200000L) + "'", long30 == (-259200000L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 292278782L + "'", long33 == 292278782L);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "\u4e2d\u6587\u4e2d\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587\u4e2d\u570b))" + "'", str39, "\u4e2d\u6587\u4e2d\u570b))");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u4e2d\u570b))" + "'", str41, "\u4e2d\u6587\u4e2d\u570b))");
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = dateTimeZone9.getShortName((long) 100, locale14);
        dateTimeParserBucket4.setZone(dateTimeZone9);
        dateTimeParserBucket4.setOffset(10);
        java.util.Locale locale21 = dateTimeParserBucket4.getLocale();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology23, locale24, (java.lang.Integer) 1);
        java.lang.Object obj27 = dateTimeParserBucket26.saveState();
        long long28 = dateTimeParserBucket26.computeMillis();
        java.lang.Object obj29 = dateTimeParserBucket26.saveState();
        dateTimeParserBucket26.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket26.getZone();
        long long36 = dateTimeZone32.convertLocalToUTC(18L, false, 0L);
        dateTimeParserBucket4.setZone(dateTimeZone32);
        long long39 = dateTimeParserBucket4.computeMillis(false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 18L + "'", long36 == 18L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-11L) + "'", long39 == (-11L));
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int[] intArray30 = null;
        int int31 = dateTimeField28.getMinimumValue(readablePartial29, intArray30);
        long long34 = dateTimeField28.addWrapField((long) 1, 12);
        dateTimeParserBucket4.saveField(dateTimeField28, 9);
        long long38 = dateTimeParserBucket4.computeMillis(false);
        long long40 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone41.getMillisKeepLocal(dateTimeZone42, 1L);
        java.lang.String str45 = dateTimeZone42.getID();
        long long48 = dateTimeZone42.adjustOffset(31L, false);
        int int50 = dateTimeZone42.getStandardOffset((long) 9);
        long long52 = dateTimeZone42.nextTransition((long) 100);
        boolean boolean53 = dateTimeZone42.isFixed();
        dateTimeParserBucket4.setZone(dateTimeZone42);
        java.lang.Integer int55 = dateTimeParserBucket4.getOffsetInteger();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getRangeDurationType();
        java.util.Locale locale63 = new java.util.Locale("japonais (Japon)", "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)", "cinese");
        java.lang.String str64 = locale63.getDisplayCountry();
        dateTimeParserBucket4.saveField(dateTimeFieldType56, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", locale63);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType56.getRangeDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 378691200001L + "'", long34 == 378691200001L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1893456000001L) + "'", long38 == (-1893456000001L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1893456000001L) + "'", long40 == (-1893456000001L));
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 31L + "'", long48 == 31L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)_cinese");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str64, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(durationFieldType66);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        long long7 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj8 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        boolean boolean30 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("117");
        java.lang.String str35 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 99, chronology27, locale34, (java.lang.Integer) 360000000);
        org.joda.time.DateTimeField dateTimeField38 = chronology27.hourOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale locale8 = builder3.build();
        java.lang.String str9 = locale8.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "German" + "'", str9, "German");
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale3, locale5, locale8, locale10, locale12, locale14, locale16, locale18, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.String[] strArray30 = new java.lang.String[] { "it", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.seconds();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.clockhourOfHalfday();
        int int54 = dateTimeField53.getMaximumValue();
        long long56 = dateTimeField53.roundHalfEven(3061065600000L);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59);
        java.lang.Integer int63 = dateTimeParserBucket62.getPivotYear();
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology65, locale66, (java.lang.Integer) 1);
        java.lang.Object obj69 = dateTimeParserBucket68.saveState();
        long long70 = dateTimeParserBucket68.computeMillis();
        dateTimeParserBucket68.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType73.getField(chronology74);
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        dateTimeParserBucket68.saveField(dateTimeFieldType73, "zh_CN", locale77);
        boolean boolean79 = dateTimeParserBucket62.restoreState((java.lang.Object) locale77);
        int int80 = dateTimeField53.getMaximumShortTextLength(locale77);
        java.util.Set<java.lang.String> strSet81 = locale77.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap83);
        java.util.Collection<java.lang.String> strCollection85 = null;
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList84, strCollection85);
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str88 = locale87.getDisplayCountry();
        java.util.Locale locale89 = java.util.Locale.US;
        java.lang.String str90 = locale89.getISO3Country();
        java.lang.String str91 = locale87.getDisplayScript(locale89);
        java.lang.String str93 = locale89.getExtension('x');
        java.lang.String str94 = locale89.getVariant();
        java.util.Set<java.lang.String> strSet95 = locale89.getUnicodeLocaleKeys();
        java.lang.String str96 = java.util.Locale.lookupTag(languageRangeList84, (java.util.Collection<java.lang.String>) strSet95);
        java.lang.Class<?> wildcardClass97 = strSet95.getClass();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "China" + "'", str4, "China");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "China" + "'", str9, "China");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "China" + "'", str15, "China");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3061065600000L + "'", long56 == 3061065600000L);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(languageRangeList84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "China" + "'", str88, "China");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "USA" + "'", str90, "USA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.DurationField durationField4 = dateTimeField2.getDurationField();
        long long7 = dateTimeField2.set(1L, (int) (short) 0);
        java.lang.String str8 = dateTimeField2.toString();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        long long14 = dateTimeZone11.getMillisKeepLocal(dateTimeZone12, 1L);
        long long17 = dateTimeZone12.adjustOffset(1L, true);
        boolean boolean18 = dateTimeZone12.isFixed();
        long long20 = dateTimeZone12.convertUTCToLocal((long) 100);
        java.util.TimeZone timeZone21 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long24 = dateTimeZone22.convertUTCToLocal((long) (short) 0);
        java.util.Locale locale27 = new java.util.Locale("cinese (Cina)");
        java.lang.String str28 = dateTimeZone22.getShortName(0L, locale27);
        java.lang.String str29 = dateTimeField2.getAsShortText(readablePartial9, (int) (byte) 0, locale27);
        java.lang.String str30 = locale27.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str8, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals(locale27.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int30 = dateTimeField28.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField31 = dateTimeField28.getDurationField();
        int int33 = dateTimeField28.getMaximumValue((long) (short) 1);
        long long35 = dateTimeField28.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder42 = builder38.clearExtensions();
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = dateTimeField28.getAsShortText(readablePartial36, (int) (byte) 100, locale43);
        java.lang.String str45 = locale43.getISO3Language();
        java.lang.String str46 = dateTimeField24.getAsShortText(1439, locale43);
        java.lang.String str47 = locale43.getVariant();
        java.util.Set<java.lang.String> strSet48 = locale43.getUnicodeLocaleKeys();
        java.lang.String str49 = locale43.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1439" + "'", str46, "1439");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str1 = dateTimeFieldType0.toString();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean9 = dateTimeField8.isLenient();
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = dateTimeField8.getAsText(readablePartial10, (int) 'x', locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology5, locale14, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = chronology20.hours();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology20, locale23, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField26 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology20.hourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType0.getField(chronology20);
        org.joda.time.DurationField durationField35 = chronology20.days();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = chronology20.get(readablePeriod36, 31535996180L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "secondOfDay" + "'", str1, "secondOfDay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "secondOfDay" + "'", str2, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese (Cina)" + "'", str16, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "120" + "'", str17, "120");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 1970);
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 2077);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.weekyearOfCentury();
        int int51 = dateTimeField48.getDifference((-186339L), (-262740000L));
        boolean boolean52 = dateTimeParserBucket22.restoreState((java.lang.Object) dateTimeField48);
        long long55 = dateTimeField48.addWrapField(62577446398561L, 93600000);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 62577446398561L + "'", long55 == 62577446398561L);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("31535999", (double) 11400999L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.1400999E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long24 = chronology18.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology43, locale46, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField49 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.hourOfDay();
        org.joda.time.DurationField durationField51 = chronology43.weeks();
        org.joda.time.DurationField durationField52 = chronology43.millis();
        org.joda.time.Chronology chronology53 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType0.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.yearOfCentury();
        java.lang.String str57 = dateTimeField55.getAsShortText(420767L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1958L + "'", long24 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "70" + "'", str57, "70");
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        int int7 = dateTimeField2.getMaximumValue((long) (short) 1);
        long long9 = dateTimeField2.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeField2.getAsShortText(readablePartial10, (int) (byte) 100, locale17);
        java.lang.String str19 = locale17.getISO3Language();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology23, locale32, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField40 = chronology38.hours();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder41.setLocale(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        java.lang.String str56 = locale42.getDisplayLanguage(locale52);
        java.lang.String str57 = locale42.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology38, locale42);
        org.joda.time.DateTimeField dateTimeField59 = chronology38.minuteOfHour();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(97L, chronology38, locale60, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField65 = chronology38.dayOfWeek();
        java.lang.String str66 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField69 = chronology38.minutes();
        org.joda.time.DurationField durationField70 = chronology38.centuries();
        org.joda.time.DateTimeField dateTimeField71 = chronology38.secondOfMinute();
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology73, locale74, (java.lang.Integer) 1);
        java.lang.Object obj77 = dateTimeParserBucket76.saveState();
        long long78 = dateTimeParserBucket76.computeMillis();
        java.lang.Object obj79 = dateTimeParserBucket76.saveState();
        dateTimeParserBucket76.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket76.setOffset((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType84.getField(chronology85);
        int int88 = dateTimeField86.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField89 = dateTimeField86.getDurationField();
        java.lang.String str90 = dateTimeField86.toString();
        dateTimeParserBucket76.saveField(dateTimeField86, (int) (byte) 10);
        java.util.Locale locale93 = dateTimeParserBucket76.getLocale();
        java.util.Locale locale94 = dateTimeParserBucket76.getLocale();
        java.lang.String str95 = locale94.getCountry();
        int int96 = dateTimeField71.getMaximumTextLength(locale94);
        java.lang.String str97 = locale17.getDisplayScript(locale94);
        boolean boolean98 = locale17.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (China)" + "'", str51, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tedesco" + "'", str56, "tedesco");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "deu" + "'", str57, "deu");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[UTC]" + "'", str66, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "DateTimeField[yearOfEra]" + "'", str90, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "de");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "de");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        int int40 = dateTimeField38.getLeapAmount(115200035L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int10 = dateTimeField8.getLeapAmount((long) 0);
        int int12 = dateTimeField8.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray18 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int19 = dateTimeField8.getMaximumValue(readablePartial13, intArray18);
        int int20 = dateTimeField8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField8.getType();
        java.util.Locale locale26 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        dateTimeParserBucket5.saveField(dateTimeFieldType21, "120", locale26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.monthOfYear();
        boolean boolean50 = dateTimeFieldType21.isSupported(chronology45);
        org.joda.time.DurationField durationField51 = chronology45.halfdays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        boolean boolean57 = dateTimeField56.isLenient();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayName();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale60.getDisplayName(locale62);
        java.lang.String str65 = dateTimeField56.getAsText(readablePartial58, (int) 'x', locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology53, locale62, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.centuryOfEra();
        java.util.Locale locale75 = new java.util.Locale("1970");
        java.lang.String str76 = dateTimeField72.getAsShortText((-61062681600000L), locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(1958L, chronology45, locale75, (java.lang.Integer) 0);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = chronology45.get(readablePeriod79, 31535999946L, 967770600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese (China)" + "'", str61, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "it" + "'", str63, "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cinese (Cina)" + "'", str64, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "120" + "'", str65, "120");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals(locale75.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0" + "'", str76, "0");
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        java.util.Locale locale3 = new java.util.Locale("yearOfCentury", "ita", "DateTimeField[clockhourOfDay]");
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "yearofcentury_ITA_DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearofcentury" + "'", str4, "yearofcentury");
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("ja_jp (CHINESE (CHINA),USA)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ja_jp (CHINESE (CHINA),USA) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale10 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setLanguageTag("4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.hourOfDay();
        org.joda.time.Chronology chronology24 = chronology16.withUTC();
        org.joda.time.DurationField durationField25 = chronology16.years();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = chronology16.get(readablePeriod26, (-292260000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        java.util.Locale locale38 = dateTimeParserBucket37.getLocale();
        java.util.Locale locale39 = dateTimeParserBucket37.getLocale();
        java.util.Locale locale40 = dateTimeParserBucket37.getLocale();
        java.lang.String str42 = locale40.getUnicodeLocaleType("fr");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = locale40.getUnicodeLocaleType("\u5fb7\u6587\u5fb7\u570b)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ?? (??)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        long long18 = dateTimeParserBucket16.computeMillis();
        int int19 = dateTimeParserBucket16.getOffset();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.yearOfEra();
        boolean boolean45 = dateTimeField43.isLeap((-31531800000L));
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = dateTimeField43.getAsText(1439, locale47);
        java.util.Locale.setDefault(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        boolean boolean57 = dateTimeField56.isLenient();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayName();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale60.getDisplayName(locale62);
        java.lang.String str65 = dateTimeField56.getAsText(readablePartial58, (int) 'x', locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology53, locale62, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekOfWeekyear();
        org.joda.time.DurationField durationField70 = chronology68.hours();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder73 = builder71.setLocale(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        boolean boolean77 = dateTimeField76.isLenient();
        org.joda.time.ReadablePartial readablePartial78 = null;
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str81 = locale80.getDisplayName();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale82.getLanguage();
        java.lang.String str84 = locale80.getDisplayName(locale82);
        java.lang.String str85 = dateTimeField76.getAsText(readablePartial78, (int) 'x', locale82);
        java.lang.String str86 = locale72.getDisplayLanguage(locale82);
        java.lang.String str87 = locale72.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology68, locale72);
        org.joda.time.DateTimeField dateTimeField89 = chronology68.minuteOfHour();
        org.joda.time.Chronology chronology90 = chronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.millisOfDay();
        java.util.Locale locale93 = java.util.Locale.UK;
        java.lang.String str94 = dateTimeField91.getAsText((long) 1910, locale93);
        java.lang.String str95 = dateTimeField91.getName();
        dateTimeParserBucket50.saveField(dateTimeField91, (-715580));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1439" + "'", str48, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str61, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "it" + "'", str63, "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "cinese (Cina)" + "'", str64, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "120" + "'", str65, "120");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str81, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "it" + "'", str83, "it");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "cinese (Cina)" + "'", str84, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "120" + "'", str85, "120");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tedesco" + "'", str86, "tedesco");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "deu" + "'", str87, "deu");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1910" + "'", str94, "1910");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "millisOfDay" + "'", str95, "millisOfDay");
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        boolean boolean44 = dateTimeFieldType21.isSupported(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.weeks();
        org.joda.time.DurationField durationField46 = chronology41.weeks();
        org.joda.time.DurationField durationField47 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        java.lang.Object obj38 = dateTimeParserBucket36.saveState();
        java.lang.Integer int39 = dateTimeParserBucket36.getOffsetInteger();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.centuries();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.Object obj16 = locale13.clone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "fr_FR");
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField39 = chronology18.seconds();
        org.joda.time.Chronology chronology40 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        boolean boolean47 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeField46.getAsText(readablePartial48, (int) 'x', locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology43, locale52, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        dateTimeParserBucket57.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeParserBucket57.getZone();
        long long63 = dateTimeZone61.nextTransition((long) '4');
        org.joda.time.Chronology chronology64 = chronology40.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str51, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese (Cina)" + "'", str54, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "120" + "'", str55, "120");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7);
        java.lang.Integer int11 = dateTimeParserBucket10.getPivotYear();
        long long13 = dateTimeParserBucket10.computeMillis(true);
        java.lang.Integer int14 = dateTimeParserBucket10.getOffsetInteger();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        boolean boolean20 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField19.getAsText(readablePartial21, (int) 'x', locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology16, locale25, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.getMillisKeepLocal(dateTimeZone37, 1L);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.joda.time.Chronology chronology41 = chronology31.withZone(dateTimeZone37);
        boolean boolean42 = dateTimeParserBucket10.restoreState((java.lang.Object) chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        dateTimeParserBucket10.saveField(dateTimeFieldType43, 99);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        boolean boolean52 = dateTimeField51.isLenient();
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale55.getDisplayName(locale57);
        java.lang.String str60 = dateTimeField51.getAsText(readablePartial53, (int) 'x', locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology48, locale57, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = chronology63.hours();
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology63, locale66, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField69 = chronology63.months();
        org.joda.time.DateTimeField dateTimeField70 = chronology63.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField71 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField74 = chronology63.year();
        org.joda.time.DateTimeField dateTimeField75 = chronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = chronology63.monthOfYear();
        org.joda.time.Chronology chronology77 = chronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType43.getField(chronology77);
        java.lang.String str79 = dateTimeFieldType43.toString();
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType43.getDurationType();
        boolean boolean81 = languageRange1.equals((java.lang.Object) dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tw" + "'", str4, "tw");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str24, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "120" + "'", str28, "120");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str56, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it" + "'", str58, "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "cinese (Cina)" + "'", str59, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "120" + "'", str60, "120");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "dayOfMonth" + "'", str79, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        org.joda.time.DurationField durationField54 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField55 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = chronology19.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = dateTimeField2.getType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType6.isSupported(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology28, locale31, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField34 = chronology28.months();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology28.centuries();
        org.joda.time.DurationField durationField37 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology28.halfdayOfDay();
        boolean boolean39 = dateTimeFieldType6.isSupported(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str21, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfDay();
        long long26 = dateTimeField24.roundHalfCeiling((-62104060799990L));
        long long28 = dateTimeField24.roundHalfFloor(28717025191200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62104060800000L) + "'", long26 == (-62104060800000L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 28717025191200000L + "'", long28 == 28717025191200000L);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-292275054), 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int27 = dateTimeField25.getLeapAmount((long) ' ');
        long long29 = dateTimeField25.roundFloor((long) 'x');
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = dateTimeField25.getAsShortText(59, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology18, locale31, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone39.getMillisKeepLocal(dateTimeZone40, 1L);
        int int44 = dateTimeZone40.getOffsetFromLocal((long) (byte) 10);
        long long47 = dateTimeZone40.convertLocalToUTC((long) 1, false);
        org.joda.time.Chronology chronology48 = chronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int53 = dateTimeField51.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField54 = dateTimeField51.getDurationField();
        int int56 = dateTimeField51.getMaximumValue((long) (short) 1);
        long long58 = dateTimeField51.roundHalfEven((long) ' ');
        int int60 = dateTimeField51.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial61 = null;
        int int62 = dateTimeField51.getMaximumValue(readablePartial61);
        int int64 = dateTimeField51.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = dateTimeField51.getAsShortText(readablePartial65, 100, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(4039633920000L, chronology48, locale68, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField74 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField75 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField76 = chronology48.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-31531800000L) + "'", long29 == (-31531800000L));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str32, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 4200000L + "'", long58 == 4200000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292278993 + "'", int62 == 292278993);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "100" + "'", str71, "100");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        org.joda.time.Chronology chronology39 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str30, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        int int31 = dateTimeField30.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField30.getMinimumValue(readablePartial32);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italia", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("USA");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField16 = dateTimeField13.getDurationField();
        int int18 = dateTimeField13.getMaximumValue((long) (short) 1);
        long long20 = dateTimeField13.roundHalfEven((long) ' ');
        int int22 = dateTimeField13.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField13.getMaximumValue(readablePartial23);
        int int26 = dateTimeField13.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = dateTimeField13.getAsShortText(readablePartial27, 100, locale30);
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("zho", strMap40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap45);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale locale48 = java.util.Locale.US;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.util.Set<java.lang.String> strSet58 = locale53.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale61.getDisplayCountry(locale62);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strSet65, filteringMode66);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet58, filteringMode66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str73 = locale72.getDisplayCountry();
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale77.getDisplayCountry();
        java.util.Locale locale79 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str80 = locale79.getDisplayCountry();
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str82 = locale81.getDisplayCountry();
        java.util.Locale locale83 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str84 = locale83.getDisplayCountry();
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.util.Locale locale86 = java.util.Locale.JAPAN;
        java.util.Locale locale87 = java.util.Locale.JAPAN;
        java.lang.String str88 = locale86.getDisplayVariant(locale87);
        java.util.Locale locale89 = java.util.Locale.JAPAN;
        java.util.Locale locale90 = java.util.Locale.JAPAN;
        java.lang.String str91 = locale89.getDisplayVariant(locale90);
        java.util.Locale[] localeArray92 = new java.util.Locale[] { locale72, locale74, locale77, locale79, locale81, locale83, locale85, locale87, locale90 };
        java.util.ArrayList<java.util.Locale> localeList93 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList93, localeArray92);
        java.util.Locale locale95 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale96 = java.util.Locale.lookup(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter(languageRangeList38, (java.util.Collection<java.util.Locale>) localeList93, filteringMode97);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet34, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200000L + "'", long20 == 4200000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str54, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "China" + "'", str73, "China");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "China" + "'", str78, "China");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "China" + "'", str80, "China");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "China" + "'", str82, "China");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "China" + "'", str84, "China");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(localeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(locale95);
        org.junit.Assert.assertNull(locale96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode97.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Country();
        java.lang.String str4 = locale0.getLanguage();
        java.util.Locale locale6 = new java.util.Locale("China");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int11 = dateTimeField9.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField12 = dateTimeField9.getDurationField();
        int int14 = dateTimeField9.getMaximumValue((long) (short) 1);
        long long16 = dateTimeField9.roundHalfEven((long) ' ');
        int int18 = dateTimeField9.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale23 = new java.util.Locale("", "Chinese (China)");
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String str25 = dateTimeField9.getAsShortText(readablePartial19, (int) (short) -1, locale23);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = dateTimeField9.getAsShortText((long) (byte) 100, locale27);
        java.lang.String str30 = locale6.getDisplayLanguage(locale27);
        boolean boolean31 = locale6.hasExtensions();
        java.util.Set<java.lang.String> strSet32 = locale6.getUnicodeLocaleKeys();
        java.lang.String str33 = locale0.getDisplayVariant(locale6);
        java.lang.String str34 = locale6.toLanguageTag();
        java.lang.String str35 = locale6.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese (China)" + "'", str1, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertEquals(locale6.toString(), "china");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4200000L + "'", long16 == 4200000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals(locale23.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1" + "'", str25, "-1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969" + "'", str29, "1969");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "china" + "'", str30, "china");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "china" + "'", str34, "china");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "china" + "'", str35, "china");
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.hourOfDay();
        org.joda.time.DurationField durationField51 = chronology44.minutes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField24 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfDay();
        org.joda.time.DurationField durationField26 = dateTimeField25.getDurationField();
        long long28 = dateTimeField25.roundHalfEven((long) (-213000000));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-213000000L) + "'", long28 == (-213000000L));
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfDay();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(967766400000L, chronology17, locale23, (java.lang.Integer) 70, 0);
        long long32 = chronology17.add(126000081L, (-61062681600000L), 998);
        org.joda.time.DateTimeField dateTimeField33 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology17.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (China)" + "'", str22, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60940556110799919L) + "'", long32 == (-60940556110799919L));
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale locale7 = builder6.build();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        boolean boolean14 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale17.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = dateTimeField13.getAsText(readablePartial15, (int) 'x', locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale19, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.UK;
        dateTimeParserBucket44.saveField(dateTimeFieldType45, "Chinese (China)", locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology25, locale47, (java.lang.Integer) 12, 100);
        java.lang.String str52 = locale47.getDisplayVariant();
        java.util.Set<java.lang.String> strSet53 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale47.getLanguage();
        java.lang.String str55 = locale7.getDisplayCountry(locale47);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = locale7.getDisplayVariant(locale56);
        java.util.Set<java.lang.Character> charSet59 = locale7.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE_Taiwan");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "120" + "'", str22, "120");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Germany" + "'", str55, "Germany");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese (China)" + "'", str57, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Taiwan" + "'", str58, "Taiwan");
        org.junit.Assert.assertNotNull(charSet59);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.Chronology chronology28 = chronology18.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        long long53 = dateTimeZone50.getMillisKeepLocal(dateTimeZone51, 1L);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.Chronology chronology55 = chronology45.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.yearOfEra();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder62 = builder60.setLocale(locale61);
        java.util.Locale locale64 = new java.util.Locale("China");
        java.util.Locale.Builder builder65 = builder62.setLocale(locale64);
        java.util.Locale.Builder builder67 = builder65.addUnicodeLocaleAttribute("French");
        java.util.Locale locale68 = builder65.build();
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = dateTimeField58.getAsText((int) 'x', locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(6048000052L, chronology28, locale68, (java.lang.Integer) 19, (-4200000));
        org.joda.time.DurationField durationField74 = chronology28.hours();
        org.joda.time.DurationField durationField75 = chronology28.centuries();
        boolean boolean76 = dateTimeFieldType0.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField77 = chronology28.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals(locale64.toString(), "china");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "china__#u-french");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "china" + "'", str69, "china");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "120" + "'", str70, "120");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = null;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.lang.String str6 = locale0.getDisplayCountry(locale4);
        java.lang.String str7 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Taiwan" + "'", str6, "Taiwan");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology3, locale4, (java.lang.Integer) 1);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        long long8 = dateTimeParserBucket6.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket6.saveState();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        boolean boolean31 = dateTimeParserBucket6.restoreState((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType1.getField(chronology28);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(1958L, chronology28, locale34, (java.lang.Integer) 1439);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone37.getMillisKeepLocal(dateTimeZone38, 1L);
        java.lang.String str41 = dateTimeZone38.getID();
        long long44 = dateTimeZone38.adjustOffset(31L, false);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = dateTimeZone38.getName((long) 0, locale46);
        java.lang.String str49 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology50 = chronology28.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField51 = chronology50.months();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        long long56 = dateTimeZone53.getMillisKeepLocal(dateTimeZone54, 1L);
        int int58 = dateTimeZone53.getOffsetFromLocal((long) (short) 0);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology60, locale61, (java.lang.Integer) 1);
        java.lang.Object obj64 = dateTimeParserBucket63.saveState();
        long long65 = dateTimeParserBucket63.computeMillis();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int70 = dateTimeZone68.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.US;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        java.lang.String str76 = dateTimeZone68.getShortName((long) 100, locale73);
        dateTimeParserBucket63.setZone(dateTimeZone68);
        java.lang.String str79 = dateTimeZone68.getNameKey((long) '#');
        java.lang.String str80 = dateTimeZone68.getID();
        long long82 = dateTimeZone53.getMillisKeepLocal(dateTimeZone68, 967766400000L);
        org.joda.time.ReadableInstant readableInstant83 = null;
        int int84 = dateTimeZone68.getOffset(readableInstant83);
        long long86 = dateTimeZone68.previousTransition(0L);
        org.joda.time.Chronology chronology87 = chronology50.withZone(dateTimeZone68);
        org.joda.time.ReadablePartial readablePartial88 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long90 = chronology50.set(readablePartial88, 6048000052L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4199999L + "'", long8 == 4199999L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese (China)" + "'", str21, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31L + "'", long44 == 31L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4199999L + "'", long65 == 4199999L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 967766400000L + "'", long82 == 967766400000L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.minuteOfDay();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int28 = dateTimeField26.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField29 = dateTimeField26.getDurationField();
        int int31 = dateTimeField26.getMaximumValue((long) (short) 1);
        long long33 = dateTimeField26.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder36.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder40 = builder36.clearExtensions();
        java.util.Locale locale41 = builder40.build();
        java.lang.String str42 = dateTimeField26.getAsShortText(readablePartial34, (int) (byte) 100, locale41);
        java.lang.String str43 = locale23.getDisplayScript(locale41);
        int int44 = dateTimeField22.getMaximumTextLength(locale41);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        boolean boolean51 = dateTimeField50.isLenient();
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale54.getDisplayName(locale56);
        java.lang.String str59 = dateTimeField50.getAsText(readablePartial52, (int) 'x', locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology47, locale56, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.seconds();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.monthOfYear();
        long long68 = dateTimeField65.addWrapField((long) 81, 1969);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        boolean boolean71 = locale70.hasExtensions();
        java.lang.String str72 = dateTimeField65.getAsShortText((int) (byte) 10, locale70);
        boolean boolean73 = locale70.hasExtensions();
        java.lang.String str74 = dateTimeField22.getAsShortText((long) (-11201), locale70);
        long long77 = dateTimeField22.add(0L, 9);
        long long79 = dateTimeField22.remainder(30667805148L);
        long long82 = dateTimeField22.set((long) 292278993, 1370);
        java.lang.String str84 = dateTimeField22.getAsText((-1893451748000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4200000L + "'", long33 == 4200000L);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese (China)" + "'", str55, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese (Cina)" + "'", str58, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "120" + "'", str59, "120");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2678400081L + "'", long68 == 2678400081L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Okt" + "'", str72, "Okt");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1439" + "'", str74, "1439");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 540000L + "'", long77 == 540000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 5148L + "'", long79 == 5148L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 341418993L + "'", long82 == 341418993L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "70" + "'", str84, "70");
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale43 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology41, locale43, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        java.lang.String str48 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology41.year();
        int int54 = dateTimeField52.get(101262L);
        long long57 = dateTimeField52.addWrapField(115200000L, 67);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200010L + "'", long20 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (China)" + "'", str34, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals(locale43.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2114496000000L + "'", long57 == 2114496000000L);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        long long25 = dateTimeParserBucket15.computeMillis(true);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder28 = builder26.setLocale(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        java.lang.String str41 = locale27.getDisplayLanguage(locale37);
        boolean boolean42 = dateTimeParserBucket15.restoreState((java.lang.Object) locale37);
        java.util.Locale.setDefault(locale37);
        java.lang.String str44 = locale37.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200010L + "'", long20 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 967770600000L + "'", long25 == 967770600000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tedesco" + "'", str41, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ITA" + "'", str44, "ITA");
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        int int21 = dateTimeField20.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = dateTimeField20.getAsText(readablePartial22, 0, locale24);
        boolean boolean27 = locale24.hasExtensions();
        java.lang.String str28 = locale0.getDisplayName(locale24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Franz\366sisch (Frankreich)" + "'", str28, "Franz\366sisch (Frankreich)");
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale locale7 = builder6.build();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "china");
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DE");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        long long5 = dateTimeZone2.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str6 = dateTimeZone3.getID();
        long long9 = dateTimeZone3.adjustOffset(31L, false);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getVariant();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = dateTimeZone3.getShortName((long) (byte) -1, locale11);
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet19 = locale16.getExtensionKeys();
        java.lang.String str20 = locale11.getDisplayScript(locale16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        org.joda.time.DurationField durationField39 = chronology37.hours();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.era();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.lang.String str45 = dateTimeField40.getAsShortText((long) 999, locale43);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getVariant();
        java.util.Locale.setDefault(locale47);
        java.util.Locale locale52 = new java.util.Locale("", "tedesco");
        java.lang.String str53 = locale47.getDisplayScript(locale52);
        java.lang.String str54 = locale47.getDisplayCountry();
        java.lang.String str55 = dateTimeField40.getAsShortText((long) 366, locale47);
        java.lang.String str56 = locale11.getDisplayVariant(locale47);
        java.lang.String str57 = locale11.getVariant();
        boolean boolean58 = languageRange1.equals((java.lang.Object) locale11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31L + "'", long9 == 31L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italia" + "'", str13, "Italia");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese (Cina)" + "'", str30, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "dopo Cristo" + "'", str45, "dopo Cristo");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals(locale52.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italia" + "'", str54, "Italia");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "dopo Cristo" + "'", str55, "dopo Cristo");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfSecond();
        java.lang.String str21 = chronology16.toString();
        org.joda.time.Chronology chronology22 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Cina)" + "'", str9, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfDay();
        org.joda.time.DurationField durationField43 = chronology40.centuries();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long49 = dateTimeZone46.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int55 = dateTimeField53.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField56 = dateTimeField53.getDurationField();
        int int58 = dateTimeField53.getMaximumValue((long) (short) 1);
        long long60 = dateTimeField53.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder63.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder67 = builder63.clearExtensions();
        java.util.Locale locale68 = builder67.build();
        java.lang.String str69 = dateTimeField53.getAsShortText(readablePartial61, (int) (byte) 100, locale68);
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = dateTimeZone46.getShortName((long) 1970, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale68);
        java.util.Set<java.lang.Character> charSet73 = locale68.getExtensionKeys();
        java.lang.String str74 = locale68.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(52L, chronology17, locale68, (java.lang.Integer) (-54), (-1970));
        java.lang.String str79 = locale68.getUnicodeLocaleType("FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cinese (Cina)" + "'", str10, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4200000L + "'", long49 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4200000L + "'", long60 == 4200000L);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-01:10" + "'", str71, "-01:10");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) ' ');
        long long6 = dateTimeField2.roundFloor((long) 'x');
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale9.getDisplayCountry(locale10);
        java.lang.String str13 = dateTimeField2.getAsText(readablePartial7, 360000000, locale10);
        java.lang.String str14 = dateTimeField2.toString();
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int21 = dateTimeField19.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField22 = dateTimeField19.getDurationField();
        java.lang.String str23 = dateTimeField19.toString();
        long long26 = dateTimeField19.add(3061425600000L, 31L);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial47 = null;
        int[] intArray48 = null;
        int int49 = dateTimeField46.getMinimumValue(readablePartial47, intArray48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        int int56 = dateTimeField54.getLeapAmount((long) 0);
        int int58 = dateTimeField54.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial59 = null;
        int[] intArray64 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int65 = dateTimeField54.getMaximumValue(readablePartial59, intArray64);
        int[] intArray67 = dateTimeField46.add(readablePartial50, (int) 'a', intArray64, (int) (short) 0);
        int int68 = dateTimeField19.getMaximumValue(readablePartial27, intArray67);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = dateTimeField2.addWrapPartial(readablePartial15, (-1789), intArray67, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1789");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-31531800000L) + "'", long6 == (-31531800000L));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "360000000" + "'", str13, "360000000");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[yearOfEra]" + "'", str14, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DateTimeField[yearOfEra]" + "'", str23, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4039732800000L + "'", long26 == 4039732800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Chinese (China)" + "'", str37, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        boolean boolean34 = dateTimeField33.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = dateTimeField33.getAsText(readablePartial35, (int) 'x', locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology30, locale39, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekOfWeekyear();
        org.joda.time.DurationField durationField47 = chronology45.hours();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        java.lang.String str63 = locale49.getDisplayLanguage(locale59);
        java.lang.String str64 = locale49.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology45, locale49);
        java.lang.String str66 = dateTimeZone22.getName((long) 999, locale49);
        java.util.Set<java.lang.String> strSet67 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str68 = locale49.getISO3Country();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        boolean boolean74 = dateTimeField73.isLenient();
        org.joda.time.ReadablePartial readablePartial75 = null;
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale77.getDisplayName();
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = locale77.getDisplayName(locale79);
        java.lang.String str82 = dateTimeField73.getAsText(readablePartial75, (int) 'x', locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology70, locale79, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology85 = dateTimeParserBucket84.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.weekOfWeekyear();
        org.joda.time.DurationField durationField87 = chronology85.hours();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.era();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.yearOfEra();
        boolean boolean91 = dateTimeField89.isLeap((-31531800000L));
        java.util.Locale locale93 = java.util.Locale.JAPAN;
        java.lang.String str94 = dateTimeField89.getAsText(1439, locale93);
        java.util.Locale locale95 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleKeys();
        java.lang.String str97 = locale95.getLanguage();
        java.lang.String str98 = locale93.getDisplayName(locale95);
        java.lang.String str99 = locale49.getDisplayScript(locale93);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (China)" + "'", str38, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "120" + "'", str42, "120");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tedesco" + "'", str63, "tedesco");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "deu" + "'", str64, "deu");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DEU" + "'", str68, "DEU");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (China)" + "'", str78, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "it" + "'", str80, "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "cinese (Cina)" + "'", str81, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "120" + "'", str82, "120");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1439" + "'", str94, "1439");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "en" + "'", str97, "en");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Japanese (Japan)" + "'", str98, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        long long26 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, 1L);
        long long29 = dateTimeZone24.adjustOffset(1L, true);
        long long31 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str33 = dateTimeZone24.getNameKey(0L);
        int int35 = dateTimeZone24.getOffset((long) 10);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField37 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology17.minuteOfHour();
        long long40 = dateTimeField38.roundHalfCeiling((-1893451800001L));
        long long43 = dateTimeField38.add(25222263239400000L, 25800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1893451800000L) + "'", long40 == (-1893451800000L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 25223811239400000L + "'", long43 == 25223811239400000L);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone32.getMillisKeepLocal(dateTimeZone33, 1L);
        java.lang.String str36 = dateTimeZone33.getID();
        long long39 = dateTimeZone33.adjustOffset(31L, false);
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.lang.String str44 = dateTimeZone33.getShortName((long) (byte) -1, locale41);
        java.lang.String str46 = dateTimeZone33.getNameKey(9223371985594200012L);
        org.joda.time.Chronology chronology47 = chronology17.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.minuteOfHour();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean54 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale57.getDisplayName();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayName(locale59);
        java.lang.String str62 = dateTimeField53.getAsText(readablePartial55, (int) 'x', locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology50, locale59, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology65.getZone();
        java.util.Locale locale71 = new java.util.Locale("888", "giapponese (Giappone)");
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale locale73 = java.util.Locale.US;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.lang.String str75 = locale72.getDisplayScript();
        java.lang.String str76 = locale71.getDisplayLanguage(locale72);
        java.lang.String str77 = dateTimeZone67.getShortName(100L, locale71);
        org.joda.time.Chronology chronology78 = chronology47.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField79 = chronology47.weekyear();
        java.lang.String str80 = dateTimeField79.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31L + "'", long39 == 31L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italy" + "'", str43, "Italy");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "120" + "'", str62, "120");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals(locale71.toString(), "888_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "888" + "'", str76, "888");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DateTimeField[weekyear]" + "'", str80, "DateTimeField[weekyear]");
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        java.lang.String str28 = dateTimeFieldType20.getName();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31);
        java.lang.Integer int35 = dateTimeParserBucket34.getPivotYear();
        long long38 = dateTimeParserBucket34.computeMillis(true, "120");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.lang.String str53 = dateTimeField44.getAsText(readablePartial46, (int) 'x', locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale50, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekOfWeekyear();
        org.joda.time.DurationField durationField58 = chronology56.hours();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology56, locale59, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField62 = chronology56.months();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.clockhourOfHalfday();
        dateTimeParserBucket34.saveField(dateTimeField63, (int) (byte) 100);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType20.getField(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.minuteOfDay();
        org.joda.time.DurationField durationField70 = chronology66.hours();
        org.joda.time.DurationField durationField71 = chronology66.hours();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfEra" + "'", str28, "yearOfEra");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(int35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4200000L + "'", long38 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "120" + "'", str53, "120");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology31 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        long long35 = dateTimeField32.add((-1704117060000L), 31450200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2717295575882940000L + "'", long35 == 2717295575882940000L);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean3 = dateTimeField2.isLenient();
        int int6 = dateTimeField2.getDifference((long) (short) 1, (long) 10);
        long long9 = dateTimeField2.add(1L, 1L);
        java.lang.String str11 = dateTimeField2.getAsText((long) 'a');
        int int12 = dateTimeField2.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int18 = dateTimeField16.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField19 = dateTimeField16.getDurationField();
        int int21 = dateTimeField16.getMaximumValue((long) (short) 1);
        long long23 = dateTimeField16.roundHalfEven((long) ' ');
        int int25 = dateTimeField16.getMinimumValue((long) 100);
        int int26 = dateTimeField16.getMinimumValue();
        java.util.Locale locale31 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str32 = dateTimeField16.getAsShortText((int) '#', locale31);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int39 = dateTimeField37.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField40 = dateTimeField37.getDurationField();
        int int42 = dateTimeField37.getMaximumValue((long) (short) 1);
        long long44 = dateTimeField37.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder47.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder51 = builder47.clearExtensions();
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = dateTimeField37.getAsShortText(readablePartial45, (int) (byte) 100, locale52);
        java.lang.String str54 = locale34.getDisplayScript(locale52);
        java.lang.String str55 = dateTimeField16.getAsText(360000000L, locale52);
        java.lang.String str56 = locale52.toLanguageTag();
        java.lang.String str57 = locale52.getISO3Language();
        java.lang.String str58 = locale52.getISO3Language();
        java.lang.String str59 = locale52.getLanguage();
        java.util.Locale.setDefault(locale52);
        java.lang.String str61 = locale52.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeField2.getAsText(readablePartial13, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000001L + "'", long9 == 31536000001L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969" + "'", str11, "1969");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4200000L + "'", long23 == 4200000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "35" + "'", str32, "35");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 4200000L + "'", long44 == 4200000L);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970" + "'", str55, "1970");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "und" + "'", str56, "und");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        long long9 = dateTimeParserBucket5.computeMillis(true, "120");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology27, locale30, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField33 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        dateTimeParserBucket5.saveField(dateTimeField34, (int) (byte) 100);
        org.joda.time.ReadablePartial readablePartial37 = null;
        int int38 = dateTimeField34.getMinimumValue(readablePartial37);
        int int39 = dateTimeField34.getMaximumValue();
        java.util.Locale locale42 = new java.util.Locale("millisOfDay");
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = dateTimeField34.getAsShortText(946689000000L, locale42);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertEquals(locale42.toString(), "millisofday");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology16.weeks();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology16.get(readablePartial20, 4190391236L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.clockhourOfHalfday();
        org.joda.time.Chronology chronology23 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology16.weekyears();
        long long29 = chronology16.add(7018868767910400077L, (-186339L), (int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7018868767891766177L + "'", long29 == 7018868767891766177L);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        int int3 = dateTimeZone1.getOffsetFromLocal(100L);
        java.lang.String str5 = dateTimeZone1.getShortName(4L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.ReadablePartial readablePartial13 = null;
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale15.getDisplayName(locale17);
        java.lang.String str20 = dateTimeField11.getAsText(readablePartial13, (int) 'x', locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology8, locale17, (java.lang.Integer) (-1));
        java.util.Locale locale23 = dateTimeParserBucket22.getLocale();
        long long24 = dateTimeParserBucket22.computeMillis();
        long long27 = dateTimeParserBucket22.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket22.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone29.getMillisKeepLocal(dateTimeZone30, 1L);
        java.lang.String str33 = dateTimeZone30.getID();
        long long36 = dateTimeZone30.adjustOffset(31L, false);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale38.getDisplayVariant();
        java.lang.String str40 = dateTimeZone30.getName((long) 0, locale38);
        boolean boolean42 = dateTimeZone30.isStandardOffset((long) 360000000);
        long long44 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, 31L);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone28.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone48.getMillisKeepLocal(dateTimeZone49, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        java.util.TimeZone timeZone53 = dateTimeZone49.toTimeZone();
        java.util.Locale locale58 = new java.util.Locale("zh_CN", "China", "");
        java.lang.String str59 = dateTimeZone49.getShortName((long) 'x', locale58);
        java.lang.String str60 = locale58.getDisplayVariant();
        java.lang.String str61 = locale58.getDisplayLanguage();
        java.lang.String str62 = dateTimeZone28.getName(947548800000L, locale58);
        java.lang.String str63 = dateTimeZone1.getShortName(31708800000L, locale58);
        java.lang.String str65 = dateTimeZone1.getName((-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 360000000 + "'", int3 == 360000000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:00" + "'", str5, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (China)" + "'", str16, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "120" + "'", str20, "120");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 31L + "'", long36 == 31L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31L + "'", long44 == 31L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale58.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh_cn" + "'", str61, "zh_cn");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+100:00" + "'", str63, "+100:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+100:00" + "'", str65, "+100:00");
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology31 = chronology17.withUTC();
        org.joda.time.DurationField durationField32 = chronology31.centuries();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int41 = dateTimeField39.getLeapAmount((long) 0);
        int int43 = dateTimeField39.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial44 = null;
        int[] intArray49 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int50 = dateTimeField39.getMaximumValue(readablePartial44, intArray49);
        int int51 = dateTimeField39.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField39.getType();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56);
        java.lang.String str60 = dateTimeField39.getAsShortText(360000000, locale56);
        long long63 = dateTimeField39.addWrapField((long) (short) 100, 12);
        int int65 = dateTimeField39.get((-62104060799990L));
        org.joda.time.ReadablePartial readablePartial66 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        int int71 = dateTimeField69.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField72 = dateTimeField69.getDurationField();
        int int74 = dateTimeField69.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial75 = null;
        int[] intArray80 = new int[] { (byte) 100, 0, '4', (short) 1 };
        int int81 = dateTimeField69.getMaximumValue(readablePartial75, intArray80);
        int int82 = dateTimeField39.getMaximumValue(readablePartial66, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField34.add(readablePartial35, 292320000, intArray80, 25200000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292320000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "360000000" + "'", str60, "360000000");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 378691200100L + "'", long63 == 378691200100L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[100, 0, 52, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 292278993 + "'", int82 == 292278993);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology18.add(readablePeriod30, 378691200100L, (int) '#');
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField35 = chronology18.yearOfCentury();
        long long37 = dateTimeField35.roundHalfFloor((-36180001L));
        long long39 = dateTimeField35.roundFloor(967770636697L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 378691200100L + "'", long33 == 378691200100L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 946684800000L + "'", long39 == 946684800000L);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        java.util.Locale locale3 = new java.util.Locale("-59:10", "ITALIANO (ITALIA)", "canada");
        org.junit.Assert.assertEquals(locale3.toString(), "-59:10_ITALIANO (ITALIA)_canada");
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField41 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField42 = chronology17.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField2.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        boolean boolean13 = dateTimeField12.isLenient();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.lang.String str21 = dateTimeField12.getAsText(readablePartial14, (int) 'x', locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology9, locale18, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType7.getField(chronology24);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology24, locale30, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.getMillisKeepLocal(dateTimeZone37, 1L);
        int int41 = dateTimeZone36.getOffsetFromLocal((long) (short) 0);
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology44 = chronology24.withZone(dateTimeZone36);
        long long48 = chronology44.add(19L, 1L, (int) (byte) -1);
        boolean boolean49 = dateTimeFieldType5.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.secondOfDay();
        long long53 = dateTimeField50.set(4039737292748L, 99);
        long long56 = dateTimeField50.set(14401982L, "86398");
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (China)" + "'", str17, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cinese (Cina)" + "'", str20, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "120" + "'", str21, "120");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 18L + "'", long48 == 18L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4039718499748L + "'", long53 == 4039718499748L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86398982L + "'", long56 == 86398982L);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long5 = dateTimeZone2.convertLocalToUTC(0L, false);
        long long7 = dateTimeZone2.nextTransition((-31536000000L));
        java.lang.String str8 = dateTimeZone2.toString();
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        int int13 = dateTimeZone2.getOffsetFromLocal(2726458454044800998L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4200000L + "'", long5 == 4200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-31536000000L) + "'", long7 == (-31536000000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:10" + "'", str8, "-01:10");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4200000) + "'", int13 == (-4200000));
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int27 = dateTimeField25.getLeapAmount((long) ' ');
        long long29 = dateTimeField25.roundFloor((long) 'x');
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = dateTimeField25.getAsShortText(59, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology18, locale31, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41);
        java.lang.Integer int45 = dateTimeParserBucket44.getPivotYear();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long50 = dateTimeZone48.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology51 = chronology46.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.centuryOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology54, locale63, (java.lang.Integer) (-1));
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet73 = locale70.getExtensionKeys();
        java.lang.String str74 = locale63.getDisplayCountry(locale70);
        java.lang.String str75 = locale63.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology46, locale63, (java.lang.Integer) 1969);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(378687000001L, chronology37, locale63);
        java.lang.String str79 = locale63.getVariant();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-31531800000L) + "'", long29 == (-31531800000L));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3061425600000L + "'", long50 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italy" + "'", str74, "Italy");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPAN;
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2);
        java.lang.Integer int6 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone9.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology12 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.millisOfSecond();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3061425600000L + "'", long11 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("Taiwan");
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("1982");
        java.util.Locale.Builder builder9 = builder4.setExtension('x', "1");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setOffset((int) (short) 100);
        java.util.Locale locale10 = dateTimeParserBucket4.getLocale();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = dateTimeField15.getAsText(readablePartial17, (int) 'x', locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology12, locale21, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.dayOfWeek();
        dateTimeParserBucket4.saveField(dateTimeField33, (int) (byte) -1);
        long long37 = dateTimeField33.remainder(190800010L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese (China)" + "'", str20, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "120" + "'", str24, "120");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 18000010L + "'", long37 == 18000010L);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long25 = dateTimeZone22.convertLocalToUTC(0L, false);
        long long27 = dateTimeZone22.nextTransition((-31536000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str29 = dateTimeZone22.toString();
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology49.hours();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology49, locale52, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField55 = chronology49.centuries();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = chronology49.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology49.getZone();
        java.lang.String str60 = dateTimeZone59.getID();
        long long63 = dateTimeZone59.convertLocalToUTC((-43200001L), false);
        org.joda.time.Chronology chronology64 = chronology30.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField65 = chronology64.millis();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4200000L + "'", long25 == 4200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-31536000000L) + "'", long27 == (-31536000000L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:10" + "'", str29, "-01:10");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-43200001L) + "'", long63 == (-43200001L));
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getCountry();
        java.util.Locale.setDefault(locale0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean9 = dateTimeField8.isLenient();
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = dateTimeField8.getAsText(readablePartial10, (int) 'x', locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology5, locale14, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int29 = dateTimeField27.getLeapAmount((long) ' ');
        long long31 = dateTimeField27.roundFloor((long) 'x');
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField27.getAsShortText(59, locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology20, locale33, (java.lang.Integer) 1970, 0);
        java.lang.String str39 = locale0.getDisplayVariant(locale33);
        java.util.Set<java.lang.String> strSet40 = locale33.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str13, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cinese (Cina)" + "'", str16, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "120" + "'", str17, "120");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-31531800000L) + "'", long31 == (-31531800000L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "59" + "'", str35, "59");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        boolean boolean29 = locale28.hasExtensions();
        int int30 = dateTimeField27.getMaximumShortTextLength(locale28);
        org.joda.time.DurationField durationField31 = dateTimeField27.getRangeDurationField();
        int int32 = dateTimeField27.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int int34 = dateTimeField27.getMaximumValue(readablePartial33);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        java.util.Locale locale1 = new java.util.Locale("cinese (Cina)");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale4 = new java.util.Locale("cinese (Cina)");
        java.lang.String str5 = locale1.getDisplayVariant(locale4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.ReadablePartial readablePartial13 = null;
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale15.getDisplayName(locale17);
        java.lang.String str20 = dateTimeField11.getAsText(readablePartial13, (int) 'x', locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology8, locale17, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone28.getMillisKeepLocal(dateTimeZone29, 1L);
        boolean boolean32 = dateTimeZone29.isFixed();
        org.joda.time.Chronology chronology33 = chronology23.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str40 = locale36.getExtension('a');
        java.lang.String str41 = locale35.getDisplayCountry(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        long long48 = dateTimeField45.getDifferenceAsLong((long) ' ', 100L);
        dateTimeParserBucket42.saveField(dateTimeField45, 998);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket42.getZone();
        long long54 = dateTimeParserBucket42.computeMillis(true, "100");
        long long56 = dateTimeParserBucket42.computeMillis(true);
        boolean boolean57 = locale1.equals((java.lang.Object) long56);
        org.junit.Assert.assertEquals(locale1.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str16, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "120" + "'", str20, "120");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-22320000L) + "'", long54 == (-22320000L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-22320000L) + "'", long56 == (-22320000L));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        java.util.Locale locale3 = new java.util.Locale("99", "GERMAN (GERMANY)", "Vereinigtes K\366nigreich");
        java.lang.String str4 = locale3.getLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "99_GERMAN (GERMANY)_Vereinigtes K\366nigreich");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "99" + "'", str4, "99");
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) (short) -1);
        int int5 = dateTimeZone1.getOffset(378691200100L);
        long long7 = dateTimeZone1.previousTransition(252378604999L);
        java.lang.String str9 = dateTimeZone1.getNameKey((-60526224000001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 252378604999L + "'", long7 == 252378604999L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        boolean boolean44 = dateTimeFieldType21.isSupported(chronology41);
        long long48 = chronology41.add((long) 70, (long) (byte) 10, 1439);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology41.millisOfDay();
        org.joda.time.Chronology chronology51 = chronology41.withUTC();
        org.joda.time.DurationField durationField52 = chronology51.centuries();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200010L + "'", long20 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 14460L + "'", long48 == 14460L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField19.getMaximumValue(readablePartial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField19.getType();
        java.lang.String str24 = dateTimeField19.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86399 + "'", int22 == 86399);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "secondOfDay" + "'", str24, "secondOfDay");
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int7 = dateTimeZone0.getOffsetFromLocal(4200000L);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) 1439);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField16 = dateTimeField13.getDurationField();
        int int18 = dateTimeField13.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray25 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int26 = dateTimeField13.getMaximumValue(readablePartial19, intArray25);
        java.util.Locale locale30 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology32, locale33, (java.lang.Integer) 1);
        java.lang.String str36 = locale33.getScript();
        java.lang.String str37 = locale30.getDisplayScript(locale33);
        java.util.Set<java.lang.String> strSet38 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeField13.getAsText((long) (-1), locale33);
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.String str42 = locale40.getDisplayCountry();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale33.getDisplayLanguage(locale40);
        java.lang.String str45 = dateTimeZone0.getShortName((long) 999, locale33);
        long long48 = dateTimeZone0.adjustOffset(97L, false);
        long long50 = dateTimeZone0.nextTransition(1861920000000L);
        java.lang.String str52 = dateTimeZone0.getNameKey((-762886L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertEquals(locale30.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969" + "'", str39, "1969");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str41, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str42, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u5fb7\u6587" + "'", str44, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 97L + "'", long48 == 97L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1861920000000L + "'", long50 == 1861920000000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology18, locale21, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField24 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getISO3Country();
        boolean boolean33 = locale30.hasExtensions();
        java.lang.String str34 = locale30.getCountry();
        java.lang.String str35 = dateTimeZone27.getName(31536000001L, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((-3540000L), chronology18, locale30);
        java.util.Locale locale37 = dateTimeParserBucket36.getLocale();
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:10" + "'", str35, "-01:10");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(charSet38);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.weekyears();
        org.joda.time.Chronology chronology22 = chronology17.withUTC();
        long long26 = chronology22.add(81L, (long) 600000, 0);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsShortText(187099140L, locale29);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 81L + "'", long26 == 81L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        long long4 = dateTimeZone1.convertLocalToUTC(59L, true);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        boolean boolean7 = dateTimeZone6.isFixed();
        long long11 = dateTimeZone6.convertLocalToUTC(7200999L, true, (-40329279647999950L));
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 60L + "'", long4 == 60L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-352799001L) + "'", long11 == (-352799001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology16.add(readablePeriod21, 120001L, 59);
        org.joda.time.DurationField durationField25 = chronology16.weeks();
        org.joda.time.DurationField durationField26 = chronology16.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology16.getDateTimeMillis((long) (-16383412), 18000000, 1910, 7, (-946688999));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 120001L + "'", long24 == 120001L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField52 = chronology44.centuries();
        org.joda.time.DateTimeField dateTimeField53 = chronology44.millisOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str37, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale33.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayName(locale35);
        java.lang.String str38 = dateTimeField29.getAsText(readablePartial31, (int) 'x', locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology26, locale35, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        java.lang.String str45 = chronology41.toString();
        java.lang.String str46 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType21.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology41.getDateTimeMillis(0, (-51011448), 28800000, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200010L + "'", long20 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str34, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese (Cina)" + "'", str37, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "120" + "'", str38, "120");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        java.util.Locale locale1 = new java.util.Locale("millisOfDay");
        java.lang.String str2 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "millisofday");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyearOfCentury();
        org.joda.time.DurationField durationField20 = chronology16.seconds();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = chronology16.get(readablePeriod21, (-7748183400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder11 = builder10.clear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        boolean boolean18 = dateTimeField17.isLenient();
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale21.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = dateTimeField17.getAsText(readablePartial19, (int) 'x', locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology14, locale23, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology29.millis();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale51 = java.util.Locale.UK;
        dateTimeParserBucket48.saveField(dateTimeFieldType49, "Chinese (China)", locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology29, locale51, (java.lang.Integer) 12, 100);
        java.lang.String str56 = locale51.getDisplayVariant();
        boolean boolean57 = locale51.hasExtensions();
        java.util.Locale.Builder builder58 = builder11.setLocale(locale51);
        java.util.Locale.Builder builder60 = builder58.setLanguage("year");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder60.setScript("1982");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1982 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str22, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "120" + "'", str26, "120");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str42, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = chronology37.weekyearOfCentury();
        boolean boolean45 = dateTimeFieldType0.isSupported(chronology37);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str30, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.minuteOfDay();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology16.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology16.months();
        org.joda.time.DurationField durationField22 = chronology16.seconds();
        org.joda.time.DurationField durationField23 = chronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguage("GB");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder10 = builder6.setLanguageTag("January");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguageTag("en_gb");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: en_gb [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfDay();
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, 1L);
        long long30 = dateTimeZone25.adjustOffset(1L, true);
        int int32 = dateTimeZone25.getOffsetFromLocal(0L);
        long long34 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology37 = chronology17.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField38 = chronology17.days();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone39.getMillisKeepLocal(dateTimeZone40, 1L);
        java.lang.String str43 = dateTimeZone40.getID();
        long long46 = dateTimeZone40.adjustOffset(31L, false);
        int int48 = dateTimeZone40.getStandardOffset((long) 9);
        long long50 = dateTimeZone40.nextTransition((long) 100);
        boolean boolean52 = dateTimeZone40.isStandardOffset((long) 86399);
        boolean boolean54 = dateTimeZone40.equals((java.lang.Object) 360000000L);
        java.lang.String str56 = dateTimeZone40.getNameKey((long) 366);
        long long58 = dateTimeZone40.previousTransition((long) 292278993);
        org.joda.time.Chronology chronology59 = chronology17.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 31L + "'", long46 == 31L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 292278993L + "'", long58 == 292278993L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology3, locale4, (java.lang.Integer) 1);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        long long8 = dateTimeParserBucket6.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket6.saveState();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean17 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = dateTimeField16.getAsText(readablePartial18, (int) 'x', locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology13, locale22, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        boolean boolean31 = dateTimeParserBucket6.restoreState((java.lang.Object) chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType1.getField(chronology28);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(1958L, chronology28, locale34, (java.lang.Integer) 1439);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone37.getMillisKeepLocal(dateTimeZone38, 1L);
        java.lang.String str41 = dateTimeZone38.getID();
        long long44 = dateTimeZone38.adjustOffset(31L, false);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = dateTimeZone38.getName((long) 0, locale46);
        java.lang.String str49 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology50 = chronology28.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField51 = chronology50.months();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4199999L + "'", long8 == 4199999L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str21, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cinese (Cina)" + "'", str24, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "120" + "'", str25, "120");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 31L + "'", long44 == 31L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getLeapAmount((long) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 1);
        java.lang.String str22 = locale19.getScript();
        java.lang.String str23 = dateTimeField12.getAsShortText(readablePartial15, (int) ' ', locale19);
        boolean boolean24 = dateTimeField12.isLenient();
        dateTimeParserBucket4.saveField(dateTimeField12, 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, 1L);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        boolean boolean34 = dateTimeZone27.equals((java.lang.Object) "it");
        dateTimeParserBucket4.setZone(dateTimeZone27);
        java.lang.Integer int36 = dateTimeParserBucket4.getOffsetInteger();
        int int37 = dateTimeParserBucket4.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        long long43 = dateTimeField40.getDifferenceAsLong((long) ' ', 100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField40.getType();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        boolean boolean55 = dateTimeField54.isLenient();
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale58.getDisplayName(locale60);
        java.lang.String str63 = dateTimeField54.getAsText(readablePartial56, (int) 'x', locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology51, locale60, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekOfWeekyear();
        org.joda.time.DurationField durationField68 = chronology66.hours();
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder71 = builder69.setLocale(locale70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        boolean boolean75 = dateTimeField74.isLenient();
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str79 = locale78.getDisplayName();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale78.getDisplayName(locale80);
        java.lang.String str83 = dateTimeField74.getAsText(readablePartial76, (int) 'x', locale80);
        java.lang.String str84 = locale70.getDisplayLanguage(locale80);
        java.lang.String str85 = locale70.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology66, locale70);
        org.joda.time.DateTimeField dateTimeField87 = chronology66.minuteOfHour();
        java.util.Locale locale88 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale89 = null;
        java.lang.String str90 = locale88.getDisplayScript(locale89);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket(97L, chronology66, locale88, (java.lang.Integer) 12);
        dateTimeParserBucket4.saveField(dateTimeFieldType44, "+117:00", locale88);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = dateTimeParserBucket4.computeMillis();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+117:00\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4199999L + "'", long9 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32" + "'", str23, "32");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfDay" + "'", str45, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str59, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "cinese (Cina)" + "'", str62, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "120" + "'", str63, "120");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str79, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "it" + "'", str81, "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "cinese (Cina)" + "'", str82, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "120" + "'", str83, "120");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tedesco" + "'", str84, "tedesco");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "deu" + "'", str85, "deu");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        java.lang.String str35 = locale21.getDisplayLanguage(locale31);
        java.lang.String str36 = locale21.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21);
        org.joda.time.DurationField durationField38 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField39 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology17.getZone();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        java.lang.String str46 = locale43.toLanguageTag();
        java.lang.String str47 = dateTimeZone41.getShortName((long) 86399, locale43);
        long long50 = dateTimeZone41.adjustOffset((-61851595800001L), false);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str10, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str30, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco" + "'", str35, "tedesco");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-TW" + "'", str46, "zh-TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-61851595800001L) + "'", long50 == (-61851595800001L));
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int9 = dateTimeField7.getLeapAmount((long) 0);
        int int11 = dateTimeField7.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray17 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int18 = dateTimeField7.getMaximumValue(readablePartial12, intArray17);
        int int19 = dateTimeField7.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField7.getType();
        java.util.Locale locale25 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        dateTimeParserBucket4.saveField(dateTimeFieldType20, "120", locale25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        boolean boolean33 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField32.getAsText(readablePartial34, (int) 'x', locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology29, locale38, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.seconds();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.monthOfYear();
        boolean boolean49 = dateTimeFieldType20.isSupported(chronology44);
        java.lang.String str50 = dateTimeFieldType20.getName();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType20.getRangeDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str37, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese (Cina)" + "'", str40, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "120" + "'", str41, "120");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "yearOfEra" + "'", str50, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfEra();
        boolean boolean22 = dateTimeField20.isLeap(59L);
        int int25 = dateTimeField20.getDifference(61200009L, 4190400009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        dateTimeParserBucket4.saveField(dateTimeFieldType9, "zh_CN", locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology16, locale17, (java.lang.Integer) 1);
        java.lang.Object obj20 = dateTimeParserBucket19.saveState();
        long long21 = dateTimeParserBucket19.computeMillis();
        dateTimeParserBucket19.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        dateTimeParserBucket19.saveField(dateTimeFieldType24, "zh_CN", locale28);
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale13.getDisplayVariant(locale28);
        java.lang.String str32 = locale28.getDisplayVariant();
        java.lang.String str33 = locale28.toLanguageTag();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4199999L + "'", long21 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr-FR" + "'", str33, "fr-FR");
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        org.joda.time.Chronology chronology40 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.era();
        java.util.Locale locale45 = new java.util.Locale("", "+12:00");
        boolean boolean46 = locale45.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(4039377000000L, chronology40, locale45, (java.lang.Integer) 1969, 97);
        org.joda.time.DateTimeField dateTimeField50 = chronology40.hourOfDay();
        java.lang.String str51 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology40.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str31, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale45.toString(), "_+12:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        long long17 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int22 = dateTimeField20.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField23 = dateTimeField20.getDurationField();
        int int25 = dateTimeField20.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int[] intArray32 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int33 = dateTimeField20.getMaximumValue(readablePartial26, intArray32);
        boolean boolean34 = dateTimeField20.isSupported();
        boolean boolean35 = dateTimeParserBucket4.restoreState((java.lang.Object) dateTimeField20);
        java.lang.String str36 = dateTimeField20.getName();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2L) + "'", long17 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology18);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology18, locale24, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        boolean boolean37 = dateTimeZone30.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField39 = chronology18.seconds();
        java.lang.String str40 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology18.era();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology18.getZone();
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) 4);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone44.isLocalDateTimeGap(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology16.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology16.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology17.millis();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale39 = java.util.Locale.UK;
        dateTimeParserBucket36.saveField(dateTimeFieldType37, "Chinese (China)", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'x', chronology17, locale39, (java.lang.Integer) 12, 100);
        org.joda.time.DateTimeField dateTimeField44 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField46 = chronology17.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket4.getChronology();
        int int11 = dateTimeParserBucket4.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = dateTimeField18.getAsText(readablePartial20, (int) 'x', locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale24, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        long long39 = dateTimeZone36.getMillisKeepLocal(dateTimeZone37, 1L);
        java.lang.String str41 = dateTimeZone36.getNameKey((long) '#');
        long long45 = dateTimeZone36.convertLocalToUTC((long) 'a', true, 0L);
        java.lang.String str47 = dateTimeZone36.getNameKey((-58979923200001L));
        java.lang.String str49 = dateTimeZone36.getShortName((long) (byte) -1);
        org.joda.time.Chronology chronology50 = chronology30.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField51 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType12.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField53 = chronology30.halfdayOfDay();
        dateTimeParserBucket4.saveField(dateTimeField53, 115200000);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "it" + "'", str25, "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Cina)" + "'", str26, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "120" + "'", str27, "120");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 97L + "'", long45 == 97L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("german (germany)", (double) 865746);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=865746.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh-x-lvariant-en-US", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("zho", strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strList17);
        java.lang.String str19 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet21);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("Italy");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("zho", strMap28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strMap33);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale50);
        java.lang.String str52 = locale49.getDisplayCountry(locale50);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strSet46, filteringMode54);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str66 = locale65.getDisplayCountry();
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale67.getDisplayCountry();
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale69.getDisplayCountry();
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str72 = locale71.getDisplayCountry();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.util.Locale locale77 = java.util.Locale.JAPAN;
        java.util.Locale locale78 = java.util.Locale.JAPAN;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale60, locale62, locale65, locale67, locale69, locale71, locale73, locale75, locale78 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale locale84 = java.util.Locale.lookup(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList81, filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList81);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "China" + "'", str61, "China");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "China" + "'", str66, "China");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "China" + "'", str68, "China");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "China" + "'", str70, "China");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "China" + "'", str72, "China");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList88);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.addWrapField((long) (byte) -1, (-946688999));
        long long8 = dateTimeField2.set((-7738090L), 2000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7018868767910399999L + "'", long5 == 7018868767910399999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 978299461910L + "'", long8 == 978299461910L);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfHalfday();
        int int23 = dateTimeField22.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = dateTimeField22.getAsShortText(readablePartial24, 1, locale26);
        java.util.Locale.setDefault(category0, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int34 = dateTimeField31.getDifference((long) 12, 1L);
        long long36 = dateTimeField31.roundHalfCeiling((long) 100);
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getVariant();
        java.util.Locale.setDefault(locale37);
        int int40 = dateTimeField31.getMaximumTextLength(locale37);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale41.getCountry();
        java.lang.String str45 = locale41.getISO3Country();
        java.util.Set<java.lang.Character> charSet46 = locale41.getExtensionKeys();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale41.getDisplayScript(locale47);
        java.lang.String str49 = locale41.getLanguage();
        java.lang.String str50 = locale37.getDisplayName(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale52 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder55 = builder53.setLocale(locale54);
        java.util.Locale locale57 = new java.util.Locale("China");
        java.util.Locale.Builder builder58 = builder55.setLocale(locale57);
        java.util.Locale.Builder builder60 = builder58.addUnicodeLocaleAttribute("French");
        java.util.Locale locale61 = builder60.build();
        java.util.Locale.Builder builder63 = builder60.setLanguageTag("Japan");
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale.Builder builder65 = builder63.clearExtensions();
        java.util.Locale locale66 = builder63.build();
        java.util.Locale.setDefault(category0, locale66);
        java.lang.String str68 = locale66.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4200000L + "'", long36 == 4200000L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JP" + "'", str44, "JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JPN" + "'", str45, "JPN");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str50, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals(locale57.toString(), "china");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        java.lang.String str21 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType22.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.minuteOfDay();
        java.lang.String str44 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone46.getMillisKeepLocal(dateTimeZone47, 1L);
        long long52 = dateTimeZone47.adjustOffset(1L, true);
        int int54 = dateTimeZone47.getOffsetFromLocal(0L);
        long long56 = dateTimeZone47.previousTransition((long) (byte) -1);
        long long58 = dateTimeZone47.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology59 = chronology39.withZone(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology39.add(readablePeriod60, (long) (short) 100, 4);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType0.getField(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = chronology39.getDateTimeMillis((-1), 190, 20, (-265714), 382, (int) (byte) 100, 18000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -265714 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L + "'", long58 == 100L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.adjustOffset(31L, false);
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str10 = locale9.getVariant();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = dateTimeZone1.getShortName((long) (byte) -1, locale9);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.lang.String str18 = locale9.getDisplayScript(locale14);
        java.lang.String str19 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale14.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        long long24 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 1L);
        int int26 = dateTimeZone21.getOffsetFromLocal((long) (short) 0);
        int int28 = dateTimeZone21.getOffsetFromLocal(4200000L);
        boolean boolean30 = dateTimeZone21.isStandardOffset((long) 1439);
        boolean boolean32 = dateTimeZone21.isStandardOffset(4L);
        long long34 = dateTimeZone21.convertUTCToLocal(691200001L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone21.getOffset(readableInstant35);
        boolean boolean37 = locale14.equals((java.lang.Object) int36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31L + "'", long7 == 31L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italy" + "'", str11, "Italy");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 691200001L + "'", long34 == 691200001L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ITA", (double) (-359999990L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.5999999E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 12);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = chronology16.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        boolean boolean13 = dateTimeField12.isLenient();
        int int16 = dateTimeField12.getDifference((long) (short) 1, (long) 10);
        long long19 = dateTimeField12.add(1L, 1L);
        long long21 = dateTimeField12.roundFloor((long) (byte) -1);
        long long23 = dateTimeField12.roundHalfEven(10L);
        dateTimeParserBucket4.saveField(dateTimeField12, (int) (short) 100);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DurationField durationField29 = chronology28.years();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31536000001L + "'", long19 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-31531800000L) + "'", long21 == (-31531800000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4200000L + "'", long23 == 4200000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology18.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology18.seconds();
        org.joda.time.DurationField durationField42 = chronology18.months();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        org.joda.time.ReadablePartial readablePartial49 = null;
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayName(locale53);
        java.lang.String str56 = dateTimeField47.getAsText(readablePartial49, (int) 'x', locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology44, locale53, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.seconds();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfEra();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.secondOfMinute();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology66, locale67, (java.lang.Integer) 1);
        java.lang.String str70 = locale67.getScript();
        java.lang.String str71 = dateTimeField63.getAsText(31L, locale67);
        org.joda.time.ReadablePartial readablePartial72 = null;
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder76 = builder74.setLocale(locale75);
        java.lang.String str77 = dateTimeField63.getAsText(readablePartial72, 9, locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((-61914758400100L), chronology18, locale75, (java.lang.Integer) 18000000, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = chronology18.get(readablePeriod81, (-1970L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str11, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str31, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str52, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cinese (Cina)" + "'", str55, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "120" + "'", str56, "120");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9" + "'", str77, "9");
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket4.getChronology();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4199999L + "'", long6 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale.Builder builder12 = builder10.setLanguage("Giappone");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("gen");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("86236369");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder17.setUnicodeLocaleKeyword("GBR", "\u65e5\u672c");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: GBR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c" + "'", str9, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 9);
        long long25 = dateTimeParserBucket15.computeMillis(true);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder28 = builder26.setLocale(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        java.lang.String str41 = locale27.getDisplayLanguage(locale37);
        boolean boolean42 = dateTimeParserBucket15.restoreState((java.lang.Object) locale37);
        long long43 = dateTimeParserBucket15.computeMillis();
        int int44 = dateTimeParserBucket15.getOffset();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        java.util.Locale locale61 = dateTimeParserBucket60.getLocale();
        long long62 = dateTimeParserBucket60.computeMillis();
        long long65 = dateTimeParserBucket60.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket60.saveField(dateTimeFieldType66, 9);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        boolean boolean75 = dateTimeField74.isLenient();
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str79 = locale78.getDisplayName();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale78.getDisplayName(locale80);
        java.lang.String str83 = dateTimeField74.getAsText(readablePartial76, (int) 'x', locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology71, locale80, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology86 = dateTimeParserBucket85.getChronology();
        java.util.Locale locale88 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology86, locale88, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType66.getField(chronology86);
        java.lang.String str93 = chronology86.toString();
        org.joda.time.DateTimeField dateTimeField94 = chronology86.dayOfMonth();
        java.lang.String str95 = dateTimeField94.toString();
        dateTimeParserBucket15.saveField(dateTimeField94, 998);
        org.joda.time.DateTimeZone dateTimeZone98 = dateTimeParserBucket15.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4200010L + "'", long17 == 4200010L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4200010L + "'", long20 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 967770600000L + "'", long25 == 967770600000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str36, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tedesco" + "'", str41, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 967770600010L + "'", long43 == 967770600010L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str54, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 4200010L + "'", long62 == 4200010L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4200010L + "'", long65 == 4200010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str79, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "it" + "'", str81, "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "cinese (Cina)" + "'", str82, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "120" + "'", str83, "120");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals(locale88.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ISOChronology[UTC]" + "'", str93, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str95, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeZone98);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setVariant("Japan");
        java.util.Locale.Builder builder7 = builder6.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, 31);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        int int24 = dateTimeField22.getLeapAmount(0L);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology26, locale27, (java.lang.Integer) 1);
        java.lang.Object obj30 = dateTimeParserBucket29.saveState();
        long long31 = dateTimeParserBucket29.computeMillis();
        dateTimeParserBucket29.setPivotYear((java.lang.Integer) 10);
        long long35 = dateTimeParserBucket29.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        int int40 = dateTimeField38.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField41 = dateTimeField38.getDurationField();
        int int43 = dateTimeField38.getMaximumValue((long) (short) 1);
        long long45 = dateTimeField38.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder52 = builder48.clearExtensions();
        java.util.Locale locale53 = builder52.build();
        java.lang.String str54 = dateTimeField38.getAsShortText(readablePartial46, (int) (byte) 100, locale53);
        boolean boolean55 = dateTimeParserBucket29.restoreState((java.lang.Object) dateTimeField38);
        int int56 = dateTimeField38.getMaximumValue();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        boolean boolean62 = dateTimeField61.isLenient();
        org.joda.time.ReadablePartial readablePartial63 = null;
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str66 = locale65.getDisplayName();
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = locale65.getDisplayName(locale67);
        java.lang.String str70 = dateTimeField61.getAsText(readablePartial63, (int) 'x', locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology58, locale67, (java.lang.Integer) (-1));
        java.util.Locale locale73 = dateTimeParserBucket72.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.util.Locale locale77 = java.util.Locale.US;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.lang.String str79 = locale76.getCountry();
        java.lang.String str80 = locale76.getISO3Country();
        dateTimeParserBucket72.saveField(dateTimeFieldType74, "CHN", locale76);
        int int82 = dateTimeField38.getMaximumShortTextLength(locale76);
        int int83 = dateTimeField22.getMaximumTextLength(locale76);
        boolean boolean84 = dateTimeZone2.equals((java.lang.Object) dateTimeField22);
        long long86 = dateTimeField22.remainder((long) (-762886));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4199999L + "'", long31 == 4199999L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4199999L + "'", long35 == 4199999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4200000L + "'", long45 == 4200000L);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100" + "'", str54, "100");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str66, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "it" + "'", str68, "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "cinese (Cina)" + "'", str69, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "120" + "'", str70, "120");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "JP" + "'", str79, "JP");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "JPN" + "'", str80, "JPN");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2677637114L + "'", long86 == 2677637114L);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket15.getZone();
        long long22 = dateTimeParserBucket15.computeMillis(true, "67");
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 1910);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = dateTimeField26.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int33 = dateTimeField30.getDifference((long) 12, 1L);
        java.util.Locale locale38 = new java.util.Locale("GBR", "weekOfWeekyear", "");
        java.lang.String str39 = dateTimeField30.getAsShortText((int) '4', locale38);
        int int40 = dateTimeField26.getMaximumTextLength(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField26.getType();
        java.lang.String str42 = dateTimeField26.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str9, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "gbr_WEEKOFWEEKYEAR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "52" + "'", str39, "52");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str42, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int6 = dateTimeField4.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField7 = dateTimeField4.getDurationField();
        int int9 = dateTimeField4.getMaximumValue((long) (short) 1);
        long long11 = dateTimeField4.roundHalfEven((long) ' ');
        int int13 = dateTimeField4.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "Chinese (China)");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = dateTimeField4.getAsShortText(readablePartial14, (int) (short) -1, locale18);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = dateTimeField4.getAsShortText((long) (byte) 100, locale22);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale27 = new java.util.Locale("Italia");
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        java.util.Locale locale51 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology49, locale51, (java.lang.Integer) 12, (int) (byte) 10);
        dateTimeParserBucket54.setPivotYear((java.lang.Integer) 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        dateTimeParserBucket54.saveField(dateTimeFieldType57, 12);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket54.getZone();
        java.util.Locale locale61 = dateTimeParserBucket54.getLocale();
        long long63 = dateTimeParserBucket54.computeMillis(true);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        boolean boolean68 = dateTimeField67.isLenient();
        long long70 = dateTimeField67.roundFloor((long) 10);
        int int72 = dateTimeField67.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial73 = null;
        int int74 = dateTimeField67.getMaximumValue(readablePartial73);
        java.util.Locale locale77 = new java.util.Locale("cinese (Cina)");
        java.lang.String str78 = locale77.getDisplayCountry();
        java.lang.String str79 = dateTimeField67.getAsShortText(70, locale77);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((-59674147200000L), chronology64, locale77, (java.lang.Integer) (-51011448));
        java.lang.String str82 = locale77.getCountry();
        java.util.Locale.setDefault(category0, locale77);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType84.getField(chronology85);
        boolean boolean87 = dateTimeField86.isLenient();
        long long89 = dateTimeField86.roundFloor((long) 10);
        int int91 = dateTimeField86.getMaximumValue((long) (byte) 1);
        long long93 = dateTimeField86.roundHalfFloor((long) (byte) -1);
        java.util.Locale locale94 = java.util.Locale.FRENCH;
        int int95 = dateTimeField86.getMaximumTextLength(locale94);
        java.util.Locale locale96 = locale94.stripExtensions();
        java.lang.String str97 = locale94.getScript();
        java.util.Locale.setDefault(category0, locale94);
        java.lang.String str99 = locale94.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4200000L + "'", long11 == 4200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale18.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1969" + "'", str24, "1969");
        org.junit.Assert.assertEquals(locale27.toString(), "italia");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "italia");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "italia");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals(locale51.toString(), "utc");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "utc");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 12L + "'", long63 == 12L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-31531800000L) + "'", long70 == (-31531800000L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertEquals(locale77.toString(), "cinese (cina)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "70" + "'", str79, "70");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-31531800000L) + "'", long89 == (-31531800000L));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 292278993 + "'", int91 == 292278993);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 4200000L + "'", long93 == 4200000L);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        boolean boolean8 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale11.getDisplayName(locale13);
        java.lang.String str16 = dateTimeField7.getAsText(readablePartial9, (int) 'x', locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology4, locale13, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType2.getField(chronology19);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology19, locale25, (java.lang.Integer) 292278993);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, 1L);
        int int36 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) "it");
        org.joda.time.Chronology chronology39 = chronology19.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeZone42.getShortName((long) 100, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(4200010L, chronology19, locale47, (java.lang.Integer) 366, 99);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long59 = dateTimeZone56.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int65 = dateTimeField63.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField66 = dateTimeField63.getDurationField();
        int int68 = dateTimeField63.getMaximumValue((long) (short) 1);
        long long70 = dateTimeField63.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial71 = null;
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder73.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder77 = builder73.clearExtensions();
        java.util.Locale locale78 = builder77.build();
        java.lang.String str79 = dateTimeField63.getAsShortText(readablePartial71, (int) (byte) 100, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.lang.String str81 = dateTimeZone56.getShortName((long) 1970, locale78);
        long long84 = dateTimeZone56.adjustOffset(3061065600000L, true);
        long long87 = dateTimeZone56.adjustOffset(127L, false);
        long long90 = dateTimeZone56.convertLocalToUTC(7200999L, true);
        org.joda.time.Chronology chronology91 = chronology19.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField92 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology19.monthOfYear();
        long long95 = dateTimeField93.roundCeiling((long) 335475);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = dateTimeField93.getType();
        org.joda.time.DurationFieldType durationFieldType97 = dateTimeFieldType96.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "120" + "'", str16, "120");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4200000L + "'", long59 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4200000L + "'", long70 == 4200000L);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100" + "'", str79, "100");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:10" + "'", str81, "-01:10");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3061065600000L + "'", long84 == 3061065600000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 127L + "'", long87 == 127L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 11400999L + "'", long90 == 11400999L);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 2678400000L + "'", long95 == 2678400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
        org.junit.Assert.assertNotNull(durationFieldType97);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        java.util.Locale locale3 = new java.util.Locale("German", "86399", "67");
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = locale3.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "german_86399_67");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "86399" + "'", str4, "86399");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "german_86399_67");
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale locale18 = locale16.stripExtensions();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder21 = builder19.setLocale(locale20);
        java.util.Locale locale23 = new java.util.Locale("China");
        java.util.Locale.Builder builder24 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("French");
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder29 = builder26.setLanguageTag("Japan");
        java.util.Locale.Builder builder31 = builder29.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int36 = dateTimeField34.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField37 = dateTimeField34.getDurationField();
        int int39 = dateTimeField34.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int[] intArray46 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int47 = dateTimeField34.getMaximumValue(readablePartial40, intArray46);
        java.util.Locale locale51 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology53, locale54, (java.lang.Integer) 1);
        java.lang.String str57 = locale54.getScript();
        java.lang.String str58 = locale51.getDisplayScript(locale54);
        java.util.Set<java.lang.String> strSet59 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str60 = dateTimeField34.getAsText((long) (-1), locale54);
        java.util.Locale.Builder builder61 = builder29.setLocale(locale54);
        java.util.Locale.Builder builder62 = builder61.clearExtensions();
        java.util.Locale.Builder builder64 = builder62.setLanguage("china");
        java.util.Locale.Builder builder66 = builder64.removeUnicodeLocaleAttribute("Germania");
        java.util.Locale locale67 = builder66.build();
        java.lang.String str68 = locale18.getDisplayScript(locale67);
        boolean boolean69 = locale67.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian (Italy)" + "'", str17, "Italian (Italy)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals(locale23.toString(), "china");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertEquals(locale51.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1969" + "'", str60, "1969");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "china");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        long long26 = dateTimeZone23.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField33 = dateTimeField30.getDurationField();
        int int35 = dateTimeField30.getMaximumValue((long) (short) 1);
        long long37 = dateTimeField30.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial38 = null;
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder44 = builder40.clearExtensions();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = dateTimeField30.getAsShortText(readablePartial38, (int) (byte) 100, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = dateTimeZone23.getShortName((long) 1970, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale45);
        java.lang.Object obj50 = dateTimeParserBucket49.saveState();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket49.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket49.getZone();
        java.lang.Integer int53 = dateTimeParserBucket49.getPivotYear();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology55, locale56, (java.lang.Integer) 1);
        java.lang.Object obj59 = dateTimeParserBucket58.saveState();
        long long60 = dateTimeParserBucket58.computeMillis();
        java.lang.Object obj61 = dateTimeParserBucket58.saveState();
        dateTimeParserBucket58.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        boolean boolean69 = dateTimeField68.isLenient();
        org.joda.time.ReadablePartial readablePartial70 = null;
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str73 = locale72.getDisplayName();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale74.getLanguage();
        java.lang.String str76 = locale72.getDisplayName(locale74);
        java.lang.String str77 = dateTimeField68.getAsText(readablePartial70, (int) 'x', locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology65, locale74, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.weekOfWeekyear();
        org.joda.time.DurationField durationField82 = chronology80.hours();
        boolean boolean83 = dateTimeParserBucket58.restoreState((java.lang.Object) chronology80);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTimeParserBucket58.getZone();
        boolean boolean85 = dateTimeZone84.isFixed();
        int int87 = dateTimeZone84.getStandardOffset(4039374720000L);
        dateTimeParserBucket49.setZone(dateTimeZone84);
        java.util.TimeZone timeZone89 = dateTimeZone84.toTimeZone();
        java.util.TimeZone timeZone90 = dateTimeZone84.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4200000L + "'", long26 == 4200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4200000L + "'", long37 == 4200000L);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:10" + "'", str48, "-01:10");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4199999L + "'", long60 == 4199999L);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Chinese (China)" + "'", str73, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "it" + "'", str75, "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "cinese (Cina)" + "'", str76, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "120" + "'", str77, "120");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-4200000) + "'", int87 == (-4200000));
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "GMT-01:10");
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "GMT-01:10");
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekyear();
        long long25 = dateTimeField22.set(132539425228800010L, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61814159999990L) + "'", long25 == (-61814159999990L));
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.lang.String str2 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        int int5 = dateTimeZone1.getOffsetFromLocal((long) (byte) 10);
        int int7 = dateTimeZone1.getOffset(100L);
        boolean boolean9 = dateTimeZone1.isStandardOffset((long) 2);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.PRC;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long20 = dateTimeField18.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField18.getMaximumValue(readablePartial21);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str28 = locale24.getExtension('a');
        java.lang.String str29 = dateTimeField18.getAsShortText(0L, locale24);
        java.lang.String str30 = locale15.getDisplayLanguage(locale24);
        java.lang.String str31 = locale11.getDisplayName(locale24);
        java.lang.String str32 = dateTimeZone1.getShortName(630292205148L, locale11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        boolean boolean40 = dateTimeField39.isLenient();
        org.joda.time.ReadablePartial readablePartial41 = null;
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale43.getDisplayName(locale45);
        java.lang.String str48 = dateTimeField39.getAsText(readablePartial41, (int) 'x', locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology36, locale45, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = chronology51.hours();
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder56 = builder54.setLocale(locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        boolean boolean60 = dateTimeField59.isLenient();
        org.joda.time.ReadablePartial readablePartial61 = null;
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayName(locale65);
        java.lang.String str68 = dateTimeField59.getAsText(readablePartial61, (int) 'x', locale65);
        java.lang.String str69 = locale55.getDisplayLanguage(locale65);
        java.lang.String str70 = locale55.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology51, locale55);
        org.joda.time.DurationField durationField72 = chronology51.years();
        org.joda.time.DateTimeField dateTimeField73 = chronology51.dayOfMonth();
        long long77 = chronology51.add((long) 12, (long) (byte) 1, 10);
        org.joda.time.Chronology chronology79 = null;
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology79, locale80, (java.lang.Integer) 1);
        java.lang.Object obj83 = dateTimeParserBucket82.saveState();
        long long84 = dateTimeParserBucket82.computeMillis();
        java.lang.Object obj85 = dateTimeParserBucket82.saveState();
        dateTimeParserBucket82.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTimeParserBucket82.getZone();
        org.joda.time.Chronology chronology89 = chronology51.withZone(dateTimeZone88);
        org.joda.time.DateTimeField dateTimeField90 = chronology51.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        long long94 = chronology51.add(readablePeriod91, (long) 12, 0);
        org.joda.time.DateTimeField dateTimeField95 = chronology51.secondOfDay();
        boolean boolean96 = dateTimeZone1.equals((java.lang.Object) chronology51);
        java.util.Locale locale98 = null;
        java.lang.String str99 = dateTimeZone1.getShortName(157593600000L, locale98);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 999 + "'", int22 == 999);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str30, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str31, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (China)" + "'", str44, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cinese (Cina)" + "'", str47, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "120" + "'", str48, "120");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese (China)" + "'", str64, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cinese (Cina)" + "'", str67, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "120" + "'", str68, "120");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tedesco" + "'", str69, "tedesco");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "deu" + "'", str70, "deu");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 22L + "'", long77 == 22L);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 12L + "'", long94 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "+00:00" + "'", str99, "+00:00");
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int27 = dateTimeField25.getLeapAmount((long) ' ');
        long long29 = dateTimeField25.roundFloor((long) 'x');
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = dateTimeField25.getAsShortText(59, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 360000000, chronology18, locale31, (java.lang.Integer) 1970, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41);
        java.lang.Integer int45 = dateTimeParserBucket44.getPivotYear();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long50 = dateTimeZone48.convertUTCToLocal(3061065600000L);
        org.joda.time.Chronology chronology51 = chronology46.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.centuryOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        boolean boolean58 = dateTimeField57.isLenient();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField57.getAsText(readablePartial59, (int) 'x', locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology54, locale63, (java.lang.Integer) (-1));
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet73 = locale70.getExtensionKeys();
        java.lang.String str74 = locale63.getDisplayCountry(locale70);
        java.lang.String str75 = locale63.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology46, locale63, (java.lang.Integer) 1969);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(378687000001L, chronology37, locale63);
        org.joda.time.DurationField durationField79 = chronology37.seconds();
        org.joda.time.DurationField durationField80 = chronology37.millis();
        org.joda.time.DurationField durationField81 = chronology37.minutes();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3061425600000L + "'", long50 == 3061425600000L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (China)" + "'", str62, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese (Cina)" + "'", str65, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "120" + "'", str66, "120");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italy" + "'", str74, "Italy");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.halfdayOfDay();
        org.joda.time.DurationField durationField23 = chronology16.centuries();
        org.joda.time.DurationField durationField24 = chronology16.weeks();
        org.joda.time.DurationField durationField25 = chronology16.weekyears();
        org.joda.time.DurationField durationField26 = chronology16.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21);
        java.lang.Integer int25 = dateTimeParserBucket24.getPivotYear();
        long long28 = dateTimeParserBucket24.computeMillis(true, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        boolean boolean39 = dateTimeField38.isLenient();
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getLanguage();
        java.lang.String str46 = locale42.getDisplayName(locale44);
        java.lang.String str47 = dateTimeField38.getAsText(readablePartial40, (int) 'x', locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology35, locale44, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale52 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology50, locale52, (java.lang.Integer) 12, (int) (byte) 10);
        java.util.Set<java.lang.String> strSet56 = locale52.getUnicodeLocaleKeys();
        dateTimeParserBucket24.saveField(dateTimeFieldType29, "\u65e5\u672c", locale52);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType29.getRangeDurationType();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale68.getDisplayName();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField64.getAsText(readablePartial66, (int) 'x', locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology61, locale70, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = chronology76.hours();
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology76, locale79, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField82 = chronology76.centuries();
        boolean boolean83 = dateTimeFieldType29.isSupported(chronology76);
        dateTimeParserBucket15.saveField(dateTimeFieldType29, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str88 = dateTimeFieldType87.toString();
        java.util.Locale.Builder builder90 = new java.util.Locale.Builder();
        java.util.Locale locale91 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder92 = builder90.setLocale(locale91);
        java.util.Set<java.lang.String> strSet93 = locale91.getUnicodeLocaleAttributes();
        dateTimeParserBucket15.saveField(dateTimeFieldType87, "Japanisch", locale91);
        java.lang.String str95 = dateTimeFieldType87.getName();
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType87.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (China)" + "'", str43, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese (Cina)" + "'", str46, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "120" + "'", str47, "120");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals(locale52.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese (China)" + "'", str69, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "cinese (Cina)" + "'", str72, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "120" + "'", str73, "120");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "year" + "'", str88, "year");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "year" + "'", str95, "year");
        org.junit.Assert.assertNull(durationFieldType96);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        long long10 = dateTimeParserBucket4.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getLeapAmount((long) 0);
        long long17 = dateTimeField13.roundHalfCeiling((long) (byte) 0);
        long long20 = dateTimeField13.set((-1L), 100);
        int int22 = dateTimeField13.get((long) (byte) 100);
        boolean boolean24 = dateTimeField13.isLeap((long) (short) 10);
        dateTimeParserBucket4.saveField(dateTimeField13, 9);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 100);
        long long29 = dateTimeParserBucket4.computeMillis();
        java.lang.Integer int30 = dateTimeParserBucket4.getOffsetInteger();
        java.util.Locale locale31 = dateTimeParserBucket4.getLocale();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-58979923200001L) + "'", long20 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61851600000001L) + "'", long29 == (-61851600000001L));
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        java.lang.Object obj38 = dateTimeParserBucket36.saveState();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket36.getChronology();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket36.getChronology();
        int int41 = dateTimeParserBucket36.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        java.util.Locale locale1 = new java.util.Locale("TWN");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "twn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekyearOfCentury();
        int int25 = dateTimeField23.getMaximumValue(2000L);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = locale27.getDisplayCountry(locale28);
        java.lang.String str34 = dateTimeField23.getAsShortText((long) 10, locale27);
        boolean boolean35 = dateTimeField23.isSupported();
        int int36 = dateTimeField23.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 99 + "'", int25 == 99);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "70" + "'", str34, "70");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        long long21 = dateTimeField19.roundHalfFloor((-16753013706000L));
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfDay();
        int int45 = dateTimeField42.getDifference((long) 292278993, 0L);
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeField42.getAsShortText(readablePartial46, 1439, locale48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int55 = dateTimeField53.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField56 = dateTimeField53.getDurationField();
        int int58 = dateTimeField53.getMaximumValue((long) (short) 1);
        long long60 = dateTimeField53.roundHalfEven((long) ' ');
        org.joda.time.ReadablePartial readablePartial61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int66 = dateTimeField64.getLeapAmount((long) 0);
        int int68 = dateTimeField64.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial69 = null;
        int[] intArray74 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int75 = dateTimeField64.getMaximumValue(readablePartial69, intArray74);
        int int76 = dateTimeField53.getMinimumValue(readablePartial61, intArray74);
        int int77 = dateTimeField42.getMinimumValue(readablePartial50, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField19.addWrapField(readablePartial22, 81, intArray74, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 81");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-16753046400000L) + "'", long21 == (-16753046400000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 81 + "'", int45 == 81);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1439" + "'", str49, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        long long18 = dateTimeParserBucket16.computeMillis();
        long long21 = dateTimeParserBucket16.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        dateTimeParserBucket16.saveField(dateTimeFieldType22, 9);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType22.getDurationType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        boolean boolean31 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale34.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayName(locale36);
        java.lang.String str39 = dateTimeField30.getAsText(readablePartial32, (int) 'x', locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology27, locale36, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.monthOfYear();
        java.lang.String str46 = chronology42.toString();
        java.lang.String str47 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType22.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        boolean boolean56 = dateTimeField55.isLenient();
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale59.getDisplayName(locale61);
        java.lang.String str64 = dateTimeField55.getAsText(readablePartial57, (int) 'x', locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology52, locale61, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField69 = chronology67.hours();
        java.util.Locale locale70 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology67, locale70, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField73 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfEra();
        java.util.Locale locale76 = java.util.Locale.US;
        java.lang.String str77 = locale76.getISO3Country();
        java.lang.String str78 = dateTimeField74.getAsText((int) (byte) 10, locale76);
        java.util.Locale locale80 = new java.util.Locale("UTC");
        java.lang.String str81 = locale76.getDisplayScript(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(18L, chronology42, locale76, (java.lang.Integer) (-4200000), 1);
        java.lang.Object obj85 = dateTimeParserBucket84.saveState();
        dateTimeParserBucket84.setOffset((java.lang.Integer) 3368);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Chinese (China)" + "'", str35, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cinese (Cina)" + "'", str38, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "120" + "'", str39, "120");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (China)" + "'", str60, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "it" + "'", str62, "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "cinese (Cina)" + "'", str63, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "120" + "'", str64, "120");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "USA" + "'", str77, "USA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "10" + "'", str78, "10");
        org.junit.Assert.assertEquals(locale80.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Canada", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        java.lang.String str6 = languageRange2.getRange();
        double double7 = languageRange2.getWeight();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "canada" + "'", str3, "canada");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "canada" + "'", str4, "canada");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "canada" + "'", str5, "canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "canada" + "'", str6, "canada");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.util.Locale locale19 = new java.util.Locale("UTC");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology17, locale19, (java.lang.Integer) 12, (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology17.get(readablePeriod23, (-421199000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "utc");
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("998");
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("japan");
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale locale13 = builder8.build();
        java.lang.String str14 = locale13.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja_JP" + "'", str14, "ja_JP");
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((-58979923200001L), 0);
        long long26 = dateTimeField20.add(439L, (-11201));
        long long28 = dateTimeField20.roundHalfFloor(1958L);
        long long31 = dateTimeField20.add(4200013L, 0);
        int int32 = dateTimeField20.getMaximumValue();
        int int34 = dateTimeField20.get(45789156600000L);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("Japan");
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int43 = dateTimeField41.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField44 = dateTimeField41.getDurationField();
        int int46 = dateTimeField41.getMaximumValue((long) (short) 1);
        long long48 = dateTimeField41.roundHalfEven((long) ' ');
        int int50 = dateTimeField41.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial51 = null;
        int int52 = dateTimeField41.getMaximumValue(readablePartial51);
        int int54 = dateTimeField41.getLeapAmount((long) 'a');
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = java.util.Locale.US;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.lang.String str61 = dateTimeField41.getAsShortText(readablePartial55, 100, locale58);
        java.lang.String str62 = locale38.getDisplayName(locale58);
        java.lang.String str63 = locale58.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = dateTimeField20.set((-115200000L), "+00:00:00.100", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:00.100\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-58979923200001L) + "'", long23 == (-58979923200001L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-6774364799561L) + "'", long26 == (-6774364799561L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-259200000L) + "'", long28 == (-259200000L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4200013L + "'", long31 == 4200013L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "japan");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278993 + "'", int46 == 292278993);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "japan" + "'", str62, "japan");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "United States" + "'", str63, "United States");
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology17.weeks();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology28, locale29, (java.lang.Integer) 1);
        java.lang.Object obj32 = dateTimeParserBucket31.saveState();
        long long33 = dateTimeParserBucket31.computeMillis();
        java.lang.Object obj34 = dateTimeParserBucket31.saveState();
        dateTimeParserBucket31.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        boolean boolean42 = dateTimeField41.isLenient();
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = locale45.getDisplayName();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = locale45.getDisplayName(locale47);
        java.lang.String str50 = dateTimeField41.getAsText(readablePartial43, (int) 'x', locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology38, locale47, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekOfWeekyear();
        org.joda.time.DurationField durationField55 = chronology53.hours();
        boolean boolean56 = dateTimeParserBucket31.restoreState((java.lang.Object) chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket31.getZone();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = dateTimeZone57.getOffset(readableInstant58);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone57.isLocalDateTimeGap(localDateTime60);
        org.joda.time.Chronology chronology62 = chronology17.withZone(dateTimeZone57);
        long long65 = dateTimeZone57.adjustOffset((long) 2067, true);
        boolean boolean66 = dateTimeZone57.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (China)" + "'", str46, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cinese (Cina)" + "'", str49, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "120" + "'", str50, "120");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2067L + "'", long65 == 2067L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int6 = dateTimeField4.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField7 = dateTimeField4.getDurationField();
        int int9 = dateTimeField4.getMaximumValue((long) (short) 1);
        long long11 = dateTimeField4.roundHalfEven((long) ' ');
        int int13 = dateTimeField4.getMinimumValue((long) 100);
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale18 = new java.util.Locale("", "Chinese (China)");
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = dateTimeField4.getAsShortText(readablePartial14, (int) (short) -1, locale18);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = dateTimeField4.getAsShortText((long) (byte) 100, locale22);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale27 = new java.util.Locale("Italia");
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "twn");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale18.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertEquals(locale27.toString(), "italia");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "italia");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "italia");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "italia");
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-56), 24);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.halfdayOfDay();
        long long30 = dateTimeField28.roundHalfFloor(1L);
        long long32 = dateTimeField28.roundCeiling(9223371985593600010L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9223371985636800000L + "'", long32 == 9223371985636800000L);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial30 = null;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale32.getDisplayName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = dateTimeField28.getAsText(readablePartial30, (int) 'x', locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology25, locale34, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType0.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.weekyear();
        org.joda.time.DurationField durationField47 = chronology40.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology40.secondOfDay();
        long long52 = dateTimeField49.add((-346724944789074L), (int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (China)" + "'", str33, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese (Cina)" + "'", str36, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "120" + "'", str37, "120");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-346724944790074L) + "'", long52 == (-346724944790074L));
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        org.joda.time.DurationField durationField20 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfSecond();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale23.getLanguage();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27);
        java.lang.Integer int31 = dateTimeParserBucket30.getPivotYear();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale34, (java.lang.Integer) 1);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        long long38 = dateTimeParserBucket36.computeMillis();
        dateTimeParserBucket36.setPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        dateTimeParserBucket36.saveField(dateTimeFieldType41, "zh_CN", locale45);
        boolean boolean47 = dateTimeParserBucket30.restoreState((java.lang.Object) locale45);
        java.lang.String str48 = locale23.getDisplayVariant(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(967766400010L, chronology17, locale45, (java.lang.Integer) 10);
        long long53 = dateTimeParserBucket50.computeMillis(false, "und");
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket50.getZone();
        java.util.Locale locale58 = new java.util.Locale("888", "giapponese (Giappone)");
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.US;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.lang.String str62 = locale59.getDisplayScript();
        java.lang.String str63 = locale58.getDisplayLanguage(locale59);
        java.lang.String str64 = dateTimeZone54.getName(4039633920000L, locale59);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone54.isLocalDateTimeGap(localDateTime65);
        int int68 = dateTimeZone54.getStandardOffset(31539540012L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 967766400010L + "'", long53 == 967766400010L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals(locale58.toString(), "888_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "888" + "'", str63, "888");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale11.getLanguage();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder10.removeUnicodeLocaleAttribute("382");
        java.util.Locale.Builder builder19 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder10.setScript("Taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Taiwan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CHN" + "'", str14, "CHN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfDay();
        org.joda.time.DurationField durationField21 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.dayOfYear();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("366");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((-4241720132320001L), chronology17, locale26, (java.lang.Integer) (-1030436006), 9496);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket29.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category0, locale1);
        java.lang.Object obj3 = null;
        boolean boolean4 = locale1.equals(obj3);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        long long20 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, "Japon", locale23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        boolean boolean32 = dateTimeField31.isLenient();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale35.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = dateTimeField31.getAsText(readablePartial33, (int) 'x', locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology28, locale37, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.DurationField durationField45 = chronology43.hours();
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder48 = builder46.setLocale(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        boolean boolean52 = dateTimeField51.isLenient();
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale55.getDisplayName(locale57);
        java.lang.String str60 = dateTimeField51.getAsText(readablePartial53, (int) 'x', locale57);
        java.lang.String str61 = locale47.getDisplayLanguage(locale57);
        java.lang.String str62 = locale47.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology43, locale47);
        org.joda.time.DateTimeField dateTimeField64 = chronology43.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType21.getField(chronology43);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType21.getRangeDurationType();
        java.lang.String str67 = dateTimeFieldType21.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cinese (Cina)" + "'", str39, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "120" + "'", str40, "120");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (China)" + "'", str56, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it" + "'", str58, "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "cinese (Cina)" + "'", str59, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "120" + "'", str60, "120");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tedesco" + "'", str61, "tedesco");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "deu" + "'", str62, "deu");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "minuteOfHour" + "'", str67, "minuteOfHour");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName(9L);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        long long8 = dateTimeZone0.nextTransition(31536000001L);
        java.util.Locale locale10 = java.util.Locale.PRC;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        long long15 = dateTimeField13.roundHalfEven((long) 10);
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField13.getMaximumValue(readablePartial16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str23 = locale19.getExtension('a');
        java.lang.String str24 = dateTimeField13.getAsShortText(0L, locale19);
        java.lang.String str25 = locale10.getDisplayLanguage(locale19);
        java.lang.String str26 = locale19.getDisplayScript();
        java.util.Locale locale29 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 1);
        java.lang.String str35 = locale32.getScript();
        java.lang.String str36 = locale29.getDisplayScript(locale32);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale19.getDisplayLanguage(locale32);
        java.lang.String str39 = dateTimeZone0.getName(63072000000L, locale19);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone0.isLocalDateTimeGap(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31536000001L + "'", long8 == 31536000001L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str25, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Japanisch" + "'", str38, "Japanisch");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long17 = dateTimeParserBucket15.computeMillis();
        long long20 = dateTimeParserBucket15.computeMillis(true, "cinese (Cina)");
        int int21 = dateTimeParserBucket15.getOffset();
        long long24 = dateTimeParserBucket15.computeMillis(true, "Japon");
        java.lang.Object obj25 = dateTimeParserBucket15.saveState();
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 366);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology17.getZone();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology23, locale32, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField40 = chronology38.hours();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology38, locale41, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField44 = chronology38.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType0.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField51 = chronology38.weekyear();
        java.util.Locale locale55 = new java.util.Locale("", "cinese (Cina)");
        java.lang.String str56 = dateTimeField51.getAsShortText(99, locale55);
        java.lang.String str57 = locale55.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals(locale55.toString(), "_CINESE (CINA)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "99" + "'", str56, "99");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 10);
        dateTimeParserBucket4.setOffset((java.lang.Integer) (-109));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        long long9 = dateTimeParserBucket4.computeMillis(false, "120");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket4.saveField(dateTimeFieldType10, 2922789);
        dateTimeParserBucket4.setOffset((java.lang.Integer) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket4.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket4.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.millis();
        org.joda.time.DurationField durationField18 = chronology16.weekyears();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, 1L);
        java.lang.String str11 = dateTimeZone8.getID();
        dateTimeParserBucket4.setZone(dateTimeZone8);
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 292278993);
        dateTimeParserBucket4.setOffset((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket4.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        boolean boolean21 = dateTimeField20.isLenient();
        int int24 = dateTimeField20.getDifference((long) (short) 1, (long) 10);
        long long27 = dateTimeField20.add(1L, 1L);
        long long29 = dateTimeField20.roundFloor((long) (byte) -1);
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField20.getMaximumValue(readablePartial30);
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale36 = new java.util.Locale("", "tedesco");
        java.lang.String str37 = dateTimeField20.getAsText(readablePartial32, 998, locale36);
        long long40 = dateTimeField20.add(31570320998L, 13);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField20.getType();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        dateTimeParserBucket4.saveField(dateTimeFieldType41, 70);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekOfWeekyear();
        org.joda.time.Chronology chronology63 = chronology61.withUTC();
        boolean boolean64 = dateTimeFieldType41.isSupported(chronology63);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType41.getDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31536000001L + "'", long27 == 31536000001L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-31536000000L) + "'", long29 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertEquals(locale36.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "998" + "'", str37, "998");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 441797520998L + "'", long40 == 441797520998L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(durationFieldType65);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology18.weekyearOfCentury();
        long long50 = dateTimeField48.roundHalfEven((long) 382);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.monthOfYear();
        java.lang.String str31 = chronology27.toString();
        java.util.Locale locale34 = new java.util.Locale("hi!", "Chinese");
        java.lang.String str35 = locale34.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((-61851600000009L), chronology27, locale34, (java.lang.Integer) 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_CHINESE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1L);
        long long6 = dateTimeZone1.adjustOffset(1L, true);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone1.getOffset(readableInstant7);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket15.getZone();
        dateTimeParserBucket15.setOffset(0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        boolean boolean28 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale31.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = dateTimeField27.getAsText(readablePartial29, (int) 'x', locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology24, locale33, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        dateTimeParserBucket15.saveField(dateTimeFieldType43, 967774799);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese (Cina)" + "'", str35, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "120" + "'", str36, "120");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getExtension('a');
        java.lang.String str35 = locale29.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology27.clockhourOfDay();
        org.joda.time.DurationField durationField39 = chronology27.weekyears();
        org.joda.time.DurationField durationField40 = chronology27.seconds();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c" + "'", str35, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        long long23 = dateTimeZone19.adjustOffset(1L, false);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) 19);
        boolean boolean27 = dateTimeZone19.isStandardOffset(86400000L);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone19.isLocalDateTimeGap(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.lang.String str15 = dateTimeField6.getAsText(readablePartial8, (int) 'x', locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology3, locale12, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean27 = dateTimeField26.isLenient();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = dateTimeField26.getAsText(readablePartial28, (int) 'x', locale32);
        java.lang.String str36 = locale22.getDisplayLanguage(locale32);
        java.lang.String str37 = locale22.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology18, locale22);
        org.joda.time.DateTimeField dateTimeField39 = chronology18.minuteOfHour();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(97L, chronology18, locale40, (java.lang.Integer) 12);
        org.joda.time.DateTimeField dateTimeField45 = chronology18.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField47 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField49 = chronology18.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (Cina)" + "'", str14, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "120" + "'", str15, "120");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese (China)" + "'", str31, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese (Cina)" + "'", str34, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "120" + "'", str35, "120");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tedesco" + "'", str36, "tedesco");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "deu" + "'", str37, "deu");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        int int25 = dateTimeField23.get((long) 600000);
        org.joda.time.ReadablePartial readablePartial26 = null;
        int int27 = dateTimeField23.getMinimumValue(readablePartial26);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder44 = builder43.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder46 = builder43.removeUnicodeLocaleAttribute("+00:00:11.114");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: +00:00:11.114 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale22, (java.lang.Integer) 4, 1970);
        long long29 = dateTimeParserBucket27.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone30.getMillisKeepLocal(dateTimeZone31, 1L);
        java.lang.String str34 = dateTimeZone31.getID();
        long long37 = dateTimeZone31.adjustOffset(31L, false);
        int int39 = dateTimeZone31.getStandardOffset((long) 9);
        long long41 = dateTimeZone31.nextTransition((long) 100);
        boolean boolean43 = dateTimeZone31.isStandardOffset((long) (byte) 0);
        dateTimeParserBucket27.setZone(dateTimeZone31);
        java.lang.String str45 = dateTimeZone31.toString();
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone31.isLocalDateTimeGap(localDateTime46);
        java.lang.String str49 = dateTimeZone31.getName(272589866524800998L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31L + "'", long37 == 31L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.UK;
        dateTimeParserBucket16.saveField(dateTimeFieldType17, "Chinese (China)", locale19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        boolean boolean26 = dateTimeField25.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getDisplayName();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = dateTimeField25.getAsText(readablePartial27, (int) 'x', locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology22, locale31, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType17.getField(chronology37);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale42.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology37, locale42, (java.lang.Integer) 999, (int) (byte) 10);
        java.lang.String str50 = locale42.getLanguage();
        java.lang.String str51 = locale42.getDisplayScript();
        java.lang.String str52 = locale42.getDisplayScript();
        java.util.Locale locale54 = new java.util.Locale("ita");
        java.lang.String str55 = locale42.getDisplayScript(locale54);
        java.lang.Class<?> wildcardClass56 = locale54.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese (Cina)" + "'", str33, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "120" + "'", str34, "120");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JP" + "'", str45, "JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JPN" + "'", str46, "JPN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja" + "'", str50, "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals(locale54.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("it", "China");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguage("GB");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder10 = builder6.setLanguageTag("January");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setLanguageTag("59");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 59 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        dateTimeParserBucket15.setOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone20.getMillisKeepLocal(dateTimeZone21, 1L);
        int int25 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.lang.String str26 = dateTimeZone20.toString();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        java.lang.String str29 = dateTimeZone20.getShortName((long) (short) 0);
        int int31 = dateTimeZone20.getStandardOffset(252378604999L);
        boolean boolean33 = dateTimeZone20.isStandardOffset((-60494598060000L));
        long long35 = dateTimeZone20.convertUTCToLocal(365L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 365L + "'", long35 == 365L);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeField32.set((-31540200000L), "\u4e0a\u5348");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale9.getDisplayName(locale11);
        java.lang.String str14 = dateTimeField5.getAsText(readablePartial7, (int) 'x', locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology2, locale11, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology17.hours();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology17, locale20, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField23 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.centuryOfEra();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology26, locale27, (java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int34 = dateTimeField32.getLeapAmount((long) 0);
        int int36 = dateTimeField32.getLeapAmount((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray42 = new int[] { (short) 0, 100, (byte) 10, (short) 0 };
        int int43 = dateTimeField32.getMaximumValue(readablePartial37, intArray42);
        int int44 = dateTimeField32.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField32.getType();
        java.util.Locale locale50 = new java.util.Locale("zh_CN", "China", "");
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        dateTimeParserBucket29.saveField(dateTimeFieldType45, "120", locale50);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology54 = chronology17.withZone(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isStandardOffset(132539198400000010L);
        long long58 = dateTimeZone53.convertUTCToLocal((-52786200000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (China)" + "'", str10, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Cina)" + "'", str13, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "120" + "'", str14, "120");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_cn_CHINA");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-52786200000L) + "'", long58 == (-52786200000L));
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        java.lang.String str21 = dateTimeField19.getAsShortText(4200000L);
        int int24 = dateTimeField19.getDifference(45480000L, (long) (-1177378992));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int[] intArray30 = null;
        int int31 = dateTimeField28.getMinimumValue(readablePartial29, intArray30);
        long long34 = dateTimeField28.addWrapField((long) 1, 12);
        dateTimeParserBucket4.saveField(dateTimeField28, 9);
        long long38 = dateTimeParserBucket4.computeMillis(false);
        long long40 = dateTimeParserBucket4.computeMillis(false);
        dateTimeParserBucket4.setOffset(97);
        java.lang.Object obj43 = dateTimeParserBucket4.saveState();
        java.lang.Object obj44 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.lang.String str58 = dateTimeField49.getAsText(readablePartial51, (int) 'x', locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale55, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.seconds();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology61.getZone();
        long long67 = chronology61.add((long) 1970, (long) 12, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField68 = chronology61.yearOfEra();
        org.joda.time.DurationField durationField69 = chronology61.years();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean73 = dateTimeZone71.isStandardOffset(120L);
        long long75 = dateTimeZone71.nextTransition(68401982L);
        org.joda.time.Chronology chronology76 = chronology61.withZone(dateTimeZone71);
        dateTimeParserBucket4.setZone(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 378691200001L + "'", long34 == 378691200001L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1893456000001L) + "'", long38 == (-1893456000001L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1893456000001L) + "'", long40 == (-1893456000001L));
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese (China)" + "'", str54, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese (Cina)" + "'", str57, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "120" + "'", str58, "120");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1958L + "'", long67 == 1958L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 68401982L + "'", long75 == 68401982L);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        java.lang.Object obj7 = dateTimeParserBucket4.saveState();
        dateTimeParserBucket4.setPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        boolean boolean15 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayName(locale20);
        java.lang.String str23 = dateTimeField14.getAsText(readablePartial16, (int) 'x', locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology11, locale20, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.hours();
        boolean boolean29 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket4.getZone();
        java.lang.Object obj31 = dateTimeParserBucket4.saveState();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField37.getAsText(readablePartial39, (int) 'x', locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology34, locale43, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = chronology49.hours();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology49, locale52, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField55 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology49.centuries();
        org.joda.time.DurationField durationField58 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField59 = chronology49.weekyearOfCentury();
        dateTimeParserBucket4.saveField(dateTimeField59, (int) 'x');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        boolean boolean68 = dateTimeField67.isLenient();
        org.joda.time.ReadablePartial readablePartial69 = null;
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str72 = locale71.getDisplayName();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = locale71.getDisplayName(locale73);
        java.lang.String str76 = dateTimeField67.getAsText(readablePartial69, (int) 'x', locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology64, locale73, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology79 = dateTimeParserBucket78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.weekOfWeekyear();
        org.joda.time.DurationField durationField81 = chronology79.hours();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology79, locale82, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField85 = chronology79.months();
        org.joda.time.DateTimeField dateTimeField86 = chronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = chronology79.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField88 = chronology79.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology79.hourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology79.millisOfDay();
        boolean boolean91 = dateTimeParserBucket4.restoreState((java.lang.Object) chronology79);
        org.joda.time.DurationField durationField92 = chronology79.millis();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "cinese (Cina)" + "'", str45, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "120" + "'", str46, "120");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (China)" + "'", str72, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "it" + "'", str74, "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "cinese (Cina)" + "'", str75, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "120" + "'", str76, "120");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        boolean boolean5 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = dateTimeField4.getAsText(readablePartial6, (int) 'x', locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology1, locale10, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.weekyear();
        org.joda.time.DurationField durationField23 = chronology16.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology16.getDateTimeMillis(2922789, 190800000, 1849, 252000000, 998, (-626), 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cinese (Cina)" + "'", str12, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "120" + "'", str13, "120");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 10);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (-1));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        boolean boolean10 = dateTimeField9.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = dateTimeField9.getAsText(readablePartial11, (int) 'x', locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology6, locale15, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DurationField durationField23 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.minuteOfDay();
        java.lang.String str25 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.monthOfYear();
        boolean boolean29 = dateTimeZone2.equals((java.lang.Object) dateTimeField28);
        java.lang.String str31 = dateTimeField28.getAsShortText((-28857600000L));
        long long34 = dateTimeField28.add(3600001L, (-100860));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:10" + "'", str4, "-01:10");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Cina)" + "'", str17, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Feb" + "'", str31, "Feb");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-265236159599999L) + "'", long34 == (-265236159599999L));
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 1);
        java.lang.Object obj5 = dateTimeParserBucket4.saveState();
        long long6 = dateTimeParserBucket4.computeMillis();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        int int11 = dateTimeZone9.getOffsetFromLocal((long) (short) -1);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleKeys();
        java.lang.String str17 = dateTimeZone9.getShortName((long) 100, locale14);
        dateTimeParserBucket4.setZone(dateTimeZone9);
        long long21 = dateTimeZone9.convertLocalToUTC(0L, false);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.lang.String str28 = locale24.getCountry();
        java.lang.String str29 = locale24.getDisplayScript();
        java.lang.String str30 = dateTimeZone9.getShortName(2726899344000000L, locale24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeField35.getAsText(readablePartial37, (int) 'x', locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology32, locale41, (java.lang.Integer) (-1));
        java.util.Locale locale47 = dateTimeParserBucket46.getLocale();
        long long48 = dateTimeParserBucket46.computeMillis();
        long long51 = dateTimeParserBucket46.computeMillis(true, "cinese (Cina)");
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket46.getZone();
        long long53 = dateTimeParserBucket46.computeMillis();
        java.util.Locale locale54 = dateTimeParserBucket46.getLocale();
        java.util.Locale locale55 = dateTimeParserBucket46.getLocale();
        java.lang.Object obj56 = dateTimeParserBucket46.saveState();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        long long60 = dateTimeZone57.getMillisKeepLocal(dateTimeZone58, 1L);
        long long63 = dateTimeZone58.adjustOffset(1L, true);
        int int65 = dateTimeZone58.getOffsetFromLocal(0L);
        long long67 = dateTimeZone58.previousTransition((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone58.isLocalDateTimeGap(localDateTime68);
        boolean boolean71 = dateTimeZone58.isStandardOffset((long) (short) 0);
        long long75 = dateTimeZone58.convertLocalToUTC((long) 2, true, (long) 100);
        boolean boolean77 = dateTimeZone58.isStandardOffset(1L);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone58.isLocalDateTimeGap(localDateTime78);
        dateTimeParserBucket46.setZone(dateTimeZone58);
        boolean boolean81 = dateTimeZone58.isFixed();
        long long83 = dateTimeZone9.getMillisKeepLocal(dateTimeZone58, (-86400111L));
        long long85 = dateTimeZone9.convertUTCToLocal(45441993600100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "US" + "'", str28, "US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cinese (Cina)" + "'", str43, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "120" + "'", str44, "120");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2L + "'", long75 == 2L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-86400111L) + "'", long83 == (-86400111L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 45441993600100L + "'", long85 == 45441993600100L);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-FR");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr-fr" + "'", str4, "fr-fr");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        java.util.Locale locale3 = new java.util.Locale("", "DATETIMEFIELD[YEAROFCENTURY]", "taiwan");
        java.lang.String str4 = locale3.getScript();
        org.junit.Assert.assertEquals(locale3.toString(), "_DATETIMEFIELD[YEAROFCENTURY]_taiwan");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale4 = new java.util.Locale("China");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("French");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setLanguageTag("Japan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("German");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getLeapAmount((long) 0);
        org.joda.time.DurationField durationField18 = dateTimeField15.getDurationField();
        int int20 = dateTimeField15.getMaximumValue((long) (short) 1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int[] intArray27 = new int[] { '#', '4', '#', (byte) 0, (short) 1 };
        int int28 = dateTimeField15.getMaximumValue(readablePartial21, intArray27);
        java.util.Locale locale32 = new java.util.Locale("", "Chinese (China)");
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology34, locale35, (java.lang.Integer) 1);
        java.lang.String str38 = locale35.getScript();
        java.lang.String str39 = locale32.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str41 = dateTimeField15.getAsText((long) (-1), locale35);
        java.util.Locale.Builder builder42 = builder10.setLocale(locale35);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = locale43.getVariant();
        java.util.Locale.setDefault(locale43);
        java.util.Locale locale48 = new java.util.Locale("", "tedesco");
        java.lang.String str49 = locale43.getDisplayScript(locale48);
        java.lang.String str50 = locale43.getDisplayCountry();
        java.util.Locale.Builder builder51 = builder10.setLocale(locale43);
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder51.removeUnicodeLocaleAttribute("Englisch (Vereinigte Staaten von Amerika)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Englisch (Vereinigte Staaten von Amerika) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "china");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "china__#u-french");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 52, 35, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertEquals(locale32.toString(), "_CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale48.toString(), "_TEDESCO");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italia" + "'", str50, "Italia");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest32 {

    public static boolean debug = false;

    @Test
    public void test16001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16001");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getLanguage();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getLanguage();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale17, locale19, locale20, locale24, locale27, locale29, locale33, locale35, locale40, locale45, locale50, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        boolean boolean57 = strSet15.retainAll((java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList66);
        boolean boolean69 = strSet15.containsAll((java.util.Collection<java.util.Locale>) localeList68);
        java.lang.Object obj70 = null;
        boolean boolean71 = strSet15.remove(obj70);
        java.lang.Object[] objArray72 = strSet15.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet15.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strSet15.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator75 = strSet15.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "italiano" + "'", str18, "italiano");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "italiano" + "'", str36, "italiano");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertNotNull(strSpliterator75);
    }

    @Test
    public void test16002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16002");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        java.lang.String str6 = dateTimeZone1.toString();
        int int8 = dateTimeZone1.getOffset((long) 877);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test16003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16003");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfDay();
        org.joda.time.DurationField durationField37 = property36.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240011010L + "'", long31 == 4800240011010L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNull(durationField37);
    }

    @Test
    public void test16004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16004");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        java.util.Date date37 = localDateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusDays(34520736);
        int int40 = localDateTime39.size();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240011010L + "'", long31 == 4800240011010L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 11 08:00:18 GMT 2122");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
    }

    @Test
    public void test16005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16005");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusWeeks(4);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears(838);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withSecondOfMinute(975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 975 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test16006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16006");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMonths(362);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.dayOfWeek();
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        java.lang.String str38 = property37.getAsShortText();
        int int39 = property37.getMaximumValue();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.lang.String str42 = locale28.getDisplayScript(locale40);
        java.util.Locale locale46 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        java.lang.String str47 = locale40.getDisplayLanguage(locale46);
        java.util.Locale locale48 = locale46.stripExtensions();
        java.lang.String str49 = property24.getAsText(locale46);
        java.lang.String str50 = property24.getAsString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "44" + "'", str38, "44");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "44" + "'", str41, "44");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale46.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "German" + "'", str47, "German");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Saturday" + "'", str49, "Saturday");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "6" + "'", str50, "6");
    }

    @Test
    public void test16007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16007");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale locale11 = builder0.build();
        java.util.Locale locale12 = builder0.build();
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int[] intArray16 = localDateTime15.getValues();
        int int17 = localDateTime15.getEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusHours(22);
        int int27 = localDateTime26.size();
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = localDateTime26.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minus(readablePeriod30);
        int int32 = localDateTime31.getDayOfWeek();
        int int33 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int34 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime15.hourOfDay();
        java.util.Locale locale36 = java.util.Locale.US;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale36.getDisplayVariant(locale37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.LocalDateTime localDateTime53 = property50.setCopy("35");
        int int54 = property50.getLeapAmount();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        int int56 = property50.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String str58 = dateTimeZone40.getShortName((long) 0, locale55);
        java.lang.String str59 = locale37.getDisplayName(locale55);
        boolean boolean60 = locale55.hasExtensions();
        java.lang.String str61 = property35.getAsShortText(locale55);
        java.util.Set<java.lang.String> strSet62 = locale55.getUnicodeLocaleKeys();
        java.lang.String str63 = locale55.getDisplayScript();
        java.lang.String str64 = locale55.getScript();
        java.util.Locale.Builder builder65 = builder13.setLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder67 = builder13.setScript("34745084");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 34745084 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 2, 11, 35088620]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "44" + "'", str51, "44");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "italiano" + "'", str59, "italiano");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9" + "'", str61, "9");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test16008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16008");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(386);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(12);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMonthOfYear(34979950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34979950 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 642 + "'", int3 == 642);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test16009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16009");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:38:15.898Z");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:38:15.898z");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:38:15.898z");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test16010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16010");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.plusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekyear(929);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = localDateTime36.isSupported(durationFieldType38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime36.getFieldType((-7043));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -7043");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test16011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16011");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test16012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16012");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property20 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.plusYears(567);
        int int23 = localDateTime6.size();
        int int24 = localDateTime6.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test16013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16013");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(898627534L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = localDateTime1.getFieldType(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16014");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        int int39 = property31.getMaximumTextLength(locale37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = property47.getDifference(readableInstant48);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        int int55 = property47.getMaximumTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime57 = property47.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        long long60 = dateTime59.getMillis();
        int int61 = property31.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime63 = property31.setCopy(100);
        boolean boolean64 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withCenturyOfEra(669);
        boolean boolean68 = property4.equals((java.lang.Object) localDateTime63);
        org.joda.time.LocalDateTime localDateTime69 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property4.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4800246288714L + "'", long60 == 4800246288714L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
    }

    @Test
    public void test16015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16015");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        boolean boolean25 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        int int31 = dateTimeZone29.getOffset((long) 10);
        boolean boolean32 = dateTimeZone29.isFixed();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        int int48 = property40.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property40.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        long long53 = dateTime52.getMillis();
        int int54 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24, dateTimeZone29);
        int int56 = localDateTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        int int59 = localDateTime58.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusMinutes(22);
        int int62 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime55.getYear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime55.minusMonths(722);
        boolean boolean66 = languageRange1.equals((java.lang.Object) 722);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en" + "'", str7, "en");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4800246288741L + "'", long53 == 4800246288741L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 741 + "'", int56 == 741);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16016");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property21.setCopy("21");
        org.joda.time.LocalDateTime localDateTime26 = property21.setCopy("32");
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYear(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfDay(6);
        boolean boolean44 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minus(readablePeriod45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date47 = localDateTime43.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -994 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test16017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16017");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2122-02-11T09:37:49.186Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2122-02-11T09:37:49.186Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16018");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(11L);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths(1);
        int int5 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime2);
        int int6 = localDateTime2.getMillisOfSecond();
        java.util.Date date7 = localDateTime2.toDate();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        int int26 = localDateTime25.getDayOfMonth();
        int int27 = localDateTime25.getMonthOfYear();
        java.util.Locale locale31 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet32.spliterator();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minus(readablePeriod48);
        boolean boolean50 = strSet32.equals((java.lang.Object) localDateTime49);
        boolean boolean51 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.Chronology chronology52 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime25.minusHours(420);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 793 + "'", int6 == 793);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:44:48 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test16019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16019");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekOfWeekyear();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder17.setExtension('x', "Italian");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder23 = builder17.setLocale(locale22);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getCountry();
        java.lang.String str26 = locale22.getDisplayLanguage(locale24);
        int int27 = property16.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property16.roundCeilingCopy();
        int int29 = property16.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test16020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16020");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime16.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime16.withPeriodAdded(readablePeriod61, 77);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = localDateTime16.getFields();
        int int65 = localDateTime16.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime16.minusDays(51);
        org.joda.time.LocalDateTime.Property property68 = localDateTime16.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246288842L + "'", long55 == 4800246288842L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 42 + "'", int65 == 42);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test16021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16021");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("UTC");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.setRegion("4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test16022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16022");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = builder9.build();
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        java.lang.String str22 = locale20.getVariant();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = property31.getAsText(locale34);
        java.lang.String str38 = nameProvider23.getName(locale34, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = property46.getDifference(readableInstant47);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        int int54 = property46.getMaximumTextLength(locale52);
        org.joda.time.LocalDateTime localDateTime56 = property46.addToCopy((int) (byte) 100);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("hi!");
        int int59 = property46.getMaximumShortTextLength(locale58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        int int66 = localDateTime65.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        java.lang.String str69 = property68.getAsShortText();
        org.joda.time.LocalDateTime localDateTime71 = property68.setCopy("35");
        int int72 = property68.getLeapAmount();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        int int74 = property68.getMaximumShortTextLength(locale73);
        java.lang.String str75 = locale58.getDisplayLanguage(locale73);
        java.lang.String str76 = locale58.toLanguageTag();
        java.lang.String str79 = nameProvider23.getName(locale58, "hi!", "1");
        java.lang.String str80 = locale20.getDisplayScript(locale58);
        java.lang.String str81 = locale20.getDisplayCountry();
        java.lang.String str82 = locale20.getDisplayCountry();
        java.lang.String str83 = locale20.getDisplayCountry();
        java.util.Locale locale85 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale85);
        java.lang.String str87 = locale20.getDisplayCountry(locale85);
        java.lang.String str88 = locale10.getDisplayName(locale20);
        java.lang.String str89 = locale10.getScript();
        java.util.Set<java.lang.String> strSet90 = locale10.getUnicodeLocaleAttributes();
        strSet90.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "44" + "'", str69, "44");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "und" + "'", str76, "und");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "HI!" + "'", str81, "HI!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "HI!" + "'", str82, "HI!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "HI!" + "'", str83, "HI!");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "HI!" + "'", str87, "HI!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test16023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16023");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        long long19 = property18.remainder();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone24.isLocalDateTimeGap(localDateTime25);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category28, locale29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("hi!");
        int int51 = property38.getMaximumShortTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        int int58 = localDateTime57.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        java.lang.String str61 = property60.getAsShortText();
        org.joda.time.LocalDateTime localDateTime63 = property60.setCopy("35");
        int int64 = property60.getLeapAmount();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        int int66 = property60.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale50.getDisplayLanguage(locale65);
        java.util.Locale.setDefault(category28, locale50);
        java.util.Locale locale69 = java.util.Locale.US;
        java.util.Locale.setDefault(category28, locale69);
        java.util.Locale locale71 = java.util.Locale.UK;
        java.util.Locale.setDefault(category28, locale71);
        java.lang.String str73 = dateTimeZone24.getName(100L, locale71);
        java.lang.String str74 = dateTimeZone22.getShortName(4800245732508L, locale71);
        java.lang.String str75 = property18.getAsShortText(locale71);
        java.lang.String str76 = locale71.getISO3Language();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "44" + "'", str61, "44");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "35088925" + "'", str75, "35088925");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "eng" + "'", str76, "eng");
    }

    @Test
    public void test16024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16024");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("371", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16025");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        int int2 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 15, dateTimeZone5);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int13 = fixedDateTimeZone11.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone11.previousTransition((long) (short) 1);
        int int17 = fixedDateTimeZone11.getStandardOffset(4800245746509L);
        long long19 = dateTimeZone5.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone11, (long) 182);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 150L + "'", long19 == 150L);
    }

    @Test
    public void test16026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16026");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-01-22T08:05:40.223");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-22t08:05:40.223");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16027");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusHours((-1));
        int int13 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(262);
        org.joda.time.LocalDateTime localDateTime18 = property14.addToCopy((long) 833);
        java.lang.String str19 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "42" + "'", str19, "42");
    }

    @Test
    public void test16028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16028");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        int[] intArray17 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.minusHours((int) (short) 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35088999]");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test16029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16029");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusHours(2122);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) (byte) 1);
        long long13 = dateTimeZone9.nextTransition((long) 2022);
        java.lang.String str15 = dateTimeZone9.getShortName((long) (short) 1);
        java.lang.String str17 = dateTimeZone9.getNameKey((long) (short) 0);
        org.joda.time.DateTime dateTime18 = localDateTime4.toDateTime(dateTimeZone9);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = dateTimeZone9.getShortName(4800245715085L, locale23);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long33 = fixedDateTimeZone30.convertLocalToUTC((long) (-798211), true);
        long long35 = fixedDateTimeZone30.previousTransition(2022L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int int42 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withMillisOfDay(0);
        boolean boolean48 = fixedDateTimeZone30.equals((java.lang.Object) 0);
        int int50 = fixedDateTimeZone30.getOffset(4800245717934L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime51.getFieldTypes();
        org.joda.time.LocalDateTime.Property property55 = localDateTime51.year();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone62 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long64 = fixedDateTimeZone62.nextTransition((long) (byte) 100);
        int int66 = fixedDateTimeZone62.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime67 = localDateTime57.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone73 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str75 = fixedDateTimeZone73.getNameKey((long) (short) -1);
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = fixedDateTimeZone73.getName((-31L), locale77);
        int int80 = fixedDateTimeZone73.getOffset((long) 236);
        long long82 = dateTimeZone68.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone73, (long) 116);
        boolean boolean83 = fixedDateTimeZone30.equals((java.lang.Object) long82);
        long long85 = dateTimeZone9.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone30, 0L);
        java.util.TimeZone timeZone86 = fixedDateTimeZone30.toTimeZone();
        int int88 = fixedDateTimeZone30.getOffset((long) 189);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2022L + "'", long13 == 2022L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-798217L) + "'", long33 == (-798217L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2022L + "'", long35 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Italian" + "'", str75, "Italian");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.032" + "'", str78, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 90L + "'", long82 == 90L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-6L) + "'", long85 == (-6L));
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
    }

    @Test
    public void test16030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16030");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.lang.String str21 = property20.getAsText();
        int int22 = property20.get();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(34642089);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks(5242);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, 2371197);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(2308677);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test16031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16031");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = property26.getAsText(locale29);
        java.lang.String str31 = property18.getAsShortText(locale29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        int int34 = localDateTime33.getYearOfCentury();
        int int35 = localDateTime33.getMillisOfSecond();
        int int36 = localDateTime33.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusMonths(839);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime33.withDurationAdded(readableDuration39, 442);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime33.withDurationAdded(readableDuration42, 34585323);
        int int45 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "49" + "'", str31, "49");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 60 + "'", int35 == 60);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test16032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16032");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withSecondOfMinute(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 669);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = property27.getDifference(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = property27.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDurationAdded(readableDuration31, 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays(292278993);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        boolean boolean56 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusHours(9);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        boolean boolean80 = localDateTime72.isSupported(dateTimeFieldType79);
        boolean boolean81 = localDateTime58.isSupported(dateTimeFieldType79);
        org.joda.time.LocalDateTime.Property property82 = localDateTime38.property(dateTimeFieldType79);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime33.withField(dateTimeFieldType79, 16);
        boolean boolean85 = localDateTime16.isSupported(dateTimeFieldType79);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime16.plusDays(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test16033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16033");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getOffset(4800245742947L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16034");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "Germany");
        java.util.Locale locale9 = new java.util.Locale("2022-02-11T09:36:27.473", "2122-02-11T08:00:16.405-01:35", "2122-02-11T08:01:57.362-01:35");
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = locale9.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder0.setLocale(locale9);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11t09:36:27.473 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(locale9.toString(), "2022-02-11t09:36:27.473_2122-02-11T08:00:16.405-01:35_2122-02-11T08:01:57.362-01:35");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test16035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16035");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-01-09T11:37:10.312", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-09t11:37:10.312");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16036");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        int int11 = timeZone9.getOffset(4800245714543L);
        java.lang.Object obj12 = timeZone9.clone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test16037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16037");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        int int7 = fixedDateTimeZone5.getOffsetFromLocal(4800245746270L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        int int14 = property13.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime15.getFields();
        boolean boolean18 = fixedDateTimeZone5.equals((java.lang.Object) dateTimeFieldArray17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long21 = fixedDateTimeZone5.previousTransition((long) 447);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(1641801723349L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        java.util.TimeZone timeZone23 = fixedDateTimeZone5.toTimeZone();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 447L + "'", long21 == 447L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test16038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16038");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.lang.String str38 = locale34.toLanguageTag();
        java.lang.String str39 = locale34.getLanguage();
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        java.lang.String str41 = locale34.toLanguageTag();
        java.lang.String str42 = locale34.getISO3Country();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "44" + "'", str30, "44");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test16039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16039");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        java.lang.String str3 = dateTimeZone0.getID();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getScript();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = dateTimeZone0.getShortName((long) 10, locale5);
        java.lang.String str9 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test16040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16040");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245714191L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone18.toTimeZone();
        java.lang.String str26 = fixedDateTimeZone18.toString();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int29 = fixedDateTimeZone18.getOffset((long) 567);
        int int31 = fixedDateTimeZone18.getOffset((long) 935);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str26, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
    }

    @Test
    public void test16041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16041");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.secondOfMinute();
        org.joda.time.DurationField durationField26 = property25.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime27 = property25.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = property25.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet45);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.lang.Object obj52 = null;
        boolean boolean53 = strSet50.remove(obj52);
        boolean boolean54 = strSet50.isEmpty();
        boolean boolean56 = strSet50.add("");
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet50, filteringMode57);
        boolean boolean59 = localDateTime29.equals((java.lang.Object) languageRangeList31);
        boolean boolean60 = fixedDateTimeZone5.equals((java.lang.Object) localDateTime29);
        java.lang.String str62 = fixedDateTimeZone5.getName((-5700000L));
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 656, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays(756);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.era();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withWeekyear(386);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plus(readablePeriod76);
        boolean boolean78 = localDateTime63.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        int int79 = localDateTime63.getMinuteOfHour();
        java.lang.String str80 = localDateTime63.toString();
        int int81 = localDateTime63.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime63.minusDays(980);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.032" + "'", str62, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01T00:00:00.688" + "'", str80, "1970-01-01T00:00:00.688");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test16042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16042");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:44:32.857");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:44:32.857");
    }

    @Test
    public void test16043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime();
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minus(readableDuration16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime19 = localDateTime14.toDateTime();
        int int20 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 302 + "'", int3 == 302);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2074-02-11T09:44:49.302Z" + "'", str9, "2074-02-11T09:44:49.302Z");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test16044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale8);
        int int10 = property6.getMaximumShortTextLength(locale8);
        java.lang.String str11 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime12 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property6.addWrapFieldToCopy(692);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minus(readablePeriod29);
        int[] intArray31 = localDateTime24.getValues();
        int int32 = localDateTime24.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime48.toDateTime(dateTimeZone52);
        org.joda.time.Instant instant54 = dateTime53.toInstant();
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DateTime dateTime56 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) instant54);
        java.lang.String str57 = instant54.toString();
        int int58 = property6.compareTo((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DurationField durationField59 = property6.getDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e8c\u6708" + "'", str11, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 11, 35089326]");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35089326 + "'", int32 == 35089326);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-10T01:44:49.001Z" + "'", str57, "2022-02-10T01:44:49.001Z");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test16045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16045");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        java.io.Serializable[] serializableArray33 = strSet31.toArray((java.io.Serializable[]) strArray32);
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet31.spliterator();
        java.lang.Object[] objArray35 = strSet31.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet31.spliterator();
        strSet31.clear();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet31);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(serializableArray33);
        org.junit.Assert.assertNotNull(strSpliterator34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(strSpliterator36);
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test16046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16046");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.Interval interval15 = property14.toInterval();
        long long16 = property14.remainder();
        org.joda.time.DurationField durationField17 = property14.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundCeilingCopy();
        int int19 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = property27.getDifference(readableInstant28);
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        int int35 = property27.getMaximumTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plusMillis(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfEra();
        org.joda.time.ReadableInstant readableInstant44 = null;
        int int45 = property43.getDifference(readableInstant44);
        java.util.Locale locale49 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        int int51 = property43.getMaximumTextLength(locale49);
        org.joda.time.LocalDateTime localDateTime53 = property43.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        long long56 = dateTime55.getMillis();
        int int57 = property27.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime59 = property27.setCopy(100);
        org.joda.time.LocalDateTime localDateTime60 = property27.roundHalfCeilingCopy();
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str67 = localDateTime60.toString("12", locale65);
        java.util.Locale locale70 = new java.util.Locale("+00:00:00.006", "2022-02-11T09:35:39.164");
        java.lang.String str71 = locale65.getDisplayLanguage(locale70);
        java.util.Locale.setDefault(locale70);
        int int73 = property14.getMaximumTextLength(locale70);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 4800246289437L + "'", long56 == 4800246289437L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "12" + "'", str67, "12");
        org.junit.Assert.assertEquals(locale70.toString(), "+00:00:00.006_2022-02-11T09:35:39.164");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test16047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16047");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.getLocalDateTime();
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withPeriodAdded(readablePeriod12, 756);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.secondOfMinute();
        boolean boolean16 = property15.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test16048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16048");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T09:35:10.043Z");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = dateTimeZone21.getName((long) 292278993, locale23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = property37.getAsShortText(locale38);
        int int40 = property37.getMaximumValueOverall();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getScript();
        java.lang.String str43 = property37.getAsShortText(locale41);
        java.lang.String str44 = property29.getAsShortText(locale41);
        java.lang.String str45 = locale1.getDisplayCountry(locale41);
        java.lang.String str46 = locale1.getScript();
        java.lang.String str47 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dec" + "'", str44, "Dec");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test16049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16049");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("0022-02-11T09:40:00.000", "2122-02-11T09:39:34.098+00:00:00.006", 481, 672);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) "2122-02-11T09:35:18.738Z", (org.joda.time.DateTimeZone) fixedDateTimeZone5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2122-02-11T09:35:18.738Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYearOfEra(39);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.plusDays(34787508);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test16051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16051");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        boolean boolean5 = timeZone4.observesDaylightTime();
        int int7 = timeZone4.getOffset(0L);
        java.time.ZoneId zoneId8 = timeZone4.toZoneId();
        int int10 = timeZone4.getOffset(4800245730860L);
        boolean boolean11 = timeZone4.observesDaylightTime();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        int int28 = property20.getMaximumTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        long long49 = dateTime48.getMillis();
        int int50 = property20.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime52 = property20.setCopy(100);
        org.joda.time.LocalDateTime localDateTime53 = property20.roundHalfCeilingCopy();
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = localDateTime53.toString("12", locale58);
        java.util.Locale.setDefault(category12, locale58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusHours(2122);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str73 = dateTimeZone71.getName((long) (byte) 1);
        long long75 = dateTimeZone71.nextTransition((long) 2022);
        java.lang.String str77 = dateTimeZone71.getShortName((long) (short) 1);
        java.lang.String str79 = dateTimeZone71.getNameKey((long) (short) 0);
        org.joda.time.DateTime dateTime80 = localDateTime66.toDateTime(dateTimeZone71);
        java.util.Locale locale85 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str86 = locale85.getDisplayScript();
        java.lang.String str87 = dateTimeZone71.getShortName(4800245715085L, locale85);
        java.lang.String str88 = locale85.toLanguageTag();
        java.lang.String str89 = locale85.getDisplayName();
        java.util.Locale.setDefault(category12, locale85);
        java.lang.String str91 = locale85.getDisplayScript();
        java.util.Locale locale92 = locale85.stripExtensions();
        java.lang.String str93 = timeZone4.getDisplayName(locale85);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-5700000) + "'", int7 == (-5700000));
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-5700000) + "'", int10 == (-5700000));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4800246289557L + "'", long49 == 4800246289557L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "12" + "'", str60, "12");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2022L + "'", long75 == 2022L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals(locale85.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "und" + "'", str88, "und");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi! (HI!,hi!)" + "'", str89, "hi! (HI!,hi!)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "GMT-01:35" + "'", str93, "GMT-01:35");
    }

    @Test
    public void test16052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16052");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        strSet4.clear();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.stream.Stream<java.util.Locale> localeStream17 = localeList14.stream();
        boolean boolean18 = strSet4.retainAll((java.util.Collection<java.util.Locale>) localeList14);
        strSet4.clear();
        boolean boolean20 = strSet4.isEmpty();
        boolean boolean21 = strSet4.isEmpty();
        boolean boolean22 = strSet4.isEmpty();
        strSet4.clear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.minuteOfHour();
        boolean boolean33 = property31.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        org.joda.time.DurationField durationField39 = property37.getDurationField();
        org.joda.time.Interval interval40 = property37.toInterval();
        boolean boolean41 = strSet4.contains((java.lang.Object) interval40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        strSet46.clear();
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.stream.Stream<java.util.Locale> localeStream59 = localeList56.stream();
        boolean boolean60 = strSet46.retainAll((java.util.Collection<java.util.Locale>) localeList56);
        java.util.stream.Stream<java.util.Locale> localeStream61 = localeList56.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream62 = localeList56.parallelStream();
        boolean boolean63 = strSet4.retainAll((java.util.Collection<java.util.Locale>) localeList56);
        boolean boolean64 = strSet4.isEmpty();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(localeStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(localeStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeStream61);
        org.junit.Assert.assertNotNull(localeStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test16053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withDurationAdded(readableDuration7, 21);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(62);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMillis(27);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusMinutes(759);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(42130166, 980, 34529046);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 630 + "'", int3 == 630);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test16054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16054");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        int int39 = property31.getMaximumTextLength(locale37);
        org.joda.time.LocalDateTime localDateTime41 = property31.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        long long44 = dateTime43.getMillis();
        int int45 = property15.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime47 = property15.setCopy(100);
        org.joda.time.LocalDateTime localDateTime48 = property15.roundHalfEvenCopy();
        boolean boolean49 = localDateTime6.equals((java.lang.Object) localDateTime48);
        int int50 = localDateTime48.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.millisOfSecond();
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 4800246289643L + "'", long44 == 4800246289643L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test16055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16055");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = timeZone2.toZoneId();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.time.ZoneId zoneId5 = timeZone0.toZoneId();
        timeZone0.setRawOffset(150);
        timeZone0.setRawOffset(895);
        boolean boolean10 = timeZone0.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16056");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        long long4 = dateTimeZone0.nextTransition((long) 2022);
        java.lang.String str5 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(1L, false, (long) (byte) 100);
        java.lang.String str10 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int[] intArray12 = localDateTime11.getValues();
        int int13 = localDateTime11.getEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusYears(35);
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        boolean boolean17 = dateTimeZone0.isFixed();
        java.lang.String str19 = dateTimeZone0.getName(4800245711172L);
        int int21 = dateTimeZone0.getStandardOffset(4800245997624L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2022L + "'", long4 == 2022L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 2, 11, 35089671]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test16057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16057");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        java.lang.String str11 = property10.getAsShortText();
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime14 = property10.setCopy("35", locale13);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = locale13.getDisplayVariant(locale15);
        java.lang.String str18 = locale0.getDisplayLanguage(locale13);
        java.lang.String str19 = locale0.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField28 = localDateTime26.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.era();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfEvenCopy();
        int int33 = property29.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = property29.roundHalfEvenCopy();
        boolean boolean35 = locale0.equals((java.lang.Object) property29);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "44" + "'", str11, "44");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "japonais" + "'", str18, "japonais");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test16058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16058");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(34529046);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDateTime10.isSupported(durationFieldType13);
        int int15 = localDateTime10.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMonths(795);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMillis(897);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withDate(402, (-292275054), 359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test16059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16059");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test16060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16060");
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((-3155673600L), chronology31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(16883978, 319, 962, 292278993, 379, 508, 222, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test16061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16061");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(1987);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        int int15 = localDateTime8.getYear();
        int int16 = localDateTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test16062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16062");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMonthOfYear(277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 277 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test16063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16063");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDateTime10.indexOf(dateTimeFieldType12);
        java.lang.String str14 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusDays(883);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        int int48 = property40.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property40.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        long long53 = dateTime52.getMillis();
        int int54 = property24.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = property24.setCopy(100);
        org.joda.time.LocalDateTime localDateTime57 = property24.roundHalfCeilingCopy();
        int int58 = localDateTime57.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        boolean boolean66 = localDateTime57.isSupported(dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime10.property(dateTimeFieldType65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        int int74 = localDateTime73.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readableDuration76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime83.withMillisOfDay(117);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.plusWeeks(109);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.LocalDateTime localDateTime93 = localDateTime90.withDurationAdded(readableDuration91, 709);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.minusMonths(51);
        int int96 = property67.compareTo((org.joda.time.ReadablePartial) localDateTime95);
        org.joda.time.LocalDateTime.Property property97 = localDateTime95.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "292278993-02-11T09:44:49.782" + "'", str14, "292278993-02-11T09:44:49.782");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4800246289782L + "'", long53 == 4800246289782L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test16064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        int int13 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays(301);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMonths(34654409);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfYear(57);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        java.lang.String str38 = property29.toString();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getVariant();
        int int42 = property29.getMaximumShortTextLength(locale39);
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale39.getScript();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        int int58 = localDateTime57.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readableDuration60);
        boolean boolean62 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime61.getYearOfEra();
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        int int65 = localDateTime61.getYear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime61.monthOfYear();
        java.lang.String str67 = property66.getAsString();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.plusMillis(0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.yearOfEra();
        org.joda.time.ReadableInstant readableInstant76 = null;
        int int77 = property75.getDifference(readableInstant76);
        java.util.Locale locale81 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        int int83 = property75.getMaximumTextLength(locale81);
        java.lang.String str84 = property75.toString();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getDisplayLanguage();
        java.lang.String str87 = locale85.getVariant();
        int int88 = property75.getMaximumShortTextLength(locale85);
        java.util.Set<java.lang.String> strSet89 = locale85.getUnicodeLocaleAttributes();
        java.lang.String str90 = property66.getAsShortText(locale85);
        java.lang.String str91 = locale39.getDisplayName(locale85);
        int int92 = property21.getMaximumTextLength(locale85);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 831 + "'", int13 == 831);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[yearOfEra]" + "'", str38, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "italiano" + "'", str40, "italiano");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2" + "'", str67, "2");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals(locale81.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Property[yearOfEra]" + "'", str84, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "italiano" + "'", str86, "italiano");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "feb" + "'", str90, "feb");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "italiano" + "'", str91, "italiano");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
    }

    @Test
    public void test16065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16065");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        boolean boolean16 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusHours(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusSeconds(34682662);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minusWeeks(463);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test16066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16066");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245749747L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test16067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16067");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.DurationField durationField12 = property10.getRangeDurationField();
        java.util.Locale locale14 = new java.util.Locale("dopo Cristo");
        int int15 = property10.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean17 = dateTimeZone16.isFixed();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = dateTimeZone16.getShortName(10L, locale19);
        java.lang.String str21 = locale19.getDisplayVariant();
        java.lang.String str22 = locale14.getDisplayScript(locale19);
        java.lang.String str23 = locale19.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = dateTimeZone26.getShortName(10L, locale29);
        java.lang.String str32 = locale29.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale29.getDisplayName(locale33);
        java.util.Set<java.lang.String> strSet36 = locale29.getUnicodeLocaleKeys();
        java.lang.String str37 = locale19.getDisplayScript(locale29);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals(locale14.toString(), "dopo cristo");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:35" + "'", str31, "-01:35");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test16068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16068");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) (byte) 0);
        boolean boolean29 = property7.equals((java.lang.Object) (byte) 0);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = dateTimeZone31.getName((long) 292278993, locale33);
        java.lang.String str35 = property7.getAsShortText(locale33);
        org.joda.time.LocalDateTime localDateTime36 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMinutes(1078);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "44" + "'", str35, "44");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test16069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16069");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale5 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str6 = locale0.getDisplayName(locale5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        int int27 = property14.getMaximumShortTextLength(locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str29 = locale5.getDisplayScript(locale26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        java.lang.String str39 = property38.getAsShortText();
        int int40 = property38.getMaximumValue();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = property38.getAsShortText(locale41);
        java.lang.String str43 = locale41.getDisplayName();
        java.lang.String str44 = locale41.getISO3Language();
        java.lang.String str46 = locale41.getExtension('u');
        java.lang.String str47 = locale5.getDisplayScript(locale41);
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale53 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale.setDefault(category48, locale53);
        java.lang.String str56 = locale53.getDisplayVariant();
        java.lang.String str57 = locale5.getDisplayScript(locale53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale5.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "44" + "'", str39, "44");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "44" + "'", str42, "44");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tedesco (Germania)" + "'", str43, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals(locale53.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2122-02-11t09:35:08.397z" + "'", str54, "2122-02-11t09:35:08.397z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test16070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 387);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMonthOfYear(7982);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7982 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 976 + "'", int3 == 976);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16071");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusDays((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusSeconds(972);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readableDuration11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test16072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16072");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getVariant();
        int int20 = property7.getMaximumShortTextLength(locale17);
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        boolean boolean26 = strSet21.contains((java.lang.Object) nameProvider23);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        java.lang.String str37 = property36.getAsShortText();
        int int38 = property36.getMaximumValue();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = property36.getAsShortText(locale39);
        java.lang.String str41 = locale39.getDisplayName();
        java.lang.String str42 = locale39.getVariant();
        java.lang.String str45 = nameProvider23.getName(locale39, "2122-02-11T09:36:05.921Z", "2122-02-11T09:35:31.033Z");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone50 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = fixedDateTimeZone50.getShortName(4800245725694L, locale52);
        java.lang.String str54 = locale52.getDisplayLanguage();
        java.lang.String str57 = nameProvider23.getName(locale52, "\u65e5\u6587", "2122-02-11T09:40:03.984Z");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "44" + "'", str37, "44");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "44" + "'", str40, "44");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "German (Germany)" + "'", str41, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.011" + "'", str53, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian" + "'", str54, "Italian");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test16073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16073");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        boolean boolean14 = locale8.hasExtensions();
        java.util.Locale locale18 = new java.util.Locale("2122-02-11T09:36:00.414Z", "FRA", "2122-02-11T09:36:39.526Z");
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = dateTimeZone21.getShortName(10L, locale24);
        java.lang.String str27 = locale24.getDisplayName();
        java.lang.String str28 = locale24.getISO3Language();
        java.lang.String str29 = locale18.getDisplayScript(locale24);
        java.lang.String str30 = locale18.getVariant();
        boolean boolean31 = locale8.equals((java.lang.Object) str30);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str13, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "2122-02-11t09:36:00.414z_FRA_2122-02-11T09:36:39.526Z");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:35" + "'", str26, "-01:35");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2122-02-11T09:36:39.526Z" + "'", str30, "2122-02-11T09:36:39.526Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test16074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16074");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.lang.String str38 = locale34.toLanguageTag();
        java.lang.String str39 = locale34.getDisplayName();
        java.lang.String str40 = locale34.getLanguage();
        java.lang.String str41 = locale34.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "44" + "'", str30, "44");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian" + "'", str39, "Italian");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Italian" + "'", str41, "Italian");
    }

    @Test
    public void test16075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16075");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection29);
        org.joda.time.tz.Provider provider31 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet32 = provider31.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet32, filteringMode33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("coreano", strMap36);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = strSet41.remove(obj43);
        boolean boolean45 = strSet41.isEmpty();
        java.lang.Object[] objArray46 = strSet41.toArray();
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        strSet51.clear();
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.stream.Stream<java.util.Locale> localeStream64 = localeList61.stream();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.util.Locale>) localeList61);
        boolean boolean66 = strSet41.retainAll((java.util.Collection<java.util.Locale>) localeList61);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList61, filteringMode68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap72 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList73 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList71, strMap72);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale76);
        java.lang.String str78 = locale74.getDisplayVariant(locale76);
        java.util.Set<java.lang.String> strSet79 = locale74.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet79.spliterator();
        java.lang.Object obj81 = null;
        boolean boolean82 = strSet79.remove(obj81);
        java.lang.Object[] objArray83 = strSet79.toArray();
        java.util.Iterator<java.lang.String> strItor84 = strSet79.iterator();
        java.lang.String str85 = java.util.Locale.lookupTag(languageRangeList71, (java.util.Collection<java.lang.String>) strSet79);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(provider31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[, hi!]");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(localeStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNotNull(languageRangeList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test16076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16076");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int13 = fixedDateTimeZone11.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone11.previousTransition((long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = fixedDateTimeZone11.getName(4800245729437L, locale17);
        boolean boolean20 = property6.equals((java.lang.Object) fixedDateTimeZone11);
        long long24 = fixedDateTimeZone11.convertLocalToUTC((long) 120, false, (long) 351);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime42 = property32.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.lang.String str47 = dateTimeZone44.getName((long) 292278993, locale46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = localDateTime42.toDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime42.minusWeeks(529);
        boolean boolean52 = fixedDateTimeZone11.equals((java.lang.Object) 529);
        boolean boolean53 = fixedDateTimeZone11.isFixed();
        long long55 = fixedDateTimeZone11.previousTransition(4800245901090L);
        java.util.Locale locale59 = new java.util.Locale("8", "2122-02-11T08:00:43.446-01:35");
        java.util.Locale locale62 = new java.util.Locale("8", "2122-02-11T08:00:43.446-01:35");
        java.lang.String str63 = locale59.getDisplayScript(locale62);
        java.lang.String str64 = fixedDateTimeZone11.getName((long) 769, locale62);
        java.lang.String str65 = locale62.getDisplayScript();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 88L + "'", long24 == 88L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800245901090L + "'", long55 == 4800245901090L);
        org.junit.Assert.assertEquals(locale59.toString(), "8_2122-02-11T08:00:43.446-01:35");
        org.junit.Assert.assertEquals(locale62.toString(), "8_2122-02-11T08:00:43.446-01:35");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.032" + "'", str64, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test16077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16077");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths(672);
        int int25 = localDateTime22.getYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths(131);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.plusMillis((-798181));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2122 + "'", int25 == 2122);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test16078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16078");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.era();
        boolean boolean21 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusHours(0);
        boolean boolean24 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime3.withMillisOfSecond(504);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime3.withWeekyear(801);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis(34609012);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusMillis(0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = property59.getDifference(readableInstant60);
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        int int67 = property59.getMaximumTextLength(locale65);
        org.joda.time.LocalDateTime localDateTime69 = property59.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.plusMillis(0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.yearOfEra();
        org.joda.time.ReadableInstant readableInstant80 = null;
        int int81 = property79.getDifference(readableInstant80);
        java.util.Locale locale85 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        int int87 = property79.getMaximumTextLength(locale85);
        org.joda.time.LocalDateTime localDateTime89 = property79.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = localDateTime89.toDateTime(readableInstant90);
        boolean boolean92 = dateTime71.isBefore(readableInstant90);
        boolean boolean93 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology94 = dateTime71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime71.getZone();
        java.util.TimeZone timeZone96 = dateTimeZone95.toTimeZone();
        org.joda.time.LocalDateTime localDateTime97 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30, dateTimeZone95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = localDateTime97.toString("0022-02-11T09:40:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2122-02-11T09:44:50.188Z" + "'", str51, "2122-02-11T09:44:50.188Z");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals(locale85.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(timeZone96);
        org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test16079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16079");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int11 = fixedDateTimeZone4.getStandardOffset((long) 183);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey((long) 661);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDayOfYear(426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 426 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test16080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16080");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMinutes(386);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        int int23 = localDateTime22.getYearOfCentury();
        int int24 = localDateTime22.getMillisOfSecond();
        int int25 = localDateTime22.getDayOfMonth();
        int int26 = localDateTime22.getWeekOfWeekyear();
        int int27 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.minus(readableDuration28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, 34558887);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(34917984);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 234 + "'", int24 == 234);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test16081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16081");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        boolean boolean3 = strSet1.equals((java.lang.Object) "+00:00:00.011");
        strSet1.clear();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = builder5.build();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getCountry();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = property36.getAsText(locale39);
        java.lang.String str41 = property28.getAsShortText(locale39);
        java.lang.String str42 = locale8.getDisplayScript(locale39);
        java.util.Locale.Builder builder43 = builder5.setLocale(locale8);
        java.util.Locale locale46 = new java.util.Locale("2122-02-11T09:35:07.696Z", "2022-02-11T09:35:19.652");
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = locale8.getDisplayCountry(locale46);
        boolean boolean49 = strSet1.equals((java.lang.Object) locale46);
        strSet1.clear();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "50" + "'", str41, "50");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals(locale46.toString(), "2122-02-11t09:35:07.696z_2022-02-11T09:35:19.652");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test16082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16082");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale4 = builder3.build();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        strSet5.clear();
        strSet5.clear();
        java.util.Iterator<java.lang.String> strItor8 = strSet5.iterator();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor8);
    }

    @Test
    public void test16083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16083");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Ora media di Greenwich");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("-798861-02-28T09:38:39.127");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId2);
    }

    @Test
    public void test16084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16084");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property13.getDifference(readableInstant14);
        org.joda.time.LocalDateTime localDateTime16 = property13.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = localDateTime16.indexOf(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readablePeriod20);
        boolean boolean22 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.secondOfMinute();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime45 = property44.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = property44.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        java.util.Locale locale51 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusMillis(0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = property59.getDifference(readableInstant60);
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        int int67 = property59.getMaximumTextLength(locale65);
        org.joda.time.LocalDateTime localDateTime69 = property59.addToCopy((int) (byte) 100);
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("hi!");
        int int72 = property59.getMaximumShortTextLength(locale71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        int int79 = localDateTime78.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withFields((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.minuteOfHour();
        java.lang.String str82 = property81.getAsShortText();
        org.joda.time.LocalDateTime localDateTime84 = property81.setCopy("35");
        int int85 = property81.getLeapAmount();
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        int int87 = property81.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale71.getDisplayLanguage(locale86);
        java.lang.String str89 = locale51.getDisplayCountry(locale71);
        java.lang.String str90 = property44.getAsText(locale71);
        int int91 = property23.getMaximumShortTextLength(locale71);
        java.util.Set<java.lang.String> strSet92 = locale71.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertEquals(locale51.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "44" + "'", str82, "44");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "44" + "'", str90, "44");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test16085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16085");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:42:57.759");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:42:57.759");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16086");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.String str15 = property14.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime18 = property14.setCopy("35", locale17);
        org.joda.time.LocalDateTime localDateTime19 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readableDuration36);
        boolean boolean38 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        int int39 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.minuteOfHour();
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = property42.getAsShortText(locale46);
        int int49 = property14.getMaximumShortTextLength(locale46);
        long long50 = property14.remainder();
        java.util.Locale locale52 = new java.util.Locale("2122-02-11T08:00:14.774-01:35");
        java.lang.String str53 = property14.getAsText(locale52);
        int int54 = property5.getMaximumShortTextLength(locale52);
        java.lang.String str55 = locale52.getScript();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "44" + "'", str15, "44");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "44" + "'", str48, "44");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 50354L + "'", long50 == 50354L);
        org.junit.Assert.assertEquals(locale52.toString(), "2122-02-11t08:00:14.774-01:35");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "44" + "'", str53, "44");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test16087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16087");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        int int39 = property31.getMaximumTextLength(locale37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = property47.getDifference(readableInstant48);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        int int55 = property47.getMaximumTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime57 = property47.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        long long60 = dateTime59.getMillis();
        int int61 = property31.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime63 = property31.setCopy(100);
        org.joda.time.DurationField durationField64 = property31.getLeapDurationField();
        java.lang.String str65 = property31.getAsText();
        int int66 = property31.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime68 = property31.addToCopy(883);
        org.joda.time.LocalDateTime localDateTime69 = property31.withMinimumValue();
        boolean boolean70 = localDateTime16.equals((java.lang.Object) property31);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime16.minusWeeks(539);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = localDateTime16.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4800246290380L + "'", long60 == 4800246290380L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test16088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16088");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(729);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(419);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test16089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16089");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:36:48.712Z");
        java.lang.String str2 = locale1.toLanguageTag();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        boolean boolean25 = dateTime22.equals((java.lang.Object) builder24);
        java.util.Locale.Builder builder27 = builder24.setLanguage("deu");
        java.util.Locale locale28 = builder27.build();
        java.util.Locale locale29 = builder27.build();
        java.util.Locale locale30 = builder27.build();
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Locale locale32 = locale30.stripExtensions();
        java.lang.String str33 = locale1.getDisplayVariant(locale30);
        java.util.Locale locale36 = new java.util.Locale("2122-02-11T09:36:56.102Z", "");
        java.lang.String str37 = locale1.getDisplayScript(locale36);
        java.lang.String str39 = locale36.getExtension('u');
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:36:48.712z");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "deu");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "deu");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "deu" + "'", str31, "deu");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale36.toString(), "2122-02-11t09:36:56.102z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test16090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16090");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int13 = fixedDateTimeZone11.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone11.previousTransition((long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = fixedDateTimeZone11.getName(4800245729437L, locale17);
        boolean boolean20 = property6.equals((java.lang.Object) fixedDateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test16091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16091");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(34588512, 34803675, 316, 813, 0, 840, 567, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 813 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16092");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int10 = timeZone9.getRawOffset();
        java.lang.String str11 = timeZone9.getID();
        int int12 = timeZone9.getRawOffset();
        int int14 = timeZone9.getOffset((long) 452);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(11L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths(1);
        int int20 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int21 = localDateTime17.getMillisOfSecond();
        java.util.Date date22 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.fromDateFields(date22);
        boolean boolean25 = timeZone9.inDaylightTime(date22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str11, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 475 + "'", int21 == 475);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 09:44:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16093");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        boolean boolean63 = dateTime42.isBefore(readableInstant61);
        boolean boolean64 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology65 = dateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 6, chronology65);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(4800245710519L, chronology65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusYears(550);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plusMillis(968);
        int int73 = localDateTime72.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2122-02-11T09:44:50.500Z" + "'", str22, "2122-02-11T09:44:50.500Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 11 + "'", int73 == 11);
    }

    @Test
    public void test16094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16094");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.plusMinutes(150);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMaximumValue();
        int int40 = localDateTime39.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
    }

    @Test
    public void test16095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16095");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime18 = property8.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusMillis(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = property49.getDifference(readableInstant50);
        java.util.Locale locale55 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        int int57 = property49.getMaximumTextLength(locale55);
        org.joda.time.LocalDateTime localDateTime59 = property49.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        boolean boolean62 = dateTime41.isBefore(readableInstant60);
        boolean boolean63 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology64 = dateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 6, chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra(382);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T09:44:50.565Z" + "'", str21, "2122-02-11T09:44:50.565Z");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test16096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16096");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(223);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test16097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusDays(993);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusDays(623);
        int int13 = localDateTime12.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 601 + "'", int3 == 601);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 300 + "'", int13 == 300);
    }

    @Test
    public void test16098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16098");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMonths(34522866);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(524);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        java.lang.String str38 = property29.toString();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getVariant();
        int int42 = property29.getMaximumShortTextLength(locale39);
        java.util.Locale locale45 = new java.util.Locale("+00:00", "2122-02-11T09:35:34.896Z");
        int int46 = property29.getMaximumShortTextLength(locale45);
        java.lang.String str47 = property21.getAsText(locale45);
        org.joda.time.LocalDateTime localDateTime48 = property21.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[yearOfEra]" + "'", str38, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str40, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals(locale45.toString(), "+00:00_2122-02-11T09:35:34.896Z");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10" + "'", str47, "10");
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test16099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16099");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getCountry();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale2.getScript();
        java.lang.String str4 = locale2.getVariant();
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.lang.String str6 = locale2.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanisch" + "'", str5, "Japanisch");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DEU" + "'", str6, "DEU");
    }

    @Test
    public void test16100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16100");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone9 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int11 = fixedDateTimeZone9.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone9.convertLocalToUTC((long) (-1), false, (long) 100);
        long long17 = fixedDateTimeZone9.nextTransition(1L);
        java.util.TimeZone timeZone18 = fixedDateTimeZone9.toTimeZone();
        timeZone18.setRawOffset(20);
        boolean boolean21 = timeZone4.hasSameRules(timeZone18);
        int int22 = timeZone18.getRawOffset();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = timeZone18.getDisplayName(locale23);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-33L) + "'", long15 == (-33L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GMT+00:00" + "'", str25, "GMT+00:00");
    }

    @Test
    public void test16101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale.Builder builder11 = builder0.setExtension('a', "Dec");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setUnicodeLocaleKeyword("2122-02-11T09:38:49.972+00:00:00.032", "2122-02-11T09:42:50.312Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2122-02-11T09:38:49.972+00:00:00.032 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test16102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16102");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = localDateTime28.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((long) 838);
        boolean boolean35 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis(2641);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays(34709023);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test16103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16103");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: JP [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test16104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16104");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths(844);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plus(readableDuration6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime7.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test16105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16105");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = dateTimeZone0.getName((long) 'a', locale2);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2122-02-11T09:36:29.770Z");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone4.getDisplayName(true, 185, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 185");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test16106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16106");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T09:38:15.410Z", "2022-02-11T09:37:38.329");
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:38:15.410z_2022-02-11T09:37:38.329");
    }

    @Test
    public void test16107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16107");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("35");
        int int14 = property10.getLeapAmount();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        int int16 = property10.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = dateTimeZone0.getShortName((long) 0, locale15);
        java.lang.String str19 = locale15.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "44" + "'", str11, "44");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
    }

    @Test
    public void test16108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16108");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        int int13 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds(566);
        boolean boolean20 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime19);
        long long22 = fixedDateTimeZone4.previousTransition(0L);
        int int24 = fixedDateTimeZone4.getOffset(23L);
        java.lang.String str26 = fixedDateTimeZone4.getNameKey((long) 378);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
    }

    @Test
    public void test16109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16109");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        int int33 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime35 = property7.setCopy(9);
        int int36 = localDateTime35.getDayOfWeek();
        int int37 = localDateTime35.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
    }

    @Test
    public void test16110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withDurationAdded(readableDuration7, 21);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(859);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusWeeks(25);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plus(readablePeriod16);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds(2683);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 864 + "'", int3 == 864);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16111");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMillis(34900623);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test16112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16112");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("802254-10-26T09:34:03.182");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '802254-10-26T09:34:03.182' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16113");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ja_JP");
        int int3 = timeZone1.getOffset(4800245734424L);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test16114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16114");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        int int21 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusDays(301);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime17.centuryOfEra();
        long long26 = property25.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2122 + "'", int21 == 2122);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1511187309081L) + "'", long26 == (-1511187309081L));
    }

    @Test
    public void test16115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16115");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.withMaximumValue();
        int int15 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDayOfYear(280);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.year();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 44 + "'", int15 == 44);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test16116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16116");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        strSet8.clear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour(18);
        boolean boolean19 = strSet8.equals((java.lang.Object) 18);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16117");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property25.getDifference(readableInstant26);
        java.util.Locale locale31 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        int int33 = property25.getMaximumTextLength(locale31);
        org.joda.time.LocalDateTime localDateTime35 = property25.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        long long38 = dateTime37.getMillis();
        int int39 = property9.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime41 = property9.setCopy(100);
        org.joda.time.LocalDateTime localDateTime42 = property9.roundHalfCeilingCopy();
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = localDateTime42.toString("12", locale47);
        java.util.Locale.setDefault(category1, locale47);
        java.lang.String str53 = nameProvider0.getShortName(locale47, "2122-02-11T09:35:10.520Z", "2122-02-11T09:35:26.387Z");
        java.util.Locale.setDefault(locale47);
        java.lang.String str55 = locale47.getScript();
        java.lang.String str56 = locale47.getDisplayName();
        boolean boolean57 = locale47.hasExtensions();
        java.util.Set<java.lang.String> strSet58 = locale47.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4800246290967L + "'", long38 == 4800246290967L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "12" + "'", str49, "12");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi! (HI!,hi!)" + "'", str56, "hi! (HI!,hi!)");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
    }

    @Test
    public void test16118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16118");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        java.util.Locale locale9 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.setRegion("2122-02-11T09:43:02.954+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:43:02.954+00:00:00.032 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test16119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16119");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = property7.addToCopy(0L);
        int int35 = localDateTime34.getEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMinutes(164);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test16120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16120");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        long long5 = dateTimeZone2.nextTransition((long) (short) 1);
        long long7 = dateTimeZone2.previousTransition(4800245755485L);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4800245755485L + "'", long7 == 4800245755485L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:35");
    }

    @Test
    public void test16121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16121");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField28 = localDateTime26.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.era();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.withMaximumValue();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        int int35 = localDateTime34.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        org.joda.time.LocalDateTime.Property property41 = localDateTime32.property(dateTimeFieldType40);
        boolean boolean42 = dateTime19.isSupported(dateTimeFieldType40);
        org.joda.time.Instant instant43 = dateTime19.toInstant();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfEra();
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = property51.getDifference(readableInstant52);
        java.util.Locale locale57 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        int int59 = property51.getMaximumTextLength(locale57);
        org.joda.time.LocalDateTime localDateTime61 = property51.addToCopy((int) (byte) 100);
        int int62 = localDateTime61.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.dayOfMonth();
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.era();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plus(readableDuration66);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = localDateTime65.getFields();
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plusMillis(0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime70.minuteOfHour();
        boolean boolean79 = property77.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime80 = property77.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withEra((int) (short) 0);
        org.joda.time.DateTime dateTime84 = localDateTime80.toDateTime();
        long long85 = property69.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime84);
        int int86 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 11 + "'", int62 == 11);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-63780169500000L) + "'", long85 == (-63780169500000L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test16122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16122");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.minuteOfHour();
        boolean boolean10 = property8.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(10);
        java.lang.String str14 = localDateTime11.toString();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.LocalDateTime localDateTime27 = property24.setCopy("35");
        int int28 = property24.getLeapAmount();
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        int int30 = property24.getMaximumShortTextLength(locale29);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.lang.String str33 = property24.getAsText(locale32);
        int int34 = property15.getMaximumShortTextLength(locale32);
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str38 = nameProvider0.getShortName(locale32, "2122-02-11T09:42:44.464Z", "2122-02-11T09:36:16.855+00:00:00.032");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:45:00.000" + "'", str14, "2022-02-11T09:45:00.000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "44" + "'", str25, "44");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "44" + "'", str33, "44");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test16123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16123");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusYears(43);
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime6.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 109 + "'", int3 == 109);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test16124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16124");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long16 = dateTimeZone0.convertUTCToLocal((long) (byte) 10);
        int int18 = dateTimeZone0.getOffset(4800245811244L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, 257L);
        long long24 = dateTimeZone0.convertUTCToLocal(514L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 257L + "'", long22 == 257L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 514L + "'", long24 == 514L);
    }

    @Test
    public void test16125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16125");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clearExtensions();
        java.util.Locale locale10 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder0.setLanguageTag("2022-02-11T09:43:20.841");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test16126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16126");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property30 = localDateTime8.era();
        int int31 = property30.getMaximumValueOverall();
        java.lang.String str32 = property30.toString();
        int int33 = property30.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[era]" + "'", str32, "Property[era]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test16127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16127");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readableDuration9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfWeek(34558629);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34558629 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16128");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        int int12 = fixedDateTimeZone4.getOffset((long) ' ');
        java.lang.String str14 = fixedDateTimeZone4.getNameKey(4800245724414L);
        boolean boolean16 = fixedDateTimeZone4.isStandardOffset(4800245972644L);
        java.lang.String str18 = fixedDateTimeZone4.getNameKey((long) 862);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
    }

    @Test
    public void test16129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16129");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("\u516c\u5143", "2122-02-11T08:00:15.629-01:35", (int) '#', 386);
        long long6 = fixedDateTimeZone4.nextTransition((long) 503);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        long long70 = dateTime69.getMillis();
        int int71 = property41.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int72 = property33.getDifference((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime69.getZone();
        int int74 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime69);
        long long77 = fixedDateTimeZone4.adjustOffset(0L, false);
        int int79 = fixedDateTimeZone4.getOffsetFromLocal((long) 882);
        boolean boolean81 = fixedDateTimeZone4.isStandardOffset(4800246002126L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 503L + "'", long6 == 503L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4800246291220L + "'", long70 == 4800246291220L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-100) + "'", int72 == (-100));
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16130");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusSeconds((int) '#');
        int int11 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = property20.getAsShortText(locale21);
        int int23 = property20.getMaximumValueOverall();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getScript();
        java.lang.String str26 = property20.getAsShortText(locale24);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.clear();
        java.util.Locale.Builder builder31 = builder27.setLanguageTag("zh");
        java.util.Locale locale32 = builder27.build();
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.lang.String str42 = locale32.getDisplayCountry(locale40);
        java.lang.String str43 = locale24.getDisplayCountry(locale40);
        java.lang.String str44 = locale24.getDisplayName();
        java.lang.String str45 = property12.getAsText(locale24);
        java.lang.String str46 = locale24.getDisplayVariant();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AD" + "'", str45, "AD");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test16131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16131");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.addToCopy(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMonths(661);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plus(readableDuration42);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246291279L + "'", long36 == 4800246291279L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test16132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16132");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str6 = locale5.getLanguage();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long15 = fixedDateTimeZone13.previousTransition((long) 9);
        boolean boolean17 = fixedDateTimeZone13.isStandardOffset(4800245710661L);
        int int19 = fixedDateTimeZone13.getStandardOffset((long) (-798211));
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        boolean boolean21 = fixedDateTimeZone13.equals((java.lang.Object) locale20);
        java.lang.String str23 = fixedDateTimeZone13.getName((long) 192);
        boolean boolean24 = fixedDateTimeZone13.isFixed();
        boolean boolean25 = fixedDateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readableDuration42);
        boolean boolean44 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        int int45 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        int int47 = localDateTime43.getYear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.monthOfYear();
        java.lang.String str49 = property48.getAsString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        java.lang.String str66 = property57.toString();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.lang.String str69 = locale67.getVariant();
        int int70 = property57.getMaximumShortTextLength(locale67);
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str72 = property48.getAsShortText(locale67);
        java.lang.String str73 = locale67.toLanguageTag();
        java.lang.String str74 = fixedDateTimeZone13.getName(4800245769124L, locale67);
        java.lang.String str75 = locale67.getLanguage();
        java.lang.String str76 = locale67.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale67);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale5.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2122-02-11t09:35:08.397z" + "'", str6, "2122-02-11t09:35:08.397z");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9L + "'", long15 == 9L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.032" + "'", str23, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2" + "'", str49, "2");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Property[yearOfEra]" + "'", str66, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Italian" + "'", str68, "Italian");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "feb" + "'", str72, "feb");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "it" + "'", str73, "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.032" + "'", str74, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "it" + "'", str75, "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test16133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16133");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(292278993);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        int int13 = dateTimeZone11.getOffset((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = dateTimeZone11.getShortName((long) 10, locale16);
        java.lang.String str20 = property7.getAsText(locale16);
        java.lang.String str21 = locale16.getISO3Country();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DEU" + "'", str21, "DEU");
    }

    @Test
    public void test16134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16134");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long17 = dateTimeZone0.convertLocalToUTC((long) 1, true, 100L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getName((long) (byte) 1);
        long long22 = dateTimeZone18.nextTransition((long) 2022);
        java.lang.String str23 = dateTimeZone18.toString();
        long long27 = dateTimeZone18.convertLocalToUTC(1L, false, (long) (byte) 100);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) 362);
        boolean boolean30 = dateTimeZone18.isFixed();
        java.lang.String str31 = dateTimeZone18.toString();
        long long33 = dateTimeZone18.nextTransition(4800245821754L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2022L + "'", long22 == 2022L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 362L + "'", long29 == 362L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4800245821754L + "'", long33 == 4800245821754L);
    }

    @Test
    public void test16135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        java.lang.String str8 = property6.getAsShortText();
        org.joda.time.LocalDateTime localDateTime9 = property6.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property6.setCopy(35021662);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35021662 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Feb" + "'", str8, "Feb");
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test16136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 381 + "'", int3 == 381);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35091381 + "'", int4 == 35091381);
    }

    @Test
    public void test16137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16137");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:28.997Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.Object obj3 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test16138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16138");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Japanisch", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=japanisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16139");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:35:59.916Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.lang.String str4 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:35:59.916z");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test16140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16140");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        int int13 = property12.getMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.monthOfYear();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        boolean boolean63 = dateTime42.isBefore(readableInstant61);
        org.joda.time.Instant instant64 = dateTime42.toInstant();
        java.lang.String str65 = dateTime42.toString();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        int int76 = localDateTime75.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readableDuration78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusHours((int) ' ');
        boolean boolean82 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.DateTime dateTime83 = localDateTime66.toDateTime();
        boolean boolean84 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadableInstant readableInstant85 = null;
        boolean boolean86 = dateTime83.isBefore(readableInstant85);
        int int87 = property20.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Instant instant88 = dateTime83.toInstant();
        long long89 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2122-02-11T09:44:51.413Z" + "'", str65, "2122-02-11T09:44:51.413Z");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test16141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16141");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        java.lang.String str14 = property8.getAsShortText();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str18 = property8.getAsText(locale16);
        java.lang.String str19 = locale16.getLanguage();
        java.lang.String str20 = locale16.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = locale16.getDisplayLanguage(locale21);
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "44" + "'", str14, "44");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "44" + "'", str18, "44");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de-DE" + "'", str20, "de-DE");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test16142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16142");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getCountry();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = property31.getAsText(locale34);
        java.lang.String str36 = property23.getAsShortText(locale34);
        java.lang.String str37 = locale3.getDisplayScript(locale34);
        java.util.Locale.Builder builder38 = builder0.setLocale(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder38.setExtension('#', "2122-02-11T09:35:36.870Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "51" + "'", str36, "51");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test16143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16143");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property16.setCopy(955);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.minuteOfHour();
        boolean boolean31 = property29.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime37 = property35.addWrapFieldToCopy(529);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale39);
        int int41 = property35.getMaximumTextLength(locale39);
        java.lang.String str42 = locale39.getDisplayScript();
        java.lang.String str43 = property16.getAsShortText(locale39);
        java.lang.String str44 = locale39.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "35100000" + "'", str43, "35100000");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
    }

    @Test
    public void test16144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16144");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime8.isSupported(durationFieldType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        int int15 = localDateTime8.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withMonthOfYear(916);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 916 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test16145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16145");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test16146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16146");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = dateTimeZone0.getName((long) 'a', locale2);
        java.util.Locale.setDefault(locale2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        int int20 = property12.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime22 = property12.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField23 = property12.getDurationField();
        java.lang.String str24 = property12.getName();
        java.lang.String str25 = property12.toString();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale26.getDisplayName();
        int int28 = property12.getMaximumShortTextLength(locale26);
        java.util.Locale locale29 = locale26.stripExtensions();
        java.lang.String str30 = locale2.getDisplayCountry(locale29);
        java.lang.String str31 = locale2.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[yearOfEra]" + "'", str25, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "giapponese (Giappone)" + "'", str27, "giapponese (Giappone)");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test16147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16147");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(529);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        int int4 = localDateTime2.getSecondOfMinute();
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long13 = fixedDateTimeZone11.previousTransition((long) 9);
        java.lang.String str14 = fixedDateTimeZone11.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone15.previousTransition((long) 1987);
        long long19 = fixedDateTimeZone11.getMillisKeepLocal(dateTimeZone15, (long) 119);
        int int21 = fixedDateTimeZone11.getOffset((long) 801);
        org.joda.time.DateTime dateTime22 = localDateTime2.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str23 = fixedDateTimeZone11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9L + "'", long13 == 9L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str14, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1987L + "'", long17 == 1987L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 151L + "'", long19 == 151L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str23, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test16148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16148");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2122-02-11T09:43:13.272+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:43:13.272+00:00:00.032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16149");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        int int91 = localDateTime88.getDayOfYear();
        org.joda.time.LocalDateTime.Property property92 = localDateTime88.monthOfYear();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime88.withWeekyear(5740084);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime88.withDayOfYear(150);
        int int97 = localDateTime88.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:44:51.592Z" + "'", str20, "2122-02-11T09:44:51.592Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 42 + "'", int91 == 42);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test16150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16150");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusHours(594);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusHours(657);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test16151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16151");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2122-02-11T09:43:06.391Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2122-02-11T09:43:06.391Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16152");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes(22);
        boolean boolean19 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        int int22 = property20.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
    }

    @Test
    public void test16153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16153");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMillisOfSecond(921);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test16154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16154");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test16155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16155");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime6.yearOfCentury();
        int int18 = property17.getMaximumValue();
        int int19 = property17.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test16156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale4 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        boolean boolean7 = strSet5.equals((java.lang.Object) locale6);
        java.util.Locale.Builder builder8 = builder0.setLocale(locale6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale.Builder builder11 = builder0.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder11.clear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getVariant();
        java.lang.String str24 = property20.getAsShortText(locale21);
        java.util.Locale.Builder builder25 = builder11.setLocale(locale21);
        java.util.Locale locale26 = locale21.stripExtensions();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "italiano" + "'", str22, "italiano");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
    }

    @Test
    public void test16157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16157");
        java.util.Locale locale2 = new java.util.Locale("2022-02-10T23:06:00.077", "2122-02-11T09:39:20.364");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime15 = property11.setCopy("35", locale14);
        org.joda.time.LocalDateTime localDateTime16 = property11.roundFloorCopy();
        java.lang.String str17 = property11.getAsShortText();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str21 = property11.getAsText(locale19);
        java.lang.String str22 = locale19.getDisplayName();
        java.lang.String str23 = locale2.getDisplayVariant(locale19);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-10t23:06:00.077_2122-02-11T09:39:20.364");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "44" + "'", str12, "44");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "44" + "'", str17, "44");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "44" + "'", str21, "44");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Deutsch (Deutschland)" + "'", str22, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test16158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16158");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:39.164Z");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test16159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16159");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:07.696Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setID("2122-02-11T09:36:39.526Z");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId5 = timeZone1.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2122-02-11T09:36:39.526Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
    }

    @Test
    public void test16160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16160");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        int int22 = localDateTime21.getYearOfCentury();
        int int23 = localDateTime21.getMillisOfSecond();
        int int24 = localDateTime21.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        int int47 = property34.getMaximumShortTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime48 = property34.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property34.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime21.property(dateTimeFieldType49);
        boolean boolean51 = localDateTime19.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime19.year();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 812 + "'", int23 == 812);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test16161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16161");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundCeilingCopy();
        int int13 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test16162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16162");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setExtension(' ', "2122-03-19T09:44:43.440");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test16163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16163");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T08:03:25.378-01:35");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test16164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16164");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.getLocalDateTime();
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusHours(2122);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(16);
        boolean boolean27 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16165");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(4800245713056L, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.minuteOfHour();
        boolean boolean14 = property12.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime20 = property18.addWrapFieldToCopy(529);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusHours(9);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = localDateTime55.isSupported(dateTimeFieldType62);
        int int64 = dateTime40.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        int int71 = localDateTime70.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.monthOfYear();
        boolean boolean74 = dateTime40.equals((java.lang.Object) localDateTime69);
        java.lang.String str75 = dateTime40.toString();
        int int76 = property18.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime77 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime40.getZone();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2122-02-11T09:44:51.882Z" + "'", str41, "2122-02-11T09:44:51.882Z");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2122-02-11T09:44:51.882Z" + "'", str75, "2122-02-11T09:44:51.882Z");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test16166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16166");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245714191L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone18.toTimeZone();
        long long27 = fixedDateTimeZone18.nextTransition((long) 451);
        boolean boolean28 = fixedDateTimeZone18.isFixed();
        int int30 = fixedDateTimeZone18.getStandardOffset(4800245985927L);
        org.joda.time.tz.Provider provider31 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet32 = provider31.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone34 = provider31.getZone("2122-02-11T09:35:48.546Z");
        java.util.Set<java.lang.String> strSet35 = provider31.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone37 = provider31.getZone("2122-02-11T09:35:52.575Z");
        java.util.Set<java.lang.String> strSet38 = provider31.getAvailableIDs();
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet43.spliterator();
        boolean boolean45 = strSet43.isEmpty();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("coreano", strMap47);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = strSet52.remove(obj54);
        boolean boolean56 = strSet52.isEmpty();
        java.lang.Object[] objArray57 = strSet52.toArray();
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        strSet62.clear();
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.stream.Stream<java.util.Locale> localeStream75 = localeList72.stream();
        boolean boolean76 = strSet62.retainAll((java.util.Collection<java.util.Locale>) localeList72);
        boolean boolean77 = strSet52.retainAll((java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.stream.Stream<java.util.Locale> localeStream79 = localeList78.stream();
        java.util.stream.Stream<java.util.Locale> localeStream80 = localeList78.parallelStream();
        boolean boolean81 = strSet43.removeAll((java.util.Collection<java.util.Locale>) localeList78);
        boolean boolean82 = strSet38.containsAll((java.util.Collection<java.util.Locale>) localeList78);
        boolean boolean83 = fixedDateTimeZone18.equals((java.lang.Object) strSet38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 451L + "'", long27 == 451L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(provider31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[, hi!]");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeStream79);
        org.junit.Assert.assertNotNull(localeStream80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test16167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16167");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:41:51.670+08:01:16.794");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:41:51.670+08:01:16.794\" is malformed at \"+08:01:16.794\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16168");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime8.isSupported(durationFieldType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDurationAdded(readableDuration16, 34794176);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMinutes(22);
        int int24 = localDateTime20.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plus(readablePeriod25);
        boolean boolean27 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35050984]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 985 + "'", int24 == 985);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test16169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16169");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withYear(25);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear(218);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMinutes(422);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16170");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withWeekyear(35);
        int int15 = localDateTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test16171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16171");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusDays(993);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withHourOfDay(1986);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1986 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test16172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(453);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test16173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16173");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        int int8 = fixedDateTimeZone4.getStandardOffset((long) 626);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test16174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16174");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withTime(940, (int) (short) 1, 2272824, 460);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 940 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240011010L + "'", long31 == 4800240011010L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test16175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16175");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(34782560);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 9);
        java.lang.String str22 = dateTimeZone18.getName((long) 13);
        long long25 = dateTimeZone18.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(4800245729471L, dateTimeZone18);
        boolean boolean28 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime12.withDayOfYear(34860000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34860000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4800245710661L + "'", long25 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test16176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str12 = nameProvider8.getName(locale9, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale16 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str19 = nameProvider8.getShortName(locale16, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str24 = nameProvider8.getName(locale20, "yearOfCentury", "2122-02-11T09:36:22.838Z");
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        int int62 = property32.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime64 = property32.setCopy(100);
        org.joda.time.DurationField durationField65 = property32.getLeapDurationField();
        int int66 = property32.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime68 = property32.addToCopy((int) (byte) -1);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        int int70 = property32.getMaximumTextLength(locale69);
        java.lang.String str71 = locale69.getDisplayVariant();
        java.lang.String str74 = nameProvider8.getShortName(locale69, "2022-02-11T09:36:11.480", "2122-02-11T09:35:26.387Z");
        java.util.Locale.Builder builder75 = builder0.setLocale(locale69);
        java.util.Locale.Builder builder76 = builder0.clearExtensions();
        java.util.Locale.Builder builder79 = builder0.setExtension('x', "2074");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder82 = builder79.setExtension('a', "2021-05-24T09:38:02.093");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 24T09:38:02.093 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals(locale16.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 4800246292105L + "'", long61 == 4800246292105L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNull(durationField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test16177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16177");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis(3220);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test16178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16178");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T08:00:43.631-01:35", "2122-02-11T09:36:56.441Z", "2122-02-11T09:35:40.817Z");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "Italian");
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder10 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder4.clearExtensions();
        java.util.Locale.Builder builder12 = builder4.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder12.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder15.build();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale20);
        java.lang.String str22 = locale18.getDisplayVariant(locale20);
        java.util.Set<java.lang.String> strSet23 = locale18.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.dayOfWeek();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        int int32 = property30.getMinimumValue();
        long long33 = property30.remainder();
        java.util.Locale locale37 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        int int38 = property30.getMaximumTextLength(locale37);
        java.lang.String str39 = locale18.getDisplayVariant(locale37);
        java.lang.String str40 = locale17.getDisplayName(locale37);
        java.lang.String str41 = locale3.getDisplayVariant(locale37);
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t08:00:43.631-01:35_2122-02-11T09:36:56.441Z_2122-02-11T09:35:40.817Z");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35092148L + "'", long33 == 35092148L);
        org.junit.Assert.assertEquals(locale37.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2122-02-11T09:35:40.817Z" + "'", str41, "2122-02-11T09:35:40.817Z");
    }

    @Test
    public void test16179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16179");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(25);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond(604);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test16180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16180");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:41:14.800");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test16181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16181");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String[] strArray1 = java.util.Locale.getISOLanguages();
        java.io.Serializable[] serializableArray2 = strSet0.toArray((java.io.Serializable[]) strArray1);
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        boolean boolean5 = strSet0.equals((java.lang.Object) "Italian");
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet0.spliterator();
        int int7 = strSet0.size();
        boolean boolean8 = strSet0.isEmpty();
        int int9 = strSet0.size();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(serializableArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16182");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        long long10 = fixedDateTimeZone4.previousTransition((long) 305);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        int int48 = property18.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime50 = property18.setCopy(100);
        org.joda.time.LocalDateTime localDateTime51 = property18.roundHalfCeilingCopy();
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = localDateTime51.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime51.weekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.getLocalDateTime();
        boolean boolean63 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime62);
        long long67 = fixedDateTimeZone4.convertLocalToUTC(39446997490927L, true, 4800245776017L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 305L + "'", long10 == 305L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4800246292217L + "'", long47 == 4800246292217L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 39446997490895L + "'", long67 == 39446997490895L);
    }

    @Test
    public void test16183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16183");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        java.util.Locale locale32 = null;
        int int33 = property31.getMaximumTextLength(locale32);
        java.lang.String str34 = property31.getAsString();
        int int35 = property31.get();
        org.joda.time.DurationField durationField36 = property31.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property31.getFieldType();
        int int38 = localDateTime8.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime8.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.plus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours(22);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMillis(0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property58.getDifference(readableInstant59);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property58.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime68 = property58.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        int int78 = localDateTime77.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withFields((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minus(readableDuration80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.minusHours(9);
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime86.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        boolean boolean93 = localDateTime85.isSupported(dateTimeFieldType92);
        int int94 = dateTime70.get(dateTimeFieldType92);
        boolean boolean95 = localDateTime48.isSupported(dateTimeFieldType92);
        org.joda.time.LocalDateTime.Property property96 = localDateTime8.property(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2122-02-11T09:44:52.247Z" + "'", str71, "2122-02-11T09:44:52.247Z");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 22 + "'", int94 == 22);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test16184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16184");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        long long11 = fixedDateTimeZone5.convertLocalToUTC((long) (-1), false, (long) 100);
        long long13 = fixedDateTimeZone5.previousTransition((long) 'u');
        long long15 = fixedDateTimeZone5.convertUTCToLocal((long) 6);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(4800245710519L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        java.lang.String str18 = fixedDateTimeZone5.getNameKey(4800245718484L);
        long long20 = fixedDateTimeZone5.nextTransition((long) 566);
        long long22 = fixedDateTimeZone5.previousTransition(4800245744866L);
        long long24 = fixedDateTimeZone5.convertUTCToLocal((long) 105);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-33L) + "'", long11 == (-33L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 117L + "'", long13 == 117L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 38L + "'", long15 == 38L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 566L + "'", long20 == 566L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4800245744866L + "'", long22 == 4800245744866L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 137L + "'", long24 == 137L);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test16185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16185");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:36:00.000");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:36:00.000");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11t09:36:00.000" + "'", str2, "2022-02-11t09:36:00.000");
    }

    @Test
    public void test16186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16186");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("UTC");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguage("");
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "Italian");
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale locale17 = builder10.build();
        java.util.Locale.Builder builder18 = builder10.clear();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hi!");
        int int42 = property29.getMaximumShortTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        java.lang.String str52 = property51.getAsShortText();
        org.joda.time.LocalDateTime localDateTime54 = property51.setCopy("35");
        int int55 = property51.getLeapAmount();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        int int57 = property51.getMaximumShortTextLength(locale56);
        java.lang.String str58 = locale41.getDisplayLanguage(locale56);
        java.util.Locale.Builder builder59 = builder21.setLocale(locale41);
        java.lang.String str60 = locale41.getScript();
        java.lang.String str61 = locale41.getDisplayLanguage();
        java.lang.String str62 = locale9.getDisplayLanguage(locale41);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "44" + "'", str52, "44");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test16187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16187");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.Date date28 = localDateTime25.toDate();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withMillisOfSecond(9);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond(34);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        java.lang.String str34 = property33.getName();
        org.joda.time.LocalDateTime localDateTime35 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = property33.getLocalDateTime();
        boolean boolean37 = localDateTime7.equals((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime7.plusHours((-52596480));
        org.joda.time.LocalDateTime.Property property40 = localDateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Wed Feb 11 09:44:52 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test16188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16188");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("34620000");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test16189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16189");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.setLanguageTag("zh");
        java.util.Locale locale14 = builder9.build();
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str23 = locale18.getDisplayVariant(locale22);
        java.lang.String str24 = locale14.getDisplayCountry(locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        boolean boolean43 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        int int44 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.minuteOfHour();
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = property47.getAsShortText(locale51);
        boolean boolean54 = strSet25.remove((java.lang.Object) locale51);
        java.lang.String str55 = locale51.getCountry();
        java.lang.String str56 = locale8.getDisplayName(locale51);
        boolean boolean57 = locale51.hasExtensions();
        java.util.Set<java.lang.String> strSet58 = locale51.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField67 = localDateTime65.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.era();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        int int70 = property68.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime71 = property68.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusSeconds(192);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.weekyear();
        boolean boolean75 = strSet58.equals((java.lang.Object) property74);
        strSet58.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "44" + "'", str53, "44");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "HI!" + "'", str55, "HI!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test16190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16190");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        int int11 = property9.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(584);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test16191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16191");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str15 = fixedDateTimeZone4.getNameKey((long) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        boolean boolean33 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        int int37 = localDateTime36.getCenturyOfEra();
        boolean boolean38 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime36);
        boolean boolean40 = fixedDateTimeZone4.isStandardOffset(518L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test16192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16192");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int6 = dateTimeZone1.getOffsetFromLocal((-5699999L));
        long long9 = dateTimeZone1.convertLocalToUTC((long) (-5700000), true);
        long long12 = dateTimeZone1.adjustOffset((long) 2122, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(4800245798000L, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withPeriodAdded(readablePeriod15, 584);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-5700000L) + "'", long9 == (-5700000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2122L + "'", long12 == 2122L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test16193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16193");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset((long) 10, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) (byte) 0);
        boolean boolean29 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        int int30 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusSeconds(865);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime32.getFieldType(105);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 105");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test16194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16194");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        strSet21.clear();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.stream.Stream<java.util.Locale> localeStream34 = localeList31.stream();
        boolean boolean35 = strSet21.retainAll((java.util.Collection<java.util.Locale>) localeList31);
        java.util.stream.Stream<java.util.Locale> localeStream36 = localeList31.parallelStream();
        boolean boolean37 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList31);
        strSet15.clear();
        boolean boolean39 = strSet15.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test16195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16195");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        long long12 = fixedDateTimeZone4.previousTransition((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone23);
        int int26 = dateTimeZone23.getOffsetFromLocal(100L);
        java.lang.String str27 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        java.lang.String str38 = property37.getAsShortText();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime41 = property37.setCopy("35", locale40);
        org.joda.time.LocalDateTime localDateTime42 = property37.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime43 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        int int51 = localDateTime50.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readableDuration53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.weekyear();
        org.joda.time.Chronology chronology60 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.year();
        int int64 = localDateTime62.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime65.getFieldTypes();
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property69.getFieldType();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime62.withField(dateTimeFieldType70, 13);
        int int73 = localDateTime61.get(dateTimeFieldType70);
        int int74 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.Chronology chronology75 = localDateTime61.getChronology();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime61.minus(readablePeriod76);
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = localDateTime61.toString("+00:00:00.011", locale79);
        java.lang.String str81 = dateTimeZone23.getShortName((long) 524, locale79);
        java.util.TimeZone timeZone82 = dateTimeZone23.toTimeZone();
        long long84 = fixedDateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) 394);
        java.lang.String str85 = dateTimeZone23.getID();
        long long88 = dateTimeZone23.convertLocalToUTC(676L, true);
        boolean boolean89 = dateTimeZone23.isFixed();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "44" + "'", str38, "44");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.011" + "'", str80, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 426L + "'", long84 == 426L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 676L + "'", long88 == 676L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test16196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16196");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        boolean boolean11 = fixedDateTimeZone4.isFixed();
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.lang.String str14 = fixedDateTimeZone4.getNameKey((long) 6);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.lang.String str17 = fixedDateTimeZone4.getNameKey(4800246103815L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
    }

    @Test
    public void test16197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16197");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test16198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16198");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.monthOfYear();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime9 = property6.addWrapFieldToCopy(844);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = dateTimeZone30.getName((long) 292278993, locale32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDateTime28.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusHours(661);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withCenturyOfEra(463);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        boolean boolean42 = localDateTime9.equals((java.lang.Object) property41);
        java.util.Locale locale45 = new java.util.Locale("+00:00");
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale45.getDisplayCountry(locale47);
        java.lang.String str49 = locale45.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localDateTime9.toString("2021-12-31T23:50:00.052", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.032" + "'", str33, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test16199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16199");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        int int21 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDateTime20.isSupported(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16200");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        java.lang.String str31 = dateTime30.toString();
        java.lang.String str32 = dateTime30.toString();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = property41.getAsText(locale44);
        java.lang.String str48 = nameProvider33.getName(locale44, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder49.setExtension('x', "Italian");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder55 = builder49.setLocale(locale54);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getCountry();
        java.lang.String str58 = locale54.getDisplayLanguage(locale56);
        java.lang.String str61 = nameProvider33.getName(locale54, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        boolean boolean62 = dateTime30.equals((java.lang.Object) nameProvider33);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        int int69 = localDateTime68.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.weekyear();
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        boolean boolean79 = dateTime30.equals((java.lang.Object) chronology78);
        boolean boolean80 = fixedDateTimeZone4.equals((java.lang.Object) chronology78);
        int int82 = fixedDateTimeZone4.getOffset((long) '#');
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.year();
        org.joda.time.LocalDateTime localDateTime91 = property90.roundHalfEvenCopy();
        boolean boolean92 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime91);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime91.minusWeeks(433);
        int int95 = localDateTime91.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2122-02-11T09:44:52.638+00:00:00.032" + "'", str31, "2122-02-11T09:44:52.638+00:00:00.032");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11T09:44:52.638+00:00:00.032" + "'", str32, "2122-02-11T09:44:52.638+00:00:00.032");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test16201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16201");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet34.remove(obj36);
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet34.spliterator();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = property46.getDifference(readableInstant47);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        int int54 = property46.getMaximumTextLength(locale52);
        java.lang.String str55 = property46.toString();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.lang.String str58 = locale56.getVariant();
        int int59 = property46.getMaximumShortTextLength(locale56);
        java.util.Set<java.lang.String> strSet60 = locale56.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray61 = strSet60.toArray();
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider62);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider62);
        boolean boolean65 = strSet60.contains((java.lang.Object) nameProvider62);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet60.spliterator();
        boolean boolean67 = strSet34.equals((java.lang.Object) strSet60);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean70 = strSet34.contains((java.lang.Object) 912);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int[] intArray72 = localDateTime71.getValues();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMonths(193);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.plus(readablePeriod77);
        int int79 = localDateTime74.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.withWeekyear(637);
        boolean boolean82 = strSet34.contains((java.lang.Object) localDateTime74);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Property[yearOfEra]" + "'", str55, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str57, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2022, 2, 11, 35092675]");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test16202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16202");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.clear();
        java.util.Locale.Builder builder21 = builder17.setLanguageTag("zh");
        java.util.Locale locale22 = builder17.build();
        java.lang.String str25 = nameProvider0.getShortName(locale22, "12", "2122-02-11T09:35:30.958Z");
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T09:35:34.361Z", "");
        java.lang.String str31 = nameProvider0.getShortName(locale28, "", "2122-02-11T09:36:00.199Z");
        java.lang.String str32 = locale28.getDisplayName();
        java.util.Locale.setDefault(locale28);
        java.util.Locale locale34 = locale28.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t09:35:34.361z");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11t09:35:34.361z" + "'", str32, "2122-02-11t09:35:34.361z");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "2122-02-11t09:35:34.361z");
    }

    @Test
    public void test16203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16203");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("35");
        int int14 = property10.getLeapAmount();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        int int16 = property10.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = dateTimeZone0.getShortName((long) 0, locale15);
        boolean boolean19 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffsetFromLocal(4800245862481L);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = strSet27.remove(obj29);
        boolean boolean31 = strSet27.isEmpty();
        boolean boolean32 = strSet27.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getName((long) (byte) 1);
        long long37 = dateTimeZone33.nextTransition((long) 2022);
        java.lang.String str38 = dateTimeZone33.toString();
        long long42 = dateTimeZone33.convertLocalToUTC(1L, false, (long) (byte) 100);
        boolean boolean43 = strSet27.remove((java.lang.Object) dateTimeZone33);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone33, (long) 34633667);
        long long48 = dateTimeZone33.adjustOffset((long) 374, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "44" + "'", str11, "44");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str21, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.032" + "'", str35, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2022L + "'", long37 == 2022L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str38, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-31L) + "'", long42 == (-31L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 34633667L + "'", long45 == 34633667L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 374L + "'", long48 == 374L);
    }

    @Test
    public void test16204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16204");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.Interval interval11 = property9.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property9.addWrapFieldToCopy(213);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withTime(582, 1108800000, 498, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 582 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35092760 + "'", int8 == 35092760);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test16205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16205");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:28.997Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(zoneId3);
    }

    @Test
    public void test16206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16206");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        int int28 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plusMillis(0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfEra();
        org.joda.time.ReadableInstant readableInstant78 = null;
        int int79 = property77.getDifference(readableInstant78);
        java.util.Locale locale83 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        int int85 = property77.getMaximumTextLength(locale83);
        org.joda.time.LocalDateTime localDateTime87 = property77.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = localDateTime87.toDateTime(readableInstant88);
        boolean boolean90 = dateTime69.isBefore(readableInstant88);
        boolean boolean91 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime92 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        long long93 = dateTime69.getMillis();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime69);
        int int95 = property9.compareTo((org.joda.time.ReadableInstant) dateTime69);
        long long96 = dateTime69.getMillis();
        long long97 = dateTime69.getMillis();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2122-02-11T09:44:52.779+00:00:00.032" + "'", str49, "2122-02-11T09:44:52.779+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals(locale83.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime92);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 4800246292747L + "'", long93 == 4800246292747L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + 4800246292747L + "'", long96 == 4800246292747L);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 4800246292747L + "'", long97 == 4800246292747L);
    }

    @Test
    public void test16207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16207");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        int int13 = localDateTime12.getMillisOfSecond();
        int int14 = localDateTime12.getYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = dateTimeZone19.getShortName(10L, locale22);
        long long27 = dateTimeZone19.adjustOffset((long) 10, false);
        java.lang.String str29 = dateTimeZone19.getNameKey(362L);
        org.joda.time.DateTime dateTime30 = localDateTime16.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale35 = new java.util.Locale("8", "2122-02-11T08:00:43.446-01:35");
        java.lang.String str36 = dateTimeZone19.getShortName(0L, locale35);
        java.util.Set<java.lang.Character> charSet37 = locale35.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 814 + "'", int13 == 814);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3220 + "'", int14 == 3220);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:35" + "'", str24, "-01:35");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals(locale35.toString(), "8_2122-02-11T08:00:43.446-01:35");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:35" + "'", str36, "-01:35");
        org.junit.Assert.assertNotNull(charSet37);
    }

    @Test
    public void test16208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16208");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        int int6 = fixedDateTimeZone4.getOffsetFromLocal(4800245746270L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        int int13 = property12.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime14.getFields();
        boolean boolean17 = fixedDateTimeZone4.equals((java.lang.Object) dateTimeFieldArray16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long20 = fixedDateTimeZone4.convertUTCToLocal((long) 892);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 903L + "'", long20 == 903L);
    }

    @Test
    public void test16209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16209");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMillis((int) (byte) 10);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = localDateTime4.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks(764);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.centuryOfEra();
        int int41 = property40.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        int int43 = property40.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2922789 + "'", int41 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test16210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16210");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('a', "2122-02-11T09:42:51.107Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:42:51.107Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test16211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16211");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(779);
        int int5 = localDateTime2.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withMillisOfDay(79901789);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test16212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16212");
        java.util.Locale locale2 = new java.util.Locale("2022-01-09T10:02:10.610", "2122-02-11T09:35:54.990Z");
        java.lang.String str3 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-01-09t10:02:10.610_2122-02-11T09:35:54.990Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-01-09t10:02:10.610_2122-02-11T09:35:54.990Z" + "'", str3, "2022-01-09t10:02:10.610_2122-02-11T09:35:54.990Z");
    }

    @Test
    public void test16213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16213");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(292278993);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withSecondOfMinute(183);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 183 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test16214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16214");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        int int7 = dateTimeZone1.getStandardOffset(4800245716316L);
        int int9 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("UTC");
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = dateTimeZone1.getShortName(4800245747930L, locale12);
        int int16 = dateTimeZone1.getOffset(4800245770243L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        int int48 = property40.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property40.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        long long53 = dateTime52.getMillis();
        int int54 = property24.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = property24.setCopy(100);
        org.joda.time.LocalDateTime localDateTime57 = property24.roundHalfCeilingCopy();
        java.util.Date date58 = localDateTime57.toDate();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.fromDateFields(date58);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.fromDateFields(date58);
        int[] intArray61 = localDateTime60.getValues();
        boolean boolean62 = dateTimeZone1.isLocalDateTimeGap(localDateTime60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "utc" + "'", str13, "utc");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4800246292880L + "'", long53 == 4800246292880L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2022, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test16215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16215");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekyear((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withWeekyear(341);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test16216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16216");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        int int31 = property18.getMaximumShortTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        java.lang.String str41 = property40.getAsShortText();
        org.joda.time.LocalDateTime localDateTime43 = property40.setCopy("35");
        int int44 = property40.getLeapAmount();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        int int46 = property40.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale30.getDisplayLanguage(locale45);
        java.util.Locale.setDefault(category8, locale30);
        java.util.Locale locale49 = java.util.Locale.US;
        java.util.Locale.setDefault(category8, locale49);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.util.Locale.setDefault(category8, locale51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category8);
        boolean boolean54 = languageRange1.equals((java.lang.Object) category8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test16217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16217");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        int int15 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.plusYears(34859734);
        org.joda.time.LocalDateTime.Property property18 = localDateTime8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test16218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16218");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 921);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test16219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16219");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Friday");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "friday" + "'", str2, "friday");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "friday" + "'", str3, "friday");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "friday" + "'", str4, "friday");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test16220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16220");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusWeeks(362);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long45 = fixedDateTimeZone43.previousTransition((long) 9);
        java.lang.String str46 = fixedDateTimeZone43.getID();
        boolean boolean47 = fixedDateTimeZone43.isFixed();
        int int49 = fixedDateTimeZone43.getOffset((long) 1);
        java.lang.String str51 = fixedDateTimeZone43.getShortName(4800245770108L);
        org.joda.time.DateTime dateTime52 = localDateTime31.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology54 = dateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 9L + "'", long45 == 9L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str46, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.032" + "'", str51, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T08:10:00.000+00:00:00.032" + "'", str53, "2022-02-11T08:10:00.000+00:00:00.032");
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test16221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16221");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long4 = dateTimeZone0.previousTransition((long) 639);
        long long6 = dateTimeZone0.convertUTCToLocal((long) 826);
        java.lang.String str8 = dateTimeZone0.getShortName(238L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 639L + "'", long4 == 639L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-5699174L) + "'", long6 == (-5699174L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
    }

    @Test
    public void test16222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16222");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds(10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        int int14 = property13.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minus(readablePeriod17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        int int45 = localDateTime44.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusHours(9);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = localDateTime52.isSupported(dateTimeFieldType59);
        boolean boolean61 = localDateTime38.isSupported(dateTimeFieldType59);
        int int62 = localDateTime15.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
    }

    @Test
    public void test16223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16223");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone51 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long53 = fixedDateTimeZone51.previousTransition((long) 9);
        int int55 = fixedDateTimeZone51.getStandardOffset((long) (short) 0);
        java.lang.String str57 = fixedDateTimeZone51.getNameKey(4800245761520L);
        boolean boolean58 = fixedDateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime59 = localDateTime45.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime45.toString(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246293054L + "'", long36 == 4800246293054L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9L + "'", long53 == 9L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italian" + "'", str57, "Italian");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2021-12-31T23:50:00.000" + "'", str61, "2021-12-31T23:50:00.000");
    }

    @Test
    public void test16224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16224");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale6 = new java.util.Locale("chinois");
        java.util.Locale.Builder builder7 = builder0.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.setUnicodeLocaleKeyword("", "\u610f\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "chinois");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test16225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16225");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.getID();
        java.util.TimeZone timeZone18 = fixedDateTimeZone11.toTimeZone();
        long long20 = fixedDateTimeZone11.previousTransition(4800245769124L);
        long long22 = fixedDateTimeZone11.convertUTCToLocal((long) 929);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245769124L + "'", long20 == 4800245769124L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 935L + "'", long22 == 935L);
    }

    @Test
    public void test16226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16226");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clearExtensions();
        java.util.Locale.Builder builder11 = builder0.removeUnicodeLocaleAttribute("GMT");
        java.util.Locale.Builder builder14 = builder0.setExtension('x', "English");
        java.util.Locale locale15 = builder0.build();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        boolean boolean33 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime22.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        boolean boolean37 = property35.isLeap();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusMillis(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = property45.getDifference(readableInstant46);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        int int53 = property45.getMaximumTextLength(locale51);
        org.joda.time.LocalDateTime localDateTime55 = property45.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusHours(9);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        boolean boolean80 = localDateTime72.isSupported(dateTimeFieldType79);
        int int81 = dateTime57.get(dateTimeFieldType79);
        int int82 = property35.compareTo((org.joda.time.ReadableInstant) dateTime57);
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.lang.String str84 = property35.getAsShortText(locale83);
        java.util.Locale.Builder builder85 = builder0.setLocale(locale83);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "22" + "'", str36, "22");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2122-02-11T08:09:53.114-01:35" + "'", str58, "2122-02-11T08:09:53.114-01:35");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 22 + "'", int81 == 22);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22" + "'", str84, "22");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test16227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16227");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withYearOfCentury(8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int[] intArray12 = localDateTime11.getValues();
        int int13 = localDateTime11.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        int int17 = localDateTime15.getMillisOfSecond();
        boolean boolean18 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        int int19 = localDateTime11.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.plusWeeks(3);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFieldAdded(durationFieldType23, 917);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 2, 11, 29393148]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 148 + "'", int17 == 148);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16228");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getLeapDurationField();
        org.joda.time.DurationField durationField7 = property4.getDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        int int9 = property4.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property4.addWrapFieldToCopy(34916817);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test16229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16229");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.Interval interval10 = property8.toInterval();
        int int11 = property8.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test16230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16230");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        java.lang.String str8 = locale5.getDisplayName();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.getCountry();
        java.lang.String str13 = locale10.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet15 = locale5.getUnicodeLocaleKeys();
        boolean boolean16 = strSet15.isEmpty();
        boolean boolean17 = strSet15.isEmpty();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test16231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16231");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("Canada", "14", 503, (int) '4');
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        timeZone5.setRawOffset(801);
        java.lang.String str8 = timeZone5.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:00" + "'", str8, "GMT+00:00");
    }

    @Test
    public void test16232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16232");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusHours(9);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = localDateTime55.isSupported(dateTimeFieldType62);
        int int64 = dateTime40.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        int int71 = localDateTime70.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.monthOfYear();
        boolean boolean74 = dateTime40.equals((java.lang.Object) localDateTime69);
        boolean boolean75 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime40);
        long long76 = dateTime40.getMillis();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusHours(22);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(dateTimeZone86);
        boolean boolean88 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime(chronology89);
        int int91 = localDateTime90.getDayOfMonth();
        java.util.Date date92 = localDateTime90.toDate();
        int int93 = localDateTime90.getHourOfDay();
        org.joda.time.LocalDateTime.Property property94 = localDateTime90.millisOfDay();
        org.joda.time.LocalDateTime localDateTime96 = property94.addToCopy((long) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = property94.getFieldType();
        boolean boolean98 = dateTime40.isSupported(dateTimeFieldType97);
        org.joda.time.Chronology chronology99 = dateTime40.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T08:09:53.231-01:35" + "'", str20, "2122-02-11T08:09:53.231-01:35");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2122-02-11T08:09:53.231-01:35" + "'", str41, "2122-02-11T08:09:53.231-01:35");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 4800246293231L + "'", long76 == 4800246293231L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 11 + "'", int91 == 11);
        org.junit.Assert.assertNotNull(date92);
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Fri Feb 11 08:09:53 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test16233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16233");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2122-02-11T09:35:48.546Z");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2122-02-11T09:37:14.762Z");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test16234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16234");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusWeeks(362);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone43 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long45 = fixedDateTimeZone43.previousTransition((long) 9);
        java.lang.String str46 = fixedDateTimeZone43.getID();
        boolean boolean47 = fixedDateTimeZone43.isFixed();
        int int49 = fixedDateTimeZone43.getOffset((long) 1);
        java.lang.String str51 = fixedDateTimeZone43.getShortName(4800245770108L);
        org.joda.time.DateTime dateTime52 = localDateTime31.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone43);
        int int53 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime31.plusDays(60);
        int int56 = localDateTime55.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 9L + "'", long45 == 9L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str46, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.032" + "'", str51, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
    }

    @Test
    public void test16235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16235");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.DurationField durationField40 = property7.getLeapDurationField();
        int int41 = property7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = property7.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra(21);
        int int46 = localDateTime45.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMillis(2);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246293337L + "'", long36 == 4800246293337L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test16236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16236");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:41:55.454+00:00:00.032", (double) 137);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=137.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16237");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.getMaximumValue();
        int int11 = property8.getMinimumValueOverall();
        int int12 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(34678980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34678980 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test16238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16238");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        int int9 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths((-292275054));
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusMinutes(677);
        boolean boolean26 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withEra(526);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 526 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16239");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = property18.getAsShortText(locale19);
        java.lang.String str21 = property7.getAsText(locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        int int23 = strSet22.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = strSet22.add("2122-02-11T09:44:17.347+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test16240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16240");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime16 = property12.setCopy("35", locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = locale15.getISO3Country();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder2.setScript("2022-02-11T09:38:19.261");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:38:19.261 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "France" + "'", str17, "France");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FRA" + "'", str18, "FRA");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test16241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16241");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int14 = localDateTime10.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.plusWeeks(58);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra(929);
        int int21 = localDateTime20.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T08:09:53.436" + "'", str16, "2022-02-11T08:09:53.436");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 83 + "'", int21 == 83);
    }

    @Test
    public void test16242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16242");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime25.getFields();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        long long28 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = property18.getLocalDateTime();
        java.util.Date date31 = localDateTime30.toDate();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:35" + "'", str3, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-95L) + "'", long28 == (-95L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Fri Feb 11 08:09:53 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test16243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16243");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.convertUTCToLocal((long) 21);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey(4800245796621L);
        java.lang.String str15 = fixedDateTimeZone4.getShortName((long) 280);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 27L + "'", long11 == 27L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.006" + "'", str15, "+00:00:00.006");
    }

    @Test
    public void test16244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "Italian");
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder17 = builder11.setLocale(locale16);
        java.util.Locale locale18 = builder11.build();
        java.util.Locale.Builder builder19 = builder11.clear();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder22 = builder11.setLocale(locale20);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder24 = builder11.setLocale(locale23);
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = locale23.getDisplayCountry();
        java.util.Locale.Builder builder27 = builder10.setLocale(locale23);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test16245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16245");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:35:21.183");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfWeek();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffsetFromLocal((long) 9);
        java.lang.String str8 = dateTimeZone4.getName((long) 13);
        long long11 = dateTimeZone4.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        int int28 = property20.getMaximumTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime30 = property20.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = dateTimeZone32.getName((long) 292278993, locale34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        boolean boolean41 = dateTimeZone4.equals((java.lang.Object) property40);
        org.joda.time.LocalDateTime localDateTime42 = property40.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime45 = property40.addWrapFieldToCopy(300);
        org.joda.time.LocalDateTime localDateTime47 = property40.addToCopy((long) 445);
        int int48 = localDateTime47.getYear();
        int int49 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-5700000) + "'", int6 == (-5700000));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245710661L + "'", long11 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:35" + "'", str35, "-01:35");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2149 + "'", int48 == 2149);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test16246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16246");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        boolean boolean31 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.minuteOfHour();
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = property35.getAsShortText(locale39);
        java.lang.String str42 = locale8.getDisplayScript(locale39);
        java.lang.String str43 = locale8.getDisplayScript();
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder44.clearExtensions();
        java.util.Locale locale46 = builder44.build();
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Locale locale51 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str52 = locale46.getDisplayLanguage(locale51);
        java.lang.String str53 = locale46.toLanguageTag();
        java.util.Set<java.lang.String> strSet54 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale8.getDisplayScript(locale46);
        java.lang.String str56 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str13, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals(locale51.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test16247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16247");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property7.getAsShortText(locale8);
        int int10 = property7.getMaximumValueOverall();
        java.lang.String str11 = property7.getAsShortText();
        org.joda.time.LocalDateTime localDateTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours(31);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMinutes(174);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plus(readablePeriod17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusMonths(34725203);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays(789);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test16248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16248");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey(362L);
        java.util.TimeZone timeZone7 = fixedDateTimeZone4.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone7.getOffset(0, 415, 34849135, 133, 899, 34950343);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str6, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test16249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16249");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str5 = dateTimeZone0.getName(4800245885019L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-01:35" + "'", str2, "-01:35");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:35" + "'", str5, "-01:35");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:35");
    }

    @Test
    public void test16250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(5);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfDay();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = property14.getAsText(locale16);
        java.lang.String str20 = property8.getAsText(locale16);
        int int21 = property8.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "29345577" + "'", str9, "29345577");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "29345577" + "'", str20, "29345577");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 29345577 + "'", int21 == 29345577);
    }

    @Test
    public void test16251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16251");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.lang.String str14 = fixedDateTimeZone4.getNameKey(4800245744056L);
        java.util.TimeZone timeZone15 = fixedDateTimeZone4.toTimeZone();
        boolean boolean17 = fixedDateTimeZone4.isStandardOffset(4800245741548L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        int int31 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        boolean boolean35 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property38 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property38.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.minusYears(921);
        boolean boolean46 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime41);
        java.lang.String str48 = fixedDateTimeZone4.getShortName(669L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.032" + "'", str48, "+00:00:00.032");
    }

    @Test
    public void test16252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16252");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:37:48.035Z");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test16253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16253");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2122-02-11T09:36:30.787+00:00:00.032", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:36:30.787+00:00:00.032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16254");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("", "2122-02-11T09:35:59.916Z", 901, 263);
        java.util.Locale locale9 = new java.util.Locale("2122-02-11T09:38:00.872Z", "2022-02-10T00:02:03.001-01:35", "2122-02-11T09:37:12.375Z");
        java.lang.String str10 = fixedDateTimeZone4.getShortName((long) 2098, locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale9.toString(), "2122-02-11t09:38:00.872z_2022-02-10T00:02:03.001-01:35_2122-02-11T09:37:12.375Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.901" + "'", str10, "+00:00:00.901");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2122-02-11t09:38:00.872z" + "'", str11, "2122-02-11t09:38:00.872z");
    }

    @Test
    public void test16255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16255");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusHours(9);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        boolean boolean38 = localDateTime30.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime14.withField(dateTimeFieldType37, (int) 'a');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        boolean boolean43 = localDateTime11.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test16256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16256");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(753, 65, 445, 34558597, 490, 803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34558597 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16257");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(323);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusHours(28847909);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusWeeks(34588285);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16258");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.LocalDateTime localDateTime12 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 29393681 + "'", int8 == 29393681);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test16259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16259");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.dayOfMonth();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder22.setExtension('x', "Italian");
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder28 = builder22.setLocale(locale27);
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.minuteOfHour();
        boolean boolean39 = property37.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.year();
        org.joda.time.LocalDateTime localDateTime45 = property43.addWrapFieldToCopy(529);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale47);
        int int49 = property43.getMaximumTextLength(locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder51 = builder29.setLocale(locale47);
        int int52 = property21.getMaximumTextLength(locale47);
        java.lang.String str53 = dateTimeZone1.getShortName((long) 715, locale47);
        long long55 = dateTimeZone1.nextTransition(4800245818170L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800245818170L + "'", long55 == 4800245818170L);
    }

    @Test
    public void test16260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16260");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long16 = dateTimeZone0.convertUTCToLocal((long) (byte) 10);
        java.lang.String str18 = dateTimeZone0.getNameKey(5700838L);
        java.lang.String str19 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-5699990L) + "'", long16 == (-5699990L));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:35" + "'", str19, "-01:35");
    }

    @Test
    public void test16261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.yearOfEra();
        java.lang.String str8 = property7.getAsString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 731 + "'", int3 == 731);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
    }

    @Test
    public void test16262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16262");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T08:03:32.820-01:35");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = dateTimeZone14.getShortName(10L, locale17);
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Set<java.lang.Character> charSet21 = locale17.getExtensionKeys();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale22.getCountry();
        java.lang.String str25 = locale22.getISO3Language();
        java.lang.String str26 = locale17.getDisplayName(locale22);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale17.getDisplayCountry(locale27);
        int int30 = property11.getMaximumShortTextLength(locale27);
        java.lang.String str32 = locale27.getExtension('u');
        java.lang.String str33 = locale27.getVariant();
        java.lang.String str34 = timeZone1.getDisplayName(locale27);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:35" + "'", str19, "-01:35");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Greenwich Mean Time" + "'", str34, "Greenwich Mean Time");
    }

    @Test
    public void test16263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16263");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusHours(9);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        int int36 = property18.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.lang.String str37 = dateTime35.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:35" + "'", str3, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-10T08:09:53.764-01:35" + "'", str37, "2022-02-10T08:09:53.764-01:35");
    }

    @Test
    public void test16264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16264");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(1);
        int int36 = localDateTime16.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime16.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = dateTimeZone41.getShortName(10L, locale44);
        long long49 = dateTimeZone41.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readableDuration59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusYears(0);
        boolean boolean63 = dateTimeZone50.isLocalDateTimeGap(localDateTime60);
        long long67 = dateTimeZone50.convertLocalToUTC((long) 1, true, 100L);
        long long69 = dateTimeZone41.getMillisKeepLocal(dateTimeZone50, 4800245711010L);
        int int71 = dateTimeZone41.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        java.util.Date date75 = localDateTime74.toDate();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusDays(34520736);
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        int int79 = localDateTime74.getWeekOfWeekyear();
        boolean boolean80 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property81 = localDateTime74.dayOfMonth();
        int int82 = localDateTime74.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:35" + "'", str46, "-01:35");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 5700001L + "'", long67 == 5700001L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4800245711010L + "'", long69 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-5700000) + "'", int71 == (-5700000));
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Wed Feb 11 08:00:18 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
    }

    @Test
    public void test16265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16265");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        int int12 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(923);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime15.getFieldTypes();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DurationField durationField21 = property19.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime22.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusDays(292278993);
        int int28 = localDateTime27.getWeekyear();
        boolean boolean29 = property19.equals((java.lang.Object) localDateTime27);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withPeriodAdded(readablePeriod31, 34748043);
        boolean boolean34 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-798211) + "'", int28 == (-798211));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16266");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        java.lang.String str3 = dateTimeZone0.getID();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getScript();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = dateTimeZone0.getShortName((long) 10, locale5);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(316);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test16267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16267");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale locale11 = builder0.build();
        java.util.Locale locale12 = builder0.build();
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int[] intArray16 = localDateTime15.getValues();
        int int17 = localDateTime15.getEra();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusHours(22);
        int int27 = localDateTime26.size();
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = localDateTime26.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minus(readablePeriod30);
        int int32 = localDateTime31.getDayOfWeek();
        int int33 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int34 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime15.hourOfDay();
        java.util.Locale locale36 = java.util.Locale.US;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale36.getDisplayVariant(locale37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.LocalDateTime localDateTime53 = property50.setCopy("35");
        int int54 = property50.getLeapAmount();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        int int56 = property50.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String str58 = dateTimeZone40.getShortName((long) 0, locale55);
        java.lang.String str59 = locale37.getDisplayName(locale55);
        boolean boolean60 = locale55.hasExtensions();
        java.lang.String str61 = property35.getAsShortText(locale55);
        java.util.Set<java.lang.String> strSet62 = locale55.getUnicodeLocaleKeys();
        java.lang.String str63 = locale55.getDisplayScript();
        java.lang.String str64 = locale55.getScript();
        java.util.Locale.Builder builder65 = builder13.setLocale(locale55);
        java.util.Locale.Builder builder66 = builder13.clearExtensions();
        java.util.Locale locale67 = builder66.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 2, 11, 29393873]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-01:35" + "'", str58, "-01:35");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "italiano" + "'", str59, "italiano");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "8" + "'", str61, "8");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
    }

    @Test
    public void test16268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16268");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plus(readableDuration31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        int int35 = dateTimeZone33.getOffset((long) 10);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property44.getDifference(readableInstant45);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        int int52 = property44.getMaximumTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime54 = property44.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        long long57 = dateTime56.getMillis();
        int int58 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime28, dateTimeZone33);
        int int60 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        int int61 = localDateTime28.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4800246293907L + "'", long57 == 4800246293907L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
    }

    @Test
    public void test16269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16269");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withYear(25);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime18.getFields();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusDays(41);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = strSet28.remove(obj30);
        boolean boolean32 = strSet28.isEmpty();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime33.getFieldTypes();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.DurationField durationField39 = property37.getLeapDurationField();
        java.lang.String str40 = property37.getName();
        boolean boolean41 = strSet28.contains((java.lang.Object) property37);
        java.util.Locale locale45 = new java.util.Locale("2122-02-11T09:35:08.397Z", "2122-02-11T08:00:15.544-01:35", "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        int int46 = property37.getMaximumTextLength(locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = property23.setCopy("2122-02-11T09:42:05.530Z", locale45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2122-02-11T09:42:05.530Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e");
    }

    @Test
    public void test16270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16270");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.previousTransition(4800245735513L);
        boolean boolean13 = fixedDateTimeZone4.equals((java.lang.Object) 292278993);
        java.lang.String str15 = fixedDateTimeZone4.getName((long) 589);
        java.lang.String str17 = fixedDateTimeZone4.getShortName(4800245770773L);
        boolean boolean19 = fixedDateTimeZone4.isStandardOffset(417L);
        java.lang.String str21 = fixedDateTimeZone4.getNameKey(4800245847385L);
        long long23 = fixedDateTimeZone4.convertUTCToLocal(4800251590055L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735513L + "'", long11 == 4800245735513L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.006" + "'", str15, "+00:00:00.006");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.006" + "'", str17, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str21, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4800251590061L + "'", long23 == 4800251590061L);
    }

    @Test
    public void test16271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16271");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2122-02-11T09:44:44.061+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2122-02-11T09:44:44.061+00:00:00.032\" is malformed at \"+00:00:00.032\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16272");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        org.joda.time.LocalDateTime localDateTime17 = property7.withMaximumValue();
        java.lang.String str18 = property7.getAsString();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusHours(9);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime35 = localDateTime34.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusHours(28);
        int int38 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        int int39 = property7.getMinimumValueOverall();
        java.lang.String str40 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
    }

    @Test
    public void test16273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16273");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(883);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusMillis(493);
        int int18 = localDateTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test16274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16274");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(883);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusMinutes(15);
        boolean boolean42 = localDateTime14.equals((java.lang.Object) 15);
        org.joda.time.LocalDateTime.Property property43 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime14.plusMonths(2023);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond(530);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test16275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16275");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.DateTime dateTime21 = localDateTime15.toDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.yearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime15.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
    }

    @Test
    public void test16276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16276");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int11 = fixedDateTimeZone4.getStandardOffset((long) 183);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey((long) 661);
        java.util.TimeZone timeZone14 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone17.toTimeZone();
        java.time.ZoneId zoneId20 = timeZone19.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        timeZone21.setRawOffset(308);
        boolean boolean24 = timeZone14.hasSameRules(timeZone21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = timeZone14.getDisplayName(false, 753);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 753");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16277");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        boolean boolean25 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime29.minuteOfHour();
        boolean boolean38 = property36.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.centuryOfEra();
        boolean boolean41 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plus(readableDuration42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.withWeekyear(41);
        int int48 = localDateTime47.getMinuteOfHour();
        int int49 = localDateTime47.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withCenturyOfEra(386);
        boolean boolean52 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime51);
        int[] intArray53 = localDateTime51.getValues();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 41 + "'", int49 == 41);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[38641, 2, 8, 29400000]");
    }

    @Test
    public void test16278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16278");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        int[] intArray10 = localDateTime8.getValues();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.minuteOfHour();
        boolean boolean20 = property18.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfCeilingCopy();
        int int22 = property18.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property18.setCopy(13);
        org.joda.time.LocalDateTime localDateTime27 = property18.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths(1);
        java.lang.String str32 = localDateTime28.toString("2022");
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        int int48 = property40.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property40.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        org.joda.time.DateTime dateTime54 = localDateTime28.toDateTime(dateTimeZone53);
        int int55 = property18.getDifference((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = dateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, chronology56);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 1, 9, 36550131]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-95) + "'", int55 == (-95));
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test16279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16279");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getOffset((long) (byte) 0);
        int int26 = fixedDateTimeZone18.getStandardOffset(4800246222066L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31L) + "'", long22 == (-31L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test16280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16280");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int14 = localDateTime10.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusWeeks((int) (short) 0);
        int int19 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.minusMonths(34522866);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.String str32 = property31.getAsShortText();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime35 = property31.setCopy("35", locale34);
        org.joda.time.LocalDateTime localDateTime36 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        int int45 = localDateTime44.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.weekyear();
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.year();
        int int58 = localDateTime56.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime59.getFieldTypes();
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.withField(dateTimeFieldType64, 13);
        int int67 = localDateTime55.get(dateTimeFieldType64);
        int int68 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.Chronology chronology69 = localDateTime55.getChronology();
        boolean boolean70 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T08:09:54.184" + "'", str16, "2022-02-11T08:09:54.184");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 54 + "'", int58 == 54);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test16281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16281");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        int int15 = fixedDateTimeZone4.getOffsetFromLocal(4800245739686L);
        long long18 = fixedDateTimeZone4.adjustOffset(4800245770243L, true);
        boolean boolean19 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4800245770243L + "'", long18 == 4800245770243L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test16282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16282");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField18 = property7.getDurationField();
        java.lang.String str19 = property7.getName();
        java.lang.String str20 = property7.toString();
        java.lang.String str21 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfEra" + "'", str19, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
    }

    @Test
    public void test16283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16283");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:36:27.108");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        boolean boolean4 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:36:27.108");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test16284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16284");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withSecondOfMinute((int) (byte) 10);
        int int33 = localDateTime30.getDayOfYear();
        int int34 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test16285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16285");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245715938L);
        java.util.Date date2 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours(795);
        org.joda.time.Chronology chronology5 = localDateTime1.getChronology();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Wed Feb 11 08:00:15 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test16286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16286");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245719728L);
        java.lang.String str10 = fixedDateTimeZone4.getShortName(4800245733835L);
        long long12 = fixedDateTimeZone4.convertUTCToLocal(4800245895410L);
        java.lang.String str14 = fixedDateTimeZone4.getShortName(147L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245719728L + "'", long8 == 4800245719728L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.032" + "'", str10, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4800245895442L + "'", long12 == 4800245895442L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.032" + "'", str14, "+00:00:00.032");
    }

    @Test
    public void test16287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        boolean boolean23 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.secondOfMinute();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property24.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet44);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = strSet49.remove(obj51);
        boolean boolean53 = strSet49.isEmpty();
        boolean boolean55 = strSet49.add("");
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet49, filteringMode56);
        boolean boolean58 = localDateTime28.equals((java.lang.Object) languageRangeList30);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property60 = localDateTime4.monthOfYear();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        org.joda.time.LocalDateTime localDateTime62 = property60.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test16288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(386);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(12);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(3220);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears(362);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 362 + "'", int3 == 362);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test16289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16289");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        java.lang.String str8 = fixedDateTimeZone4.getNameKey(4800245885019L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str8, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test16290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16290");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        int int62 = property32.compareTo((org.joda.time.ReadableInstant) dateTime60);
        int int63 = property24.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime60.getZone();
        long long66 = dateTimeZone64.previousTransition(0L);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.plusMillis(0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfEra();
        org.joda.time.ReadableInstant readableInstant75 = null;
        int int76 = property74.getDifference(readableInstant75);
        java.util.Locale locale80 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        int int82 = property74.getMaximumTextLength(locale80);
        org.joda.time.LocalDateTime localDateTime84 = property74.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        java.util.Locale locale88 = java.util.Locale.GERMANY;
        java.lang.String str89 = dateTimeZone86.getName((long) 292278993, locale88);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.joda.time.DateTime dateTime91 = localDateTime84.toDateTime(dateTimeZone86);
        long long92 = dateTime91.getMillis();
        org.joda.time.Chronology chronology93 = dateTime91.getChronology();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((java.lang.Object) 0L, chronology93);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.minusDays(36);
        int int97 = localDateTime94.getMinuteOfHour();
        org.joda.time.DateTime dateTime98 = localDateTime94.toDateTime();
        org.joda.time.LocalDateTime.Property property99 = localDateTime94.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 4800246294395L + "'", long61 == 4800246294395L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-100) + "'", int63 == (-100));
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-01:35" + "'", str89, "-01:35");
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 4800246294395L + "'", long92 == 4800246294395L);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 25 + "'", int97 == 25);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test16291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16291");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        int int41 = localDateTime40.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(2022);
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localDateTime53.getValue(731);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 731");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246294447L + "'", long36 == 4800246294447L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test16292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16292");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDurationAdded(readableDuration8, 15);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withSecondOfMinute((int) '#');
        int int13 = localDateTime4.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 29394466]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test16293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16293");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:39:52.905Z", "2022-02-11T09:43:39.140", 867, 17);
    }

    @Test
    public void test16294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16294");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245722839L);
    }

    @Test
    public void test16295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(692);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        int int10 = localDateTime7.getMillisOfSecond();
        int int11 = localDateTime7.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDate(494, 937, 2097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 937 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 502 + "'", int10 == 502);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54 + "'", int11 == 54);
    }

    @Test
    public void test16296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16296");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String[] strArray1 = java.util.Locale.getISOLanguages();
        java.io.Serializable[] serializableArray2 = strSet0.toArray((java.io.Serializable[]) strArray1);
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.lang.Object[] objArray4 = strSet0.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.stream.Stream<java.util.Locale> localeStream16 = localeList13.stream();
        boolean boolean17 = strSet0.retainAll((java.util.Collection<java.util.Locale>) localeList13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.minuteOfHour();
        boolean boolean27 = property25.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DurationField durationField32 = property31.getDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra(729);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis(419);
        int int38 = localDateTime37.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusHours(511);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusMillis(112);
        boolean boolean43 = strSet0.remove((java.lang.Object) localDateTime37);
        java.lang.Object[] objArray44 = strSet0.toArray();
        boolean boolean46 = strSet0.add("2022-02-11T09:39:53.055");
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(serializableArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(localeStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test16297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16297");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(729);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16298");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.util.Locale locale7 = new java.util.Locale("2122-02-11T08:00:12.897-01:35", "", "2022-02-11T09:37:41.782");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long14 = fixedDateTimeZone12.previousTransition((long) 9);
        boolean boolean16 = fixedDateTimeZone12.isStandardOffset(4800245710661L);
        int int18 = fixedDateTimeZone12.getStandardOffset((long) (-798211));
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        boolean boolean20 = fixedDateTimeZone12.equals((java.lang.Object) locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        java.lang.String str22 = locale7.getDisplayCountry(locale19);
        java.lang.String str23 = locale19.getDisplayVariant();
        java.lang.String str24 = dateTimeZone1.getShortName(4800245744866L, locale19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals(locale7.toString(), "2122-02-11t08:00:12.897-01:35__2022-02-11T09:37:41.782");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test16299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16299");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime25.getFields();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        long long28 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = property18.getLocalDateTime();
        java.util.Date date31 = localDateTime30.toDate();
        int int32 = localDateTime30.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withCenturyOfEra(56);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:35" + "'", str3, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-95L) + "'", long28 == (-95L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Fri Feb 11 08:09:54 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 29394588 + "'", int32 == 29394588);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test16300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16300");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((-32));
        org.joda.time.DurationField durationField12 = property9.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test16301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16301");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        boolean boolean63 = dateTime42.isBefore(readableInstant61);
        boolean boolean64 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology65 = dateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 6, chronology65);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(4800245710519L, chronology65);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        int int71 = localDateTime69.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusWeeks(907);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2122-02-11T08:09:54.619-01:35" + "'", str22, "2122-02-11T08:09:54.619-01:35");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test16302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setLanguageTag("2122-02-11T09:40:51.416Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2122 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test16303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16303");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.weekyear();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale15.toLanguageTag();
        int int23 = property12.getMaximumShortTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime24 = property12.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property12.getFieldType();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals(locale20.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
    }

    @Test
    public void test16304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16304");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int14 = localDateTime10.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long24 = fixedDateTimeZone21.convertLocalToUTC((long) (-798211), true);
        long long26 = fixedDateTimeZone21.previousTransition(2022L);
        org.joda.time.DateTime dateTime27 = localDateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        java.lang.String str29 = fixedDateTimeZone21.getNameKey((long) 867);
        long long32 = fixedDateTimeZone21.convertLocalToUTC((-5L), true);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.clear();
        java.util.Locale.Builder builder38 = builder34.setLanguageTag("zh");
        java.util.Locale locale39 = builder34.build();
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str48 = locale43.getDisplayVariant(locale47);
        java.lang.String str49 = locale39.getDisplayCountry(locale47);
        java.lang.String str50 = fixedDateTimeZone21.getShortName(0L, locale39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T08:09:54.686" + "'", str16, "2022-02-11T08:09:54.686");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-798217L) + "'", long24 == (-798217L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2022L + "'", long26 == 2022L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str29, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-11L) + "'", long32 == (-11L));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.006" + "'", str50, "+00:00:00.006");
    }

    @Test
    public void test16305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16305");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test16306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16306");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withHourOfDay(4);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test16307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, 529);
        int int6 = localDateTime2.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withPeriodAdded(readablePeriod7, 345290);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds(837);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test16308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16308");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        int int21 = localDateTime16.getYear();
        int int22 = localDateTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test16309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16309");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        strSet8.clear();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "Italian");
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder17 = builder10.clearExtensions();
        java.util.Locale.Builder builder18 = builder10.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder21 = builder18.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder22 = builder18.clearExtensions();
        boolean boolean23 = strSet8.equals((java.lang.Object) builder18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = property31.getAsText(locale34);
        java.lang.String str36 = locale34.getCountry();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime37.minuteOfHour();
        boolean boolean46 = property44.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMinimumValue();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale locale52 = builder50.build();
        java.util.Locale.Builder builder53 = builder50.clearExtensions();
        boolean boolean54 = property48.equals((java.lang.Object) builder53);
        java.util.Locale.Builder builder55 = builder53.clearExtensions();
        java.util.Locale locale56 = builder55.build();
        java.lang.String str57 = locale34.getDisplayLanguage(locale56);
        java.util.Locale.Builder builder58 = builder18.setLocale(locale34);
        java.lang.String str59 = locale34.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CA" + "'", str36, "CA");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "French" + "'", str57, "French");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test16310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16310");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.util.Locale locale4 = new java.util.Locale("35");
        java.lang.String str5 = dateTimeZone1.getShortName((long) 150, locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str12 = nameProvider8.getName(locale9, "2122-02-11T08:00:12.990-01:35", "");
        java.lang.String str13 = locale9.getDisplayName();
        java.util.Locale.setDefault(category7, locale9);
        java.lang.String str15 = locale4.getDisplayScript(locale9);
        java.util.Set<java.lang.String> strSet16 = locale4.getUnicodeLocaleAttributes();
        int int17 = strSet16.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals(locale4.toString(), "35");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "italiano" + "'", str13, "italiano");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test16311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16311");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:37:00.674Z", "2122-02-11T09:36:13.832Z", "2122-02-11T09:36:29.674Z");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = dateTimeZone6.getShortName(10L, locale9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = property19.getDifference(readableInstant20);
        java.util.Locale locale25 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        int int27 = property19.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = property19.addToCopy((int) (byte) 100);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("hi!");
        int int32 = property19.getMaximumShortTextLength(locale31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.minuteOfHour();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDateTime localDateTime44 = property41.setCopy("35");
        int int45 = property41.getLeapAmount();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        int int47 = property41.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale31.getDisplayLanguage(locale46);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.lang.String str50 = locale46.toLanguageTag();
        java.lang.String str51 = locale9.getDisplayLanguage(locale46);
        java.lang.String str52 = locale3.getDisplayName(locale9);
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t09:37:00.674z_2122-02-11T09:36:13.832Z_2122-02-11T09:36:29.674Z");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:35" + "'", str11, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2122-02-11t09:37:00.674z (2122-02-11T09:36:13.832Z,2122-02-11T09:36:29.674Z)" + "'", str52, "2122-02-11t09:37:00.674z (2122-02-11T09:36:13.832Z,2122-02-11T09:36:29.674Z)");
    }

    @Test
    public void test16312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16312");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int11 = fixedDateTimeZone4.getStandardOffset((long) 183);
        java.lang.String str13 = fixedDateTimeZone4.getShortName((long) 46);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = builder19.build();
        boolean boolean21 = fixedDateTimeZone4.equals((java.lang.Object) builder19);
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setRegion("2122-02-11T09:41:18.510Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:41:18.510Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.006" + "'", str13, "+00:00:00.006");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test16313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16313");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:36:00.000", "");
        java.lang.String str3 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:36:00.000");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11t09:36:00.000" + "'", str3, "2022-02-11t09:36:00.000");
    }

    @Test
    public void test16314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16314");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        java.lang.String str38 = property36.toString();
        java.lang.String str39 = property36.getName();
        org.joda.time.LocalDateTime localDateTime40 = property36.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[millisOfDay]" + "'", str38, "Property[millisOfDay]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "millisOfDay" + "'", str39, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test16315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16315");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withMillisOfDay(117);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond(925);
        int int25 = localDateTime24.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test16316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16316");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDateTime10.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withCenturyOfEra(150);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime21.getFieldTypes();
        int int26 = localDateTime21.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths(1);
        int int35 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusMonths(22);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        int int51 = localDateTime50.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readableDuration53);
        boolean boolean55 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime44.plusDays(292278993);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        int int60 = localDateTime59.getYearOfCentury();
        int int61 = localDateTime59.getMillisOfSecond();
        int int62 = localDateTime59.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plusMillis(0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.yearOfEra();
        org.joda.time.ReadableInstant readableInstant73 = null;
        int int74 = property72.getDifference(readableInstant73);
        java.util.Locale locale78 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        int int80 = property72.getMaximumTextLength(locale78);
        org.joda.time.LocalDateTime localDateTime82 = property72.addToCopy((int) (byte) 100);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("hi!");
        int int85 = property72.getMaximumShortTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime86 = property72.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property72.getFieldType();
        org.joda.time.LocalDateTime.Property property88 = localDateTime59.property(dateTimeFieldType87);
        boolean boolean89 = localDateTime57.isSupported(dateTimeFieldType87);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime37.withField(dateTimeFieldType87, 34522866);
        int int92 = localDateTime30.get(dateTimeFieldType87);
        boolean boolean93 = localDateTime10.isSupported(dateTimeFieldType87);
        int int94 = localDateTime10.getDayOfYear();
        org.joda.time.LocalDateTime.Property property95 = localDateTime10.monthOfYear();
        int int96 = property95.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 883 + "'", int61 == 883);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 11 + "'", int62 == 11);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2022 + "'", int92 == 2022);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 42 + "'", int94 == 42);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test16317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        int int27 = property14.getMaximumShortTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime28 = property14.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property14.getFieldType();
        org.joda.time.LocalDateTime.Property property30 = localDateTime1.property(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        int[] intArray37 = localDateTime36.getValues();
        int int38 = localDateTime36.getEra();
        boolean boolean39 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(800);
        int int43 = localDateTime40.getEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime40.toString(dateTimeFormatter44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withSecondOfMinute(30);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 923 + "'", int3 == 923);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 29394923]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T08:09:54.923" + "'", str45, "2022-02-11T08:09:54.923");
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test16318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16318");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        boolean boolean23 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.secondOfMinute();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property24.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet44);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = strSet49.remove(obj51);
        boolean boolean53 = strSet49.isEmpty();
        boolean boolean55 = strSet49.add("");
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet49, filteringMode56);
        boolean boolean58 = localDateTime28.equals((java.lang.Object) languageRangeList30);
        boolean boolean59 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime28);
        java.lang.String str61 = fixedDateTimeZone4.getNameKey(4800245754926L);
        int int63 = fixedDateTimeZone4.getOffsetFromLocal((long) 736);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plusMillis(0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime65.minuteOfHour();
        boolean boolean74 = property72.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime75 = property72.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.year();
        org.joda.time.LocalDateTime localDateTime80 = property78.addWrapFieldToCopy(529);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale82);
        int int84 = property78.getMaximumTextLength(locale82);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str86 = fixedDateTimeZone4.getShortName(4800245736614L, locale82);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian" + "'", str61, "Italian");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 32 + "'", int63 == 32);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.032" + "'", str86, "+00:00:00.032");
    }

    @Test
    public void test16319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16319");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        java.lang.String str3 = property2.getAsString();
        java.lang.String[] strArray5 = java.util.TimeZone.getAvailableIDs(206);
        boolean boolean6 = property2.equals((java.lang.Object) strArray5);
        org.joda.time.LocalDateTime localDateTime8 = property2.addToCopy(300);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 29394991]");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "6" + "'", str3, "6");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test16320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16320");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap17);
        boolean boolean19 = fixedDateTimeZone5.equals((java.lang.Object) strMap17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        boolean boolean37 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        int int38 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withYearOfCentury((int) (short) 0);
        boolean boolean41 = fixedDateTimeZone5.equals((java.lang.Object) (short) 0);
        long long43 = fixedDateTimeZone5.previousTransition(4800245784696L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) 4800245761520L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        java.lang.String str46 = fixedDateTimeZone5.getNameKey(4800245867328L);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4800245784696L + "'", long43 == 4800245784696L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str46, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test16321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16321");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMillis((int) (byte) 10);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = localDateTime4.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime4.minusHours(58);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        int int37 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusDays(32);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.minusSeconds(841);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime46.withWeekOfWeekyear(44);
        int int56 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test16322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16322");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(272);
        long long5 = dateTimeZone1.convertLocalToUTC(3576983587L, false, (long) 72);
        java.lang.String str7 = dateTimeZone1.getShortName(26187L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3576983315L + "'", long5 == 3576983315L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.272" + "'", str7, "+00:00:00.272");
    }

    @Test
    public void test16323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16323");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        org.joda.time.LocalDateTime localDateTime18 = property7.setCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = property7.roundHalfEvenCopy();
        int int20 = property7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property44.getDifference(readableInstant45);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        int int52 = property44.getMaximumTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime54 = property44.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        long long57 = dateTime56.getMillis();
        int int58 = property28.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime60 = property28.setCopy(100);
        org.joda.time.LocalDateTime localDateTime61 = property28.roundHalfCeilingCopy();
        java.util.Locale locale66 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str68 = localDateTime61.toString("12", locale66);
        java.lang.String str69 = locale66.getDisplayVariant();
        java.lang.String str70 = property7.getAsShortText(locale66);
        org.joda.time.LocalDateTime localDateTime72 = property7.addWrapFieldToCopy(463);
        org.joda.time.LocalDateTime localDateTime73 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4800246295062L + "'", long57 == 4800246295062L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "12" + "'", str68, "12");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022" + "'", str70, "2022");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test16324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16324");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.secondOfMinute();
        int[] intArray36 = localDateTime34.getValues();
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2013, 10, 11, 29395097]");
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test16325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16325");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(940, 64, 473, 8, 267, 845, 552);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 267 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16326");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:40:29.269");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:40:29.269");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16327");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(15);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        java.util.Date date8 = localDateTime6.toDate();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime6.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        int int12 = localDateTime11.getYearOfCentury();
        int int13 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(1);
        java.lang.String str20 = localDateTime16.toString("2022");
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withWeekyear(5735993);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusWeeks(97);
        boolean boolean30 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        java.util.Date date51 = localDateTime48.toDate();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMillisOfSecond(9);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        boolean boolean55 = localDateTime6.equals((java.lang.Object) localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 08:09:55 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 139 + "'", int13 == 139);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Wed Feb 11 08:09:55 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test16328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16328");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundCeilingCopy();
        org.joda.time.DurationField durationField9 = property6.getDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2" + "'", str7, "2");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16329");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = null;
        java.lang.String str5 = nameProvider0.getShortName(locale2, "2122-02-11T09:37:28.053Z", "2022-02-11T09:40:05.969");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test16330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16330");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("zh");
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder10 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test16331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16331");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        int int21 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.era();
        org.joda.time.LocalDateTime localDateTime24 = property22.addWrapFieldToCopy(1144800000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test16332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16332");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale10.getDisplayName();
        java.lang.String str14 = dateTimeZone1.getName(4800245932407L, locale10);
        java.lang.Object obj15 = locale10.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-5700000) + "'", int3 == (-5700000));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:35" + "'", str5, "-01:35");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u671d\u9c9c\u6587" + "'", str12, "\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str13, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:35" + "'", str14, "-01:35");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "ko_KR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "ko_KR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "ko_KR");
    }

    @Test
    public void test16333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16333");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguage("2122-02-11T08:00:16.405-01:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2122-02-11T08:00:16.405-01:35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test16334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16334");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = property7.getLocalDateTime();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        int int37 = property7.getMaximumTextLength(locale35);
        java.lang.String str38 = property7.getName();
        org.joda.time.LocalDateTime localDateTime40 = property7.addToCopy(34781606);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u5fb7\u6587" + "'", str36, "\u5fb7\u6587");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "yearOfEra" + "'", str38, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test16335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16335");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.getID();
        boolean boolean18 = fixedDateTimeZone11.isFixed();
        boolean boolean20 = fixedDateTimeZone11.isStandardOffset(34588805L);
        long long22 = fixedDateTimeZone11.previousTransition((long) 799);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 799L + "'", long22 == 799L);
    }

    @Test
    public void test16336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16336");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        int int23 = property10.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy("35");
        int int36 = property32.getLeapAmount();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        int int38 = property32.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale22.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.lang.String str55 = property54.getAsShortText();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime58 = property54.setCopy("35", locale57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale57.getDisplayVariant(locale59);
        java.lang.String str62 = locale44.getDisplayScript(locale57);
        java.util.Locale.setDefault(category0, locale44);
        java.util.Locale locale67 = new java.util.Locale("2122-02-11T08:00:17.784-01:35", "11", "2122-02-11T08:00:14.774-01:35");
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("UTC");
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale67.getDisplayName(locale69);
        java.util.Locale.setDefault(category0, locale69);
        java.util.Locale locale73 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale67.toString(), "2122-02-11t08:00:17.784-01:35_11_2122-02-11T08:00:14.774-01:35");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "utc" + "'", str70, "utc");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2122-02-11t08:00:17.784-01:35 (11,2122-02-11T08:00:14.774-01:35)" + "'", str71, "2122-02-11t08:00:17.784-01:35 (11,2122-02-11T08:00:14.774-01:35)");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "utc");
    }

    @Test
    public void test16337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16337");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.minus(readablePeriod61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfDay(593);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246295333L + "'", long55 == 4800246295333L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test16338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16338");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        long long37 = dateTime36.getMillis();
        int int38 = property8.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = property8.setCopy(100);
        org.joda.time.LocalDateTime localDateTime41 = property8.roundHalfCeilingCopy();
        java.util.Date date42 = localDateTime41.toDate();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType48 = null;
        boolean boolean49 = localDateTime47.isSupported(durationFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        int int59 = localDateTime58.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readableDuration61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.weekyear();
        org.joda.time.Chronology chronology68 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime47, chronology68);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(4800245729644L, chronology68);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime43, chronology68);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(3577009940L, chronology68);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4800246295364L + "'", long37 == 4800246295364L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test16339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16339");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        int int21 = localDateTime17.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYearOfCentury(392);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 392 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2122 + "'", int21 == 2122);
    }

    @Test
    public void test16340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16340");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.toString();
        boolean boolean18 = fixedDateTimeZone11.isFixed();
        java.util.TimeZone timeZone19 = fixedDateTimeZone11.toTimeZone();
        boolean boolean20 = fixedDateTimeZone11.isFixed();
        int int22 = fixedDateTimeZone11.getOffset(4800245888059L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
    }

    @Test
    public void test16341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMonths(839);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime49.isBefore(readableInstant68);
        boolean boolean71 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Instant instant72 = dateTime49.toInstant();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.plusMillis(0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.yearOfEra();
        org.joda.time.ReadableInstant readableInstant81 = null;
        int int82 = property80.getDifference(readableInstant81);
        org.joda.time.LocalDateTime localDateTime83 = property80.withMaximumValue();
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.era();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.plus(readablePeriod85);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str90 = dateTimeZone89.toString();
        org.joda.time.DateTime dateTime91 = localDateTime83.toDateTime(dateTimeZone89);
        int int92 = instant72.compareTo((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.Chronology chronology93 = dateTime91.getChronology();
        org.joda.time.DateTime dateTime94 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime1.withMillisOfDay(34599418);
        int int97 = localDateTime96.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int99 = localDateTime96.getValue(289);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 289");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 433 + "'", int3 == 433);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T08:09:55.433-01:35" + "'", str29, "2122-02-11T08:09:55.433-01:35");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "-01:35" + "'", str90, "-01:35");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 9 + "'", int97 == 9);
    }

    @Test
    public void test16342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16342");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withCenturyOfEra((int) '#');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, 656);
        int int27 = localDateTime26.getEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusHours(619);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime26.getFields();
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusYears(249);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test16343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16343");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        java.lang.String str28 = property27.getAsShortText();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime31 = property27.setCopy("35", locale30);
        org.joda.time.LocalDateTime localDateTime32 = property27.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property27.roundHalfFloorCopy();
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.weekOfWeekyear();
        boolean boolean36 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime33);
        int int38 = fixedDateTimeZone4.getStandardOffset(3576967455L);
        java.lang.String str39 = fixedDateTimeZone4.toString();
        int int41 = fixedDateTimeZone4.getOffset(4800245737822L);
        int int43 = fixedDateTimeZone4.getStandardOffset(30621L);
        int int45 = fixedDateTimeZone4.getOffset(97L);
        java.util.TimeZone timeZone46 = fixedDateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "italiano" + "'", str39, "italiano");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test16344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16344");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = fixedDateTimeZone4.getShortName(4800245725694L, locale6);
        long long9 = fixedDateTimeZone4.nextTransition(4800245748782L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.lang.String str11 = fixedDateTimeZone4.getID();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.011" + "'", str7, "+00:00:00.011");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4800245748782L + "'", long9 == 4800245748782L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
    }

    @Test
    public void test16345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16345");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        int int10 = fixedDateTimeZone4.getStandardOffset(4800245725694L);
        java.lang.String str12 = fixedDateTimeZone4.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.setCopy(53);
        boolean boolean28 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.dayOfMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        int int32 = localDateTime31.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds(566);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        int int40 = localDateTime35.getWeekOfWeekyear();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
    }

    @Test
    public void test16346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16346");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMinutes(386);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMillis(432);
        boolean boolean24 = localDateTime17.equals((java.lang.Object) 466);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16347");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(100);
        int int3 = localDateTime0.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 559 + "'", int3 == 559);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test16348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16348");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        int int14 = localDateTime13.getSecondOfMinute();
        int[] intArray15 = localDateTime13.getValues();
        java.lang.String str16 = localDateTime13.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 55 + "'", int14 == 55);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 29395571]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T08:09:55.571" + "'", str16, "2022-02-11T08:09:55.571");
    }

    @Test
    public void test16349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16349");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale.Builder builder16 = builder12.setLanguageTag("zh");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = fixedDateTimeZone4.getShortName(4800245729932L, locale17);
        long long20 = fixedDateTimeZone4.nextTransition(4800245708295L);
        int int22 = fixedDateTimeZone4.getStandardOffset(4800245744866L);
        long long25 = fixedDateTimeZone4.convertLocalToUTC(4800245758629L, false);
        long long28 = fixedDateTimeZone4.convertLocalToUTC(34563469L, true);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        java.lang.String str51 = dateTimeZone49.getNameKey((-3155679300L));
        int int53 = dateTimeZone49.getStandardOffset(4800245735513L);
        boolean boolean54 = fixedDateTimeZone4.equals((java.lang.Object) int53);
        int int56 = fixedDateTimeZone4.getOffsetFromLocal(4800246232684L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245708295L + "'", long20 == 4800245708295L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4800245758597L + "'", long25 == 4800245758597L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 34563437L + "'", long28 == 34563437L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-5700000) + "'", int53 == (-5700000));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
    }

    @Test
    public void test16350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16350");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusYears(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours(22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(0);
        boolean boolean25 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test16351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16351");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime10.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime10.weekOfWeekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int26 = fixedDateTimeZone24.getStandardOffset((long) 529);
        java.lang.String str28 = fixedDateTimeZone24.getNameKey(4800245719443L);
        org.joda.time.DateTime dateTime29 = localDateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        java.util.TimeZone timeZone30 = fixedDateTimeZone24.toTimeZone();
        java.lang.String str32 = fixedDateTimeZone24.getShortName(4800245817448L);
        long long34 = fixedDateTimeZone24.previousTransition(4800245894468L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:35" + "'", str17, "-01:35");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italian" + "'", str28, "Italian");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.032" + "'", str32, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4800245894468L + "'", long34 == 4800245894468L);
    }

    @Test
    public void test16352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16352");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getCountry();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = property28.getAsText(locale31);
        java.lang.String str33 = property20.getAsShortText(locale31);
        java.lang.String str34 = locale0.getDisplayScript(locale31);
        java.lang.String str35 = locale31.getDisplayName();
        java.util.Locale locale36 = locale31.stripExtensions();
        java.util.Locale.setDefault(locale31);
        java.lang.String str38 = locale31.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "55" + "'", str33, "55");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French (Canada)" + "'", str35, "French (Canada)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr_CA" + "'", str38, "fr_CA");
    }

    @Test
    public void test16353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16353");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int11 = localDateTime10.getDayOfYear();
        boolean boolean12 = dateTimeZone4.equals((java.lang.Object) int11);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale55);
        java.lang.String str57 = dateTimeZone4.getShortName((long) 16, locale55);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder59 = builder3.clearExtensions();
        java.util.Locale.Builder builder60 = builder3.clearExtensions();
        java.util.Locale.Builder builder62 = builder60.addUnicodeLocaleAttribute("friday");
        java.util.Locale.Builder builder64 = builder60.addUnicodeLocaleAttribute("35021077");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9" + "'", str47, "9");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-01:35" + "'", str57, "-01:35");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test16354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(386);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(12);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(3220);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears(362);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfYear();
        int int17 = property16.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 687 + "'", int3 == 687);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 366 + "'", int17 == 366);
    }

    @Test
    public void test16355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16355");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = property8.getAsText(locale12);
        org.joda.time.LocalDateTime localDateTime15 = property8.roundCeilingCopy();
        int int16 = property8.getMaximumValueOverall();
        java.lang.String str17 = property8.getAsShortText();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category18, locale19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = dateTimeZone23.getShortName(10L, locale26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("hi!");
        int int49 = property36.getMaximumShortTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        int int56 = localDateTime55.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.minuteOfHour();
        java.lang.String str59 = property58.getAsShortText();
        org.joda.time.LocalDateTime localDateTime61 = property58.setCopy("35");
        int int62 = property58.getLeapAmount();
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        int int64 = property58.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale48.getDisplayLanguage(locale63);
        java.util.Locale locale66 = locale63.stripExtensions();
        java.lang.String str67 = locale63.toLanguageTag();
        java.lang.String str68 = locale26.getDisplayLanguage(locale63);
        java.lang.String str70 = locale63.getExtension('u');
        boolean boolean71 = locale63.hasExtensions();
        java.util.Locale.setDefault(category18, locale63);
        java.util.Locale locale73 = java.util.Locale.getDefault(category18);
        int int74 = property8.getMaximumTextLength(locale73);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japanese (Japan)" + "'", str13, "Japanese (Japan)");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:35" + "'", str28, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test16356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16356");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str5 = fixedDateTimeZone4.toString();
        long long7 = fixedDateTimeZone4.previousTransition(0L);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        long long10 = fixedDateTimeZone4.nextTransition(4800245747102L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        long long14 = fixedDateTimeZone4.convertLocalToUTC(4800245798000L, true);
        long long16 = fixedDateTimeZone4.nextTransition((long) 34);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str5, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245747102L + "'", long10 == 4800245747102L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4800245797968L + "'", long14 == 4800245797968L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 34L + "'", long16 == 34L);
    }

    @Test
    public void test16357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16357");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ko_2122-02-11T09:35:28.534Z");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test16358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16358");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusHours(9);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime30 = localDateTime29.toDateTime();
        long long31 = dateTime30.getMillis();
        int int32 = property13.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644486295756L + "'", long31 == 1644486295756L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
    }

    @Test
    public void test16359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16359");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusMillis(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = property45.getDifference(readableInstant46);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        int int53 = property45.getMaximumTextLength(locale51);
        org.joda.time.LocalDateTime localDateTime55 = property45.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = dateTimeZone58.getShortName((-3155679300L), locale60);
        int int62 = property7.getMaximumShortTextLength(locale60);
        java.lang.String str63 = locale60.getScript();
        java.util.Set<java.lang.String> strSet64 = locale60.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246295777L + "'", long36 == 4800246295777L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-01:35" + "'", str61, "-01:35");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test16360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16360");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.weekyear();
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.year();
        int int52 = localDateTime50.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localDateTime53.getFieldTypes();
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property57.getFieldType();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.withField(dateTimeFieldType58, 13);
        int int61 = localDateTime49.get(dateTimeFieldType58);
        int int62 = localDateTime28.get(dateTimeFieldType58);
        org.joda.time.DurationFieldType durationFieldType63 = null;
        boolean boolean64 = localDateTime28.isSupported(durationFieldType63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime28.plusWeeks(500);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime28.plusHours(34865974);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 55 + "'", int52 == 55);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test16361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16361");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(755);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withSecondOfMinute((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra(213);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusHours(35007340);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test16362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16362");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        int int16 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime19.minuteOfHour();
        boolean boolean28 = property26.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.year();
        org.joda.time.LocalDateTime localDateTime34 = property32.addWrapFieldToCopy(529);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale36);
        int int38 = property32.getMaximumTextLength(locale36);
        java.util.Locale locale39 = java.util.Locale.US;
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale36.getDisplayScript(locale39);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder44.setExtension('x', "Italian");
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder50 = builder44.setLocale(locale49);
        java.util.Locale locale51 = builder44.build();
        java.util.Locale.Builder builder52 = builder44.clearExtensions();
        java.util.Locale.Builder builder53 = builder44.clear();
        java.util.Locale locale54 = builder53.build();
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str57 = locale54.getDisplayScript(locale56);
        java.lang.String str58 = locale36.getDisplayScript(locale56);
        java.lang.String str59 = locale56.getDisplayScript();
        java.lang.String str60 = property7.getAsText(locale56);
        org.joda.time.LocalDateTime localDateTime62 = property7.addWrapFieldToCopy(249);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks(912);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test16363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16363");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        boolean boolean3 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        int int19 = property11.getMaximumTextLength(locale17);
        org.joda.time.LocalDateTime localDateTime21 = property11.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        long long24 = dateTime23.getMillis();
        int int25 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime23);
        long long28 = dateTimeZone0.adjustOffset(0L, false);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int35 = fixedDateTimeZone33.getStandardOffset((long) 529);
        long long39 = fixedDateTimeZone33.convertLocalToUTC((long) (-1), false, (long) 100);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = property47.getDifference(readableInstant48);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        int int55 = property47.getMaximumTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime57 = property47.addToCopy((int) (byte) 100);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("hi!");
        int int60 = property47.getMaximumShortTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime62 = property47.addToCopy((int) (byte) 100);
        int int63 = property47.get();
        boolean boolean64 = fixedDateTimeZone33.equals((java.lang.Object) int63);
        int int66 = fixedDateTimeZone33.getStandardOffset(543L);
        long long68 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone33, (long) (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800246295885L + "'", long24 == 4800246295885L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-33L) + "'", long39 == (-33L));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-292275086L) + "'", long68 == (-292275086L));
    }

    @Test
    public void test16364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16364");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        java.lang.String str25 = fixedDateTimeZone18.getShortName(4800246128278L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        java.lang.String str27 = fixedDateTimeZone18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-31L) + "'", long22 == (-31L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.032" + "'", str25, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str27, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test16365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16365");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:38:05.778Z");
        timeZone1.setID("ko");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        java.lang.String str11 = property8.getAsText();
        int int12 = property8.getMinimumValueOverall();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale.Builder builder17 = builder13.setLanguageTag("zh");
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        int int21 = property8.getMaximumTextLength(locale20);
        java.lang.String str22 = locale20.getLanguage();
        java.lang.String str23 = timeZone1.getDisplayName(locale20);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT+00:00" + "'", str23, "GMT+00:00");
    }

    @Test
    public void test16366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16366");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.lang.String str18 = nameProvider0.getShortName(locale12, "und", "2122-02-11T09:35:41.308Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getScript();
        java.lang.String str23 = locale21.getCountry();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.lang.String str25 = locale21.getLanguage();
        java.lang.String str28 = nameProvider0.getShortName(locale21, "2122-02-11T09:36:12.116Z", "utc");
        java.lang.String str29 = locale21.getDisplayCountry();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.lang.String str35 = locale21.getDisplayCountry(locale31);
        java.lang.String str36 = locale31.getDisplayCountry();
        java.lang.String str38 = locale31.getUnicodeLocaleType("52");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutschland" + "'", str34, "Deutschland");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Deutschland" + "'", str36, "Deutschland");
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test16367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        int int41 = localDateTime40.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusYears(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime50.getFieldTypes();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        boolean boolean56 = dateTime49.isSupported(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime34.property(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime34.minusWeeks(504);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = localDateTime34.withWeekOfWeekyear(449);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 449 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test16368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16368");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        int int15 = timeZone13.getRawOffset();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("35");
        boolean boolean18 = timeZone13.hasSameRules(timeZone17);
        int int20 = timeZone13.getOffset(4800245859813L);
        java.util.TimeZone.setDefault(timeZone13);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = timeZone13.getDisplayName(locale22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT+00:00" + "'", str26, "GMT+00:00");
    }

    @Test
    public void test16369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16369");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusMinutes((-100));
        int int38 = localDateTime37.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusDays(0);
        boolean boolean41 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime11.dayOfMonth();
        java.lang.String str43 = property42.toString();
        org.joda.time.LocalDateTime localDateTime44 = property42.getLocalDateTime();
        int int45 = localDateTime44.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusHours(28870402);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy(35076474);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[dayOfMonth]" + "'", str43, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test16370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16370");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property7.roundHalfEvenCopy();
        java.lang.String str23 = property7.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
    }

    @Test
    public void test16371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16371");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long21 = fixedDateTimeZone19.previousTransition((long) 9);
        boolean boolean23 = fixedDateTimeZone19.isStandardOffset(4800245710661L);
        long long25 = fixedDateTimeZone19.nextTransition(2022L);
        java.util.TimeZone timeZone26 = fixedDateTimeZone19.toTimeZone();
        int int28 = fixedDateTimeZone19.getStandardOffset(4800245732199L);
        java.util.TimeZone timeZone29 = fixedDateTimeZone19.toTimeZone();
        boolean boolean30 = timeZone13.hasSameRules(timeZone29);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId31 = timeZone13.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2122-02-11T09:35:07.818Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9L + "'", long21 == 9L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2022L + "'", long25 == 2022L);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test16372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16372");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str4 = locale3.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        java.lang.String str14 = property13.getAsShortText();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime17 = property13.setCopy("35", locale16);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = locale16.getDisplayVariant(locale18);
        java.lang.String str21 = locale3.getDisplayScript(locale16);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str26 = nameProvider22.getName(locale23, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale30 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str33 = nameProvider22.getShortName(locale30, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale30.getDisplayLanguage(locale34);
        java.util.Locale locale36 = locale30.stripExtensions();
        java.util.Set<java.lang.String> strSet37 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale3.getDisplayCountry(locale30);
        java.lang.String str39 = locale30.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "44" + "'", str14, "44");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals(locale30.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str35, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "HI!" + "'", str38, "HI!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str39, "2122-02-11t09:35:07.818z");
    }

    @Test
    public void test16373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16373");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 'a');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        boolean boolean21 = localDateTime1.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.minusSeconds(881);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.plusSeconds(2021);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test16374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16374");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale1);
        java.lang.String str4 = locale1.getExtension('x');
        java.util.Locale.setDefault(locale1);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder10 = builder6.setLanguageTag("zh");
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder13 = builder10.setLocale(locale12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getCountry();
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale17.getDisplayName();
        java.util.Locale.Builder builder21 = builder13.setLocale(locale17);
        java.util.Locale locale22 = builder13.build();
        java.lang.String str23 = locale22.getVariant();
        java.lang.String str24 = locale1.getDisplayName(locale22);
        java.util.Locale locale25 = locale1.stripExtensions();
        java.lang.String str26 = locale25.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test16375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16375");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.previousTransition(4800245735513L);
        boolean boolean13 = fixedDateTimeZone4.equals((java.lang.Object) 292278993);
        java.lang.String str15 = fixedDateTimeZone4.getName((long) 589);
        int int17 = fixedDateTimeZone4.getStandardOffset(4800245714925L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = fixedDateTimeZone4.getShortName(4800246030706L, locale20);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735513L + "'", long11 == 4800245735513L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.006" + "'", str15, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.006" + "'", str21, "+00:00:00.006");
    }

    @Test
    public void test16376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16376");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:35:08.397Z", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:35:08.397z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16377");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        long long10 = fixedDateTimeZone4.convertUTCToLocal((long) 442);
        int int12 = fixedDateTimeZone4.getOffset((long) 724);
        long long14 = fixedDateTimeZone4.nextTransition((long) 65);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 474L + "'", long10 == 474L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 65L + "'", long14 == 65L);
    }

    @Test
    public void test16378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16378");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.TimeZone[] timeZoneArray3 = new java.util.TimeZone[] {};
        java.util.TimeZone[] timeZoneArray4 = strSet2.toArray(timeZoneArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("coreano", strMap6);
        boolean boolean8 = strSet2.contains((java.lang.Object) strMap6);
        java.lang.Object obj9 = null;
        boolean boolean10 = strSet2.remove(obj9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = strSet2.add("0022-02-11T09:44:22.753");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(timeZoneArray3);
        org.junit.Assert.assertNotNull(timeZoneArray4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test16379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16379");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        int int19 = localDateTime17.getMonthOfYear();
        int int20 = localDateTime17.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2122 + "'", int20 == 2122);
    }

    @Test
    public void test16380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale4 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        boolean boolean7 = strSet5.equals((java.lang.Object) locale6);
        java.util.Locale.Builder builder8 = builder0.setLocale(locale6);
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "Italian");
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale locale17 = builder10.build();
        java.util.Locale.Builder builder18 = builder10.clearExtensions();
        java.util.Locale.Builder builder19 = builder10.clear();
        java.util.Locale.Builder builder20 = builder10.clear();
        java.util.Locale.Builder builder22 = builder10.setLanguage("ita");
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale.Builder builder25 = builder8.setLocale(locale23);
        java.util.Locale.Builder builder26 = builder25.clear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = property34.getAsText(locale37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        boolean boolean56 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        int int57 = localDateTime55.getYearOfEra();
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        boolean boolean59 = property34.equals((java.lang.Object) localDateTime55);
        org.joda.time.LocalDateTime localDateTime60 = property34.withMinimumValue();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone65 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = fixedDateTimeZone65.getShortName(4800245725694L, locale67);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        boolean boolean76 = strSet74.equals((java.lang.Object) locale75);
        java.util.Locale.Builder builder77 = builder69.setLocale(locale75);
        java.lang.String str78 = locale67.getDisplayCountry(locale75);
        java.lang.String str79 = property34.getAsShortText(locale67);
        java.util.Locale.Builder builder80 = builder25.setLocale(locale67);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ita" + "'", str24, "ita");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.011" + "'", str68, "+00:00:00.011");
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test16381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16381");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withWeekyear(35);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plusMillis(200);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test16382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16382");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        java.lang.String str24 = locale18.getCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DE" + "'", str24, "DE");
    }

    @Test
    public void test16383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16383");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMonths(292278993);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withYearOfCentury(20);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 421);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean29 = dateTimeZone28.isFixed();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = dateTimeZone28.getShortName(10L, locale31);
        int int34 = dateTimeZone28.getStandardOffset(4800245724023L);
        java.lang.String str36 = dateTimeZone28.getNameKey(4800245713056L);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int[] intArray38 = localDateTime37.getValues();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.weekOfWeekyear();
        boolean boolean40 = dateTimeZone28.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withCenturyOfEra(263);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.withPeriodAdded(readablePeriod43, 876608);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        boolean boolean47 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 11, 35096260]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test16384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16384");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.era();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        int int48 = property46.get();
        int int49 = property46.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246296289L + "'", long36 == 4800246296289L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test16385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16385");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("+00:00:00.009");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("Feb");
        java.util.Set<java.lang.String> strSet9 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("2122-02-11T09:37:12.848Z");
        org.joda.time.DateTimeZone dateTimeZone13 = provider0.getZone("2122-02-11T09:38:37.915Z");
        java.util.Set<java.lang.String> strSet14 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test16386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16386");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder12 = builder8.setLanguageTag("zh");
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder15 = builder12.setLocale(locale14);
        java.util.Locale locale16 = builder12.build();
        java.util.Locale.Builder builder17 = builder4.setLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder4.addUnicodeLocaleAttribute("5313-01-24T06:39:37.862");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 5313-01-24T06:39:37.862 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test16387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16387");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        java.util.TimeZone.setDefault(timeZone0);
        int int4 = timeZone0.getOffset((long) 2032);
        int int6 = timeZone0.getOffset(4800245976348L);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test16388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16388");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes(150);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMinutes(362);
        org.joda.time.DurationFieldType durationFieldType43 = null;
        boolean boolean44 = localDateTime42.isSupported(durationFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = localDateTime42.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusMonths(44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        int int62 = localDateTime61.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withFields((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readableDuration64);
        boolean boolean66 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.plusMinutes((-100));
        int int70 = localDateTime69.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.minusDays(0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.minusHours(532);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays(52);
        boolean boolean77 = localDateTime48.equals((java.lang.Object) localDateTime74);
        boolean boolean78 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test16389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16389");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYear(1656000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1656000000 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test16390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16390");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        int int91 = localDateTime88.getDayOfYear();
        org.joda.time.LocalDateTime.Property property92 = localDateTime88.monthOfYear();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime88.minusDays(2122);
        org.joda.time.LocalDateTime.Property property95 = localDateTime94.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = localDateTime94.withYearOfCentury(607);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 607 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:44:56.406Z" + "'", str20, "2122-02-11T09:44:56.406Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 42 + "'", int91 == 42);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test16391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16391");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        int int15 = localDateTime14.getMonthOfYear();
        int int16 = localDateTime14.getMinuteOfHour();
        int int17 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withYearOfEra(34711810);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfMonth(665);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 665 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 45 + "'", int16 == 45);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test16392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2122-02-11T09:35:10.043Z");
        java.util.Locale.Builder builder13 = builder9.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("2122-02-11T08:00:12.990-01:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2122-02-11T08:00:12.990-01:35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test16393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = builder0.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder13 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setScript("2122-02-11T09:38:05.330Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T09:38:05.330Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test16394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16394");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        int int41 = localDateTime40.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMillis(0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property58.getDifference(readableInstant59);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property58.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime68 = property58.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        java.lang.String str71 = dateTime70.toString();
        java.lang.String str72 = dateTime70.toString();
        int int73 = property50.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalDateTime localDateTime75 = property50.addToCopy(230);
        org.joda.time.LocalDateTime localDateTime76 = property50.roundHalfEvenCopy();
        int int77 = property50.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246296463L + "'", long36 == 4800246296463L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2122-02-11T09:44:56.463Z" + "'", str71, "2122-02-11T09:44:56.463Z");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2122-02-11T09:44:56.463Z" + "'", str72, "2122-02-11T09:44:56.463Z");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-100) + "'", int73 == (-100));
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test16395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes(272);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(12);
        int int9 = localDateTime6.getWeekOfWeekyear();
        int int10 = localDateTime6.getMinuteOfHour();
        int int11 = localDateTime6.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withWeekOfWeekyear(138);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 138 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16330001 + "'", int11 == 16330001);
    }

    @Test
    public void test16396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16396");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("zh");
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder10 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setUnicodeLocaleKeyword("2113-08-16T08:05:23.808", "2122-02-11T09:36:48.970");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2113-08-16T08:05:23.808 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test16397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16397");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        int int8 = localDateTime4.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfDay(6);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime24.getDayOfWeek();
        int int26 = localDateTime24.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minus(readablePeriod27);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 35096511]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 511 + "'", int8 == 511);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test16398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16398");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        java.lang.String str6 = dateTimeZone0.getName((long) 34520736, locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        boolean boolean9 = strSet7.equals((java.lang.Object) 4800245784583L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16399");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        int int22 = property9.getMaximumShortTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.String str32 = property31.getAsShortText();
        org.joda.time.LocalDateTime localDateTime34 = property31.setCopy("35");
        int int35 = property31.getLeapAmount();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        int int37 = property31.getMaximumShortTextLength(locale36);
        java.lang.String str38 = locale21.getDisplayLanguage(locale36);
        java.util.Locale locale39 = locale36.stripExtensions();
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale39.getLanguage();
        java.lang.String str44 = nameProvider0.getName(locale39, "2022-02-11T08:06:00.809", "+420:00");
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clearExtensions();
        java.util.Locale.Builder builder47 = builder45.clear();
        java.util.Locale.Builder builder49 = builder45.setLanguageTag("zh");
        java.util.Locale locale50 = builder45.build();
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str54 = nameProvider0.getName(locale50, "", "2122-02-11T09:37:46.844Z");
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder55.setExtension('x', "Italian");
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder61 = builder55.setLocale(locale60);
        java.util.Locale locale62 = builder55.build();
        java.util.Locale.Builder builder63 = builder55.clear();
        java.util.Locale locale64 = builder55.build();
        java.lang.String str67 = nameProvider0.getName(locale64, "2122-02-11T09:43:12.771+00:00:00.032", "2122-02-11T09:42:55.536Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "44" + "'", str32, "44");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str40, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587" + "'", str51, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test16400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16400");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        java.lang.String str7 = timeZone6.getID();
        timeZone6.setRawOffset(34711372);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT-01:35" + "'", str7, "GMT-01:35");
    }

    @Test
    public void test16401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16401");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean24 = strSet20.isEmpty();
        boolean boolean26 = strSet20.add("");
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet34.remove(obj36);
        boolean boolean38 = strSet34.isEmpty();
        java.lang.Object[] objArray39 = strSet34.toArray();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet34, filteringMode40);
        org.joda.time.tz.Provider provider42 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider42);
        java.util.Set<java.lang.String> strSet44 = provider42.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet60);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.lang.Object obj67 = null;
        boolean boolean68 = strSet65.remove(obj67);
        boolean boolean69 = strSet65.isEmpty();
        boolean boolean71 = strSet65.add("");
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet65, filteringMode72);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet44, filteringMode72);
        org.joda.time.tz.Provider provider75 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet76 = provider75.getAvailableIDs();
        java.util.Set<java.lang.String> strSet77 = provider75.getAvailableIDs();
        java.util.Set<java.lang.String> strSet78 = provider75.getAvailableIDs();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet78);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[, hi!]");
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(provider75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test16402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16402");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test16403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16403");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str5 = locale4.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.String str15 = property14.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime18 = property14.setCopy("35", locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale17.getDisplayVariant(locale19);
        java.lang.String str22 = locale4.getDisplayScript(locale17);
        java.lang.String str25 = nameProvider0.getShortName(locale4, "2122-02-11T08:00:15.629", "hi! (HI!,hi!)");
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str30 = nameProvider0.getShortName(locale26, "", "2122-02-11T09:36:40.431Z");
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("2122-02-11T09:36:12.116Z");
        java.lang.String str33 = locale32.getScript();
        java.lang.String str36 = nameProvider0.getName(locale32, "2122-02-11T09:40:44.384Z", "2122-02-11T09:35:44.951Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "44" + "'", str15, "44");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "giapponese (Giappone)" + "'", str27, "giapponese (Giappone)");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test16404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16404");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        int int14 = localDateTime13.getCenturyOfEra();
        java.lang.String str15 = localDateTime13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDayOfYear(650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 650 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T00:44:56.713" + "'", str15, "2022-02-11T00:44:56.713");
    }

    @Test
    public void test16405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16405");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.setExtension('x', "2122-02-11T09:43:23.010+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:43:23.010+00:00:00.032 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test16406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16406");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusYears(529);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMonthOfYear(1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.era();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        java.lang.String str57 = property48.toString();
        org.joda.time.LocalDateTime localDateTime59 = property48.setCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusHours(22);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        int int80 = localDateTime79.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withFields((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minus(readableDuration82);
        boolean boolean84 = localDateTime73.isBefore((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime73.plusMillis((int) (byte) 10);
        boolean boolean87 = localDateTime66.isEqual((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime(chronology88);
        int int90 = localDateTime89.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property91 = localDateTime89.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property94 = localDateTime89.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property94.getFieldType();
        boolean boolean96 = localDateTime66.isSupported(dateTimeFieldType95);
        org.joda.time.LocalDateTime.Property property97 = localDateTime61.property(dateTimeFieldType95);
        int int98 = localDateTime37.indexOf(dateTimeFieldType95);
        int int99 = localDateTime37.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Property[yearOfEra]" + "'", str57, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 22 + "'", int90 == 22);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int99 + "' != '" + 56 + "'", int99 == 56);
    }

    @Test
    public void test16407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16407");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(100L);
        java.lang.String str14 = dateTimeZone10.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        java.lang.String str25 = property24.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime28 = property24.setCopy("35", locale27);
        org.joda.time.LocalDateTime localDateTime29 = property24.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekyear();
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.year();
        int int51 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.withField(dateTimeFieldType57, 13);
        int int60 = localDateTime48.get(dateTimeFieldType57);
        int int61 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.Chronology chronology62 = localDateTime48.getChronology();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime48.minus(readablePeriod63);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = localDateTime48.toString("+00:00:00.011", locale66);
        java.lang.String str68 = dateTimeZone10.getShortName((long) 524, locale66);
        java.util.TimeZone timeZone69 = dateTimeZone10.toTimeZone();
        java.lang.String str70 = timeZone69.getID();
        java.time.ZoneId zoneId71 = timeZone69.toZoneId();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone(zoneId71);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "44" + "'", str25, "44");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 56 + "'", int51 == 56);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.011" + "'", str67, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertNotNull(zoneId71);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test16408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16408");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale locale11 = builder0.build();
        java.util.Locale locale12 = builder0.build();
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale23 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str24 = locale18.getDisplayLanguage(locale23);
        java.lang.String str25 = locale18.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getScript();
        java.lang.String str28 = locale26.getCountry();
        java.util.Locale locale29 = locale26.stripExtensions();
        java.lang.String str30 = locale18.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet31 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder32 = builder14.setLocale(locale18);
        java.util.Locale.Builder builder33 = builder32.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale23.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test16409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16409");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours(22);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) ' ');
        int int24 = localDateTime23.getMillisOfSecond();
        int int25 = localDateTime23.getYear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plus(readablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = dateTimeZone30.getShortName(10L, locale33);
        long long38 = dateTimeZone30.adjustOffset((long) 10, false);
        java.lang.String str40 = dateTimeZone30.getNameKey(362L);
        org.joda.time.DateTime dateTime41 = localDateTime27.toDateTime(dateTimeZone30);
        long long42 = dateTime41.getMillis();
        long long43 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale46 = new java.util.Locale("", "2122-02-11T09:35:30.958Z");
        java.lang.String str47 = locale46.getDisplayCountry();
        int int48 = property9.getMaximumShortTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property9.addToCopy(34719059);
        int int51 = property9.getMinimumValue();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = property9.setCopy("italiano", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"italiano\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35096845 + "'", int8 == 35096845);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 845 + "'", int24 == 845);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3220 + "'", int25 == 3220);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:35" + "'", str35, "-01:35");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 39446997550845L + "'", long42 == 39446997550845L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1197L) + "'", long43 == (-1197L));
        org.junit.Assert.assertEquals(locale46.toString(), "_2122-02-11T09:35:30.958Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2122-02-11T09:35:30.958Z" + "'", str47, "2122-02-11T09:35:30.958Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-292275054) + "'", int51 == (-292275054));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "inglese" + "'", str55, "inglese");
        org.junit.Assert.assertNotNull(charSet56);
    }

    @Test
    public void test16410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16410");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.era();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        boolean boolean16 = property15.isLeap();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.minuteOfHour();
        boolean boolean26 = property24.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(10);
        java.lang.String str30 = localDateTime27.toString();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        java.lang.String str41 = property40.getAsShortText();
        org.joda.time.LocalDateTime localDateTime43 = property40.setCopy("35");
        int int44 = property40.getLeapAmount();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        int int46 = property40.getMaximumShortTextLength(locale45);
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        java.lang.String str49 = property40.getAsText(locale48);
        int int50 = property31.getMaximumShortTextLength(locale48);
        java.util.Locale locale51 = locale48.stripExtensions();
        boolean boolean52 = locale48.hasExtensions();
        java.util.Locale locale55 = new java.util.Locale("\u610f\u5927\u5229\u6587", "2122-02-11T09:35:07.696Z");
        java.util.Locale locale59 = new java.util.Locale("francese (Canada)", "Property[yearOfEra]", "ita");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("9");
        java.lang.String str63 = locale59.getDisplayCountry(locale62);
        java.lang.String str64 = locale55.getDisplayVariant(locale59);
        java.lang.String str65 = locale48.getDisplayVariant(locale55);
        java.lang.String str66 = property15.getAsText(locale48);
        org.joda.time.LocalDateTime localDateTime68 = property15.addWrapFieldToCopy(28870402);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:45:00.000" + "'", str30, "2022-02-11T09:45:00.000");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "44" + "'", str41, "44");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category47.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "44" + "'", str49, "44");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals(locale55.toString(), "\u610f\u5927\u5229\u6587_2122-02-11T09:35:07.696Z");
        org.junit.Assert.assertEquals(locale59.toString(), "francese (canada)_PROPERTY[YEAROFERA]_ita");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PROPERTY[YEAROFERA]" + "'", str63, "PROPERTY[YEAROFERA]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "868" + "'", str66, "868");
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test16411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16411");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        boolean boolean25 = localDateTime23.isSupported(durationFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = localDateTime23.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMonths(44);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readableDuration45);
        boolean boolean47 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusMinutes((-100));
        int int51 = localDateTime50.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusDays(0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusHours(532);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays(52);
        boolean boolean58 = localDateTime29.equals((java.lang.Object) localDateTime55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withHourOfDay(29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test16412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16412");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        boolean boolean7 = property6.isLeap();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test16413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16413");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfCentury((int) (short) 0);
        boolean boolean40 = fixedDateTimeZone4.equals((java.lang.Object) (short) 0);
        java.util.TimeZone timeZone41 = fixedDateTimeZone4.toTimeZone();
        java.util.TimeZone timeZone42 = fixedDateTimeZone4.toTimeZone();
        java.util.TimeZone.setDefault(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(42, (int) (short) 10);
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        boolean boolean48 = timeZone42.hasSameRules(timeZone47);
        int int50 = timeZone47.getOffset(3577267064L);
        timeZone47.setID("2122-02-11T09:44:39.818+00:00:00.032");
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test16414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16414");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        java.lang.String str16 = property13.getName();
        org.joda.time.LocalDateTime localDateTime18 = property13.addWrapFieldToCopy((-292275054));
        int int19 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusMonths(660);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 42 + "'", int19 == 42);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test16415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(42);
        int int13 = localDateTime9.getDayOfWeek();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime9.isSupported(durationFieldType14);
        java.lang.Object obj16 = null;
        boolean boolean17 = localDateTime9.equals(obj16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime9.millisOfDay();
        int int19 = localDateTime9.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 88 + "'", int19 == 88);
    }

    @Test
    public void test16416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16416");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 580);
    }

    @Test
    public void test16417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16417");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(34810930, 616, 234, 645, 620, 34724471, 98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 645 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16418");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.previousTransition((long) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        int int6 = localDateTime5.getYearOfCentury();
        java.lang.String str7 = localDateTime5.toString();
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        int int10 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(22);
        int int21 = localDateTime20.size();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        boolean boolean39 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusHours(9);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = localDateTime55.isSupported(dateTimeFieldType62);
        boolean boolean64 = localDateTime41.isSupported(dateTimeFieldType62);
        int int65 = localDateTime20.get(dateTimeFieldType62);
        int int66 = dateTime8.get(dateTimeFieldType62);
        org.joda.time.Chronology chronology67 = dateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:44:57.023" + "'", str7, "2022-02-11T09:44:57.023");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test16419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16419");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        long long12 = dateTimeZone1.previousTransition((long) 664);
        long long14 = dateTimeZone1.convertUTCToLocal(4800246265392L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 664L + "'", long12 == 664L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4800246265392L + "'", long14 == 4800246265392L);
    }

    @Test
    public void test16420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16420");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.yearOfCentury();
        java.lang.String str20 = property19.getAsShortText();
        boolean boolean21 = property19.isLeap();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusHours(9);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        boolean boolean64 = localDateTime56.isSupported(dateTimeFieldType63);
        int int65 = dateTime41.get(dateTimeFieldType63);
        int int66 = property19.compareTo((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = property19.getAsShortText(locale67);
        org.joda.time.DurationField durationField69 = property19.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime70 = property19.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withDayOfWeek(443);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 443 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22" + "'", str20, "22");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:44:57.076Z" + "'", str42, "2122-02-11T09:44:57.076Z");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "22" + "'", str68, "22");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test16421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16421");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(291, 432, 136, 501, 2370223, 34724471, 965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 501 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16422");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder8.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test16423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16423");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Locale.setDefault(locale37);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "44" + "'", str30, "44");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test16424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16424");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.year();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder49 = builder47.clear();
        java.util.Locale.Builder builder51 = builder47.setLanguageTag("zh");
        java.util.Locale locale52 = builder47.build();
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str61 = locale56.getDisplayVariant(locale60);
        java.lang.String str62 = locale52.getDisplayCountry(locale60);
        java.lang.String str63 = locale52.toLanguageTag();
        java.util.Locale.setDefault(category45, locale52);
        java.lang.String str65 = property44.getAsShortText(locale52);
        java.lang.Object obj66 = locale52.clone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246297128L + "'", long36 == 4800246297128L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh" + "'", str63, "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "zh");
    }

    @Test
    public void test16425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16425");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute(10);
        int[] intArray19 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withMillisOfDay(272);
        int int22 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.centuryOfEra();
        boolean boolean24 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.yearOfCentury();
        java.util.Locale locale27 = new java.util.Locale("2122-02-11T09:35:51.242Z");
        java.lang.String str28 = locale27.getDisplayLanguage();
        int int29 = property25.getMaximumShortTextLength(locale27);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 1, 10, 35097158]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 57 + "'", int22 == 57);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals(locale27.toString(), "2122-02-11t09:35:51.242z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11t09:35:51.242z" + "'", str28, "2122-02-11t09:35:51.242z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test16426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16426");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.lang.String str13 = locale10.getISO3Country();
        java.util.Locale locale15 = new java.util.Locale("");
        java.lang.String str16 = locale10.getDisplayCountry(locale15);
        java.util.Set<java.lang.Character> charSet17 = locale10.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test16427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16427");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test16428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        int int7 = localDateTime1.getDayOfYear();
        int int8 = localDateTime1.getEra();
        int int9 = localDateTime1.getYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusDays(35);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(287);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 217 + "'", int3 == 217);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test16429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16429");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        org.joda.time.DurationField durationField12 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfCeilingCopy();
        int int14 = property7.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test16430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16430");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        int int2 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears(35);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 35097245]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1987 + "'", int5 == 1987);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test16431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16431");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getOffset((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        org.joda.time.LocalDateTime localDateTime29 = property26.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMinutes(632);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test16432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int[] intArray7 = localDateTime6.getValues();
        int int8 = localDateTime6.getHourOfDay();
        boolean boolean9 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withYearOfCentury(851);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 11, 35097278]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test16433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16433");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withYearOfEra(263);
        int int20 = localDateTime19.getWeekyear();
        int int21 = localDateTime19.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 263 + "'", int20 == 263);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test16434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16434");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        java.util.Collection<java.util.Locale> localeCollection13 = null;
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection13);
        java.util.Collection<java.util.Locale> localeCollection15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection15);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
    }

    @Test
    public void test16435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16435");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        int int20 = localDateTime17.getDayOfYear();
        java.util.Date date21 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 11 09:44:58 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test16436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16436");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        long long4 = dateTimeZone0.nextTransition((long) 2022);
        java.lang.String str5 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(1L, false, (long) (byte) 100);
        int int11 = dateTimeZone0.getOffsetFromLocal(4800245759781L);
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = property21.getAsText(locale24);
        java.lang.String str28 = nameProvider13.getName(locale24, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder32 = builder30.clear();
        java.util.Locale.Builder builder34 = builder30.setLanguageTag("zh");
        java.util.Locale locale35 = builder30.build();
        java.lang.String str38 = nameProvider13.getShortName(locale35, "12", "2122-02-11T09:35:30.958Z");
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = dateTimeZone41.getShortName(10L, locale44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusMillis(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = property54.getDifference(readableInstant55);
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        int int62 = property54.getMaximumTextLength(locale60);
        org.joda.time.LocalDateTime localDateTime64 = property54.addToCopy((int) (byte) 100);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("hi!");
        int int67 = property54.getMaximumShortTextLength(locale66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        int int74 = localDateTime73.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.minuteOfHour();
        java.lang.String str77 = property76.getAsShortText();
        org.joda.time.LocalDateTime localDateTime79 = property76.setCopy("35");
        int int80 = property76.getLeapAmount();
        java.util.Locale locale81 = java.util.Locale.ITALIAN;
        int int82 = property76.getMaximumShortTextLength(locale81);
        java.lang.String str83 = locale66.getDisplayLanguage(locale81);
        java.util.Locale locale84 = locale81.stripExtensions();
        java.lang.String str85 = locale81.toLanguageTag();
        java.lang.String str86 = locale44.getDisplayLanguage(locale81);
        java.lang.String str89 = nameProvider13.getName(locale81, "2122-02-11T09:35:37.128Z", "2022-02-11T09:35:21.183");
        java.lang.String str90 = dateTimeZone0.getShortName(4800245747102L, locale81);
        java.lang.String str91 = locale81.getScript();
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale93 = locale81.stripExtensions();
        java.lang.String str94 = locale93.getCountry();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2022L + "'", long4 == 2022L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:35" + "'", str46, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "44" + "'", str77, "44");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "it" + "'", str85, "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "it");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test16437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16437");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime18 = property8.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = dateTimeZone20.getName((long) 292278993, locale22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone20);
        long long26 = dateTime25.getMillis();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(4800246063077L, chronology27);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4800246297391L + "'", long26 == 4800246297391L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test16438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16438");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 723, 362, 655, 979);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 655 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16439");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        int int4 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears(327);
        int int10 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
    }

    @Test
    public void test16440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16440");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        long long16 = fixedDateTimeZone4.nextTransition((long) 35048651);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35048651L + "'", long16 == 35048651L);
    }

    @Test
    public void test16441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16441");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getVariant();
        int int20 = property7.getMaximumShortTextLength(locale17);
        org.joda.time.LocalDateTime localDateTime21 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = property7.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(35036806);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35036806 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "italiano" + "'", str18, "italiano");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test16442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16442");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale15.toLanguageTag();
        int int18 = property14.getMaximumShortTextLength(locale15);
        int int19 = property14.getLeapAmount();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property14.getFieldType();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test16443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16443");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        int int5 = dateTimeZone0.getOffsetFromLocal((-5699999L));
        long long8 = dateTimeZone0.convertLocalToUTC((long) (-5700000), true);
        long long11 = dateTimeZone0.adjustOffset((long) 2122, false);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 292278993, false, 0L);
        long long17 = dateTimeZone0.nextTransition(0L);
        int int19 = dateTimeZone0.getOffset(3577088838L);
        java.lang.String str21 = dateTimeZone0.getNameKey((long) 929);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-5700000L) + "'", long8 == (-5700000L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2122L + "'", long11 == 2122L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 292278993L + "'", long15 == 292278993L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test16444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16444");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.previousTransition((long) 'u');
        long long14 = fixedDateTimeZone4.convertUTCToLocal((long) 6);
        long long16 = fixedDateTimeZone4.previousTransition(4800245842003L);
        long long18 = fixedDateTimeZone4.previousTransition(237L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 117L + "'", long12 == 117L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 38L + "'", long14 == 38L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4800245842003L + "'", long16 == 4800245842003L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 237L + "'", long18 == 237L);
    }

    @Test
    public void test16445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16445");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale5.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int int35 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.minuteOfHour();
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = property38.getAsShortText(locale42);
        java.lang.String str45 = locale13.getDisplayLanguage(locale42);
        java.util.Locale locale46 = locale42.stripExtensions();
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet48 = locale42.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "44" + "'", str44, "44");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test16446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16446");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusDays(263);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 362);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        boolean boolean43 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        boolean boolean52 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.year();
        int int55 = localDateTime53.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = localDateTime56.getFieldTypes();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withField(dateTimeFieldType61, 13);
        int int64 = localDateTime42.indexOf(dateTimeFieldType61);
        int int65 = localDateTime25.indexOf(dateTimeFieldType61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = localDateTime25.toString(dateTimeFormatter66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime25.plusMinutes(13);
        org.joda.time.LocalDateTime.Property property70 = localDateTime25.secondOfMinute();
        int int71 = localDateTime25.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime25.withYear(35027535);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 57 + "'", int55 == 57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2021-05-24T09:44:57.534" + "'", str67, "2021-05-24T09:44:57.534");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 57 + "'", int71 == 57);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test16447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16447");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = dateTimeZone19.getName((long) 292278993, locale21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone19);
        long long25 = dateTime24.getMillis();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        int int28 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsText();
        java.lang.String str32 = property30.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4800246297588L + "'", long25 == 4800246297588L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 588 + "'", int28 == 588);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
    }

    @Test
    public void test16448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16448");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusMillis(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        org.joda.time.ReadableInstant readableInstant71 = null;
        int int72 = property70.getDifference(readableInstant71);
        java.util.Locale locale76 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        int int78 = property70.getMaximumTextLength(locale76);
        org.joda.time.LocalDateTime localDateTime80 = property70.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(readableInstant81);
        boolean boolean83 = dateTime62.isBefore(readableInstant81);
        boolean boolean84 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime62);
        long long85 = dateTime62.getMillis();
        boolean boolean86 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology87 = dateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime88 = org.joda.time.LocalDateTime.now(chronology87);
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(chronology87);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:44:57.606Z" + "'", str42, "2122-02-11T09:44:57.606Z");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 4800246297606L + "'", long85 == 4800246297606L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test16449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16449");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        strSet4.clear();
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet4.spliterator();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test16450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16450");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:35:59.916Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.util.Locale locale7 = new java.util.Locale("2122-02-11T09:36:58.515+00:00:00.032", "2122-02-11T09:36:56.602Z", "2022-02-11T09:37:58.187Z");
        java.lang.String str8 = locale1.getDisplayScript(locale7);
        java.lang.String str10 = locale1.getExtension('u');
        java.util.Locale locale11 = locale1.stripExtensions();
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:35:59.916z");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2122-02-11t09:35:59.916z" + "'", str3, "2122-02-11t09:35:59.916z");
        org.junit.Assert.assertEquals(locale7.toString(), "2122-02-11t09:36:58.515+00:00:00.032_2122-02-11T09:36:56.602Z_2022-02-11T09:37:58.187Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "2122-02-11t09:35:59.916z");
    }

    @Test
    public void test16451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16451");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:41:11.894+00:00:00.070");
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:41:11.894+00:00:00.070");
    }

    @Test
    public void test16452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16452");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(235);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(1);
        java.lang.String str9 = localDateTime5.toString("2022");
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withSecondOfMinute(5);
        int int12 = localDateTime11.getEra();
        int int13 = localDateTime11.getYear();
        boolean boolean14 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.minuteOfHour();
        boolean boolean24 = property22.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        int[] intArray29 = localDateTime27.getValues();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readableDuration45);
        boolean boolean47 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str60 = property56.getAsText(locale59);
        java.lang.String str61 = property48.getAsShortText(locale59);
        java.lang.String str62 = property48.toString();
        java.lang.String str63 = property48.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property48.getFieldType();
        int int65 = localDateTime27.indexOf(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime2.property(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime2.plusMillis(34790680);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2022, 2, 11, 35068000]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "57" + "'", str61, "57");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Property[secondOfMinute]" + "'", str62, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "secondOfMinute" + "'", str63, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test16453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16453");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        long long8 = fixedDateTimeZone4.previousTransition(897L);
        java.lang.String str10 = fixedDateTimeZone4.getNameKey(4800245992858L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 897L + "'", long8 == 897L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str10, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test16454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16454");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("de");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("Italian");
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        strSet8.clear();
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale17 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.stream.Stream<java.util.Locale> localeStream22 = localeList21.stream();
        java.util.Locale locale23 = java.util.Locale.lookup(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale.LanguageRange languageRange25 = new java.util.Locale.LanguageRange("en");
        double double26 = languageRange25.getWeight();
        java.util.Locale.LanguageRange languageRange28 = new java.util.Locale.LanguageRange("en");
        double double29 = languageRange28.getWeight();
        double double30 = languageRange28.getWeight();
        double double31 = languageRange28.getWeight();
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("en");
        java.lang.String str34 = languageRange33.getRange();
        double double35 = languageRange33.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] { languageRange25, languageRange28, languageRange33 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, strMap41);
        org.joda.time.tz.Provider provider43 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider43);
        org.joda.time.DateTimeZone.setProvider(provider43);
        java.util.Set<java.lang.String> strSet46 = provider43.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor47 = strSet46.iterator();
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet46, filteringMode48);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList21, filteringMode48);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(localeStream22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(localeList50);
    }

    @Test
    public void test16455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16455");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 4800245758597L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.yearOfEra();
        int int7 = property6.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
    }

    @Test
    public void test16456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16456");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 838);
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy(91);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = dateTimeZone14.getShortName(10L, locale17);
        long long22 = dateTimeZone14.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusYears(0);
        boolean boolean36 = dateTimeZone23.isLocalDateTimeGap(localDateTime33);
        long long40 = dateTimeZone23.convertLocalToUTC((long) 1, true, 100L);
        long long42 = dateTimeZone14.getMillisKeepLocal(dateTimeZone23, 4800245711010L);
        long long44 = dateTimeZone23.previousTransition(34639851L);
        long long48 = dateTimeZone23.convertLocalToUTC((long) 131, false, 4800245870386L);
        org.joda.time.DateTime dateTime49 = localDateTime10.toDateTime(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-01:35" + "'", str19, "-01:35");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-5L) + "'", long40 == (-5L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 4800240011004L + "'", long42 == 4800240011004L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 34639851L + "'", long44 == 34639851L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 125L + "'", long48 == 125L);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test16457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(241);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(892);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test16458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16458");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMinutes(305);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.weekyear();
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime17.getFields();
        org.joda.time.Chronology chronology23 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 192);
        int int28 = localDateTime27.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 41 + "'", int28 == 41);
    }

    @Test
    public void test16459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16459");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        java.util.TimeZone timeZone11 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusHours(23);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap35);
        boolean boolean37 = fixedDateTimeZone23.equals((java.lang.Object) strMap35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime50 = property46.setCopy("35", locale49);
        org.joda.time.LocalDateTime localDateTime51 = property46.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime52 = property46.roundHalfFloorCopy();
        int int53 = localDateTime52.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.weekOfWeekyear();
        boolean boolean55 = fixedDateTimeZone23.equals((java.lang.Object) localDateTime52);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(4800245743691L, (org.joda.time.DateTimeZone) fixedDateTimeZone23);
        int int58 = fixedDateTimeZone23.getOffset(4800245734425L);
        java.lang.String str60 = fixedDateTimeZone23.getShortName((long) 801);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, (org.joda.time.DateTimeZone) fixedDateTimeZone23);
        boolean boolean62 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime17);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "44" + "'", str47, "44");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.006" + "'", str60, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test16460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16460");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(192);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours(22);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        int int16 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = localDateTime1.toDateTime(dateTimeZone3);
        int int18 = localDateTime1.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime1.withDurationAdded(readableDuration19, 1970);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withMillisOfDay(117);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond(925);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusMonths(29);
        boolean boolean60 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        int int61 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        int int62 = localDateTime53.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 192 + "'", int16 == 192);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
    }

    @Test
    public void test16461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16461");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale.setDefault(locale0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder3.setExtension('x', "Italian");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder9 = builder3.setLocale(locale8);
        java.util.Locale locale10 = builder3.build();
        java.util.Locale.Builder builder11 = builder3.clearExtensions();
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale.Builder builder13 = builder3.clear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        java.util.Locale locale27 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        int int29 = property21.getMaximumTextLength(locale27);
        java.lang.String str30 = property21.toString();
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getVariant();
        int int34 = property21.getMaximumShortTextLength(locale31);
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray36 = strSet35.toArray();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        boolean boolean40 = strSet35.contains((java.lang.Object) nameProvider37);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        java.util.Locale locale42 = java.util.Locale.PRC;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale.setDefault(locale42);
        java.lang.String str47 = nameProvider37.getShortName(locale42, "2122-02-11T08:00:16.821-01:35", "2122-02-11T08:00:11.407-01:35");
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = locale42.getDisplayName(locale48);
        java.util.Locale.Builder builder50 = builder3.setLocale(locale48);
        java.util.Locale.Builder builder51 = builder3.clear();
        java.util.Locale locale52 = builder51.build();
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale0.getDisplayVariant(locale52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[yearOfEra]" + "'", str30, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str49, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test16462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16462");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str18 = property14.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        boolean boolean39 = property14.equals((java.lang.Object) localDateTime35);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minusMonths(100);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear(308);
        boolean boolean46 = languageRange1.equals((java.lang.Object) localDateTime45);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test16463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16463");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withYearOfEra(263);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusMillis(755);
        int int22 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test16464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16464");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        boolean boolean5 = localDateTime3.isSupported(durationFieldType4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekyear();
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(4800245729644L, chronology24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test16465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16465");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        boolean boolean39 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.secondOfMinute();
        org.joda.time.DurationField durationField41 = property40.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime42 = property40.getLocalDateTime();
        int int43 = localDateTime42.getMonthOfYear();
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(1L, chronology44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(4800245785134L, chronology44);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16, chronology44);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays(2112);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(461, 930, 152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 930 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italiano" + "'", str3, "italiano");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test16466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16466");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        int int23 = property10.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy("35");
        int int36 = property32.getLeapAmount();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        int int38 = property32.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale22.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale41 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusMillis(0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfEra();
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = property52.getDifference(readableInstant53);
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        int int60 = property52.getMaximumTextLength(locale58);
        org.joda.time.LocalDateTime localDateTime62 = property52.addToCopy((int) (byte) 100);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("hi!");
        int int65 = property52.getMaximumShortTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        java.lang.String str75 = property74.getAsShortText();
        org.joda.time.LocalDateTime localDateTime77 = property74.setCopy("35");
        int int78 = property74.getLeapAmount();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        int int80 = property74.getMaximumShortTextLength(locale79);
        java.lang.String str81 = locale64.getDisplayLanguage(locale79);
        java.util.Locale locale82 = locale79.stripExtensions();
        java.util.Set<java.lang.Character> charSet83 = locale79.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale79);
        java.lang.String str85 = locale79.getDisplayVariant();
        java.lang.String str86 = locale79.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "44" + "'", str33, "44");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "44" + "'", str75, "44");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test16467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16467");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "HI!" + "'", str10, "HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test16468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16468");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale10 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale10.getDisplayName();
        java.lang.String str13 = locale0.getDisplayVariant(locale10);
        java.lang.String str14 = locale10.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tedesco" + "'", str1, "tedesco");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi! (HI!,hi!)" + "'", str12, "hi! (HI!,hi!)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!_HI!_hi!" + "'", str14, "hi!_HI!_hi!");
    }

    @Test
    public void test16469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16469");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        int int91 = localDateTime88.getDayOfYear();
        org.joda.time.LocalDateTime.Property property92 = localDateTime88.monthOfYear();
        java.lang.String str93 = property92.toString();
        org.joda.time.LocalDateTime localDateTime94 = property92.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime((java.lang.Object) property92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:44:58.149+00:00:00.006" + "'", str20, "2122-02-11T09:44:58.149+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 42 + "'", int91 == 42);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Property[monthOfYear]" + "'", str93, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test16470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withDurationAdded(readableDuration7, 21);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(62);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(764);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 175 + "'", int3 == 175);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test16471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16471");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(0);
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long17 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(4800246289643L, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 16L + "'", long17 == 16L);
    }

    @Test
    public void test16472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16472");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T08:00:14.119-01:35");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId5);
    }

    @Test
    public void test16473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16473");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.yearOfCentury();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.getDisplayVariant();
        java.lang.String str63 = locale61.getDisplayLanguage();
        int int64 = property60.getMaximumShortTextLength(locale61);
        java.lang.String str65 = locale61.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246298206L + "'", long55 == 4800246298206L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "coreano" + "'", str63, "coreano");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko-KR" + "'", str65, "ko-KR");
    }

    @Test
    public void test16474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16474");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(15);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra((int) 'x');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(42070665);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test16475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16475");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:36:00.163Z");
        timeZone1.setID("2122-02-11T09:35:23.854Z");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test16476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16476");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours(432);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusDays(117);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        int int31 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        boolean boolean35 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        int int36 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property44.getDifference(readableInstant45);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        int int52 = property44.getMaximumTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusMillis(0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfEra();
        org.joda.time.ReadableInstant readableInstant61 = null;
        int int62 = property60.getDifference(readableInstant61);
        java.util.Locale locale66 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        int int68 = property60.getMaximumTextLength(locale66);
        org.joda.time.LocalDateTime localDateTime70 = property60.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        long long73 = dateTime72.getMillis();
        int int74 = property44.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalDateTime localDateTime76 = property44.setCopy(100);
        boolean boolean77 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime79 = property78.withMaximumValue();
        boolean boolean80 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withYear(749);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime84 = localDateTime79.withMinuteOfHour(2252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2252 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800246298247L + "'", long73 == 4800246298247L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test16477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16477");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:38:05.416");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        int int14 = property12.getMaximumValue();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getCountry();
        int int17 = property12.getMaximumShortTextLength(locale15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = dateTimeZone20.getShortName(10L, locale23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        int int46 = property33.getMaximumShortTextLength(locale45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        java.lang.String str56 = property55.getAsShortText();
        org.joda.time.LocalDateTime localDateTime58 = property55.setCopy("35");
        int int59 = property55.getLeapAmount();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        int int61 = property55.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale45.getDisplayLanguage(locale60);
        java.util.Locale locale63 = locale60.stripExtensions();
        java.lang.String str64 = locale60.toLanguageTag();
        java.lang.String str65 = locale23.getDisplayLanguage(locale60);
        java.lang.String str67 = locale60.getExtension('u');
        boolean boolean68 = locale60.hasExtensions();
        java.lang.String str69 = locale15.getDisplayScript(locale60);
        java.util.Set<java.lang.String> strSet70 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale60.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = timeZone1.getDisplayName(false, (-7044), locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -7044");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "44" + "'", str13, "44");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:35" + "'", str25, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "44" + "'", str56, "44");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
    }

    @Test
    public void test16478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16478");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        int int3 = timeZone1.getOffset(40L);
        int int4 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test16479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16479");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = builder39.build();
        java.lang.String str42 = dateTimeZone36.getName((long) 34520736, locale41);
        long long45 = dateTimeZone36.adjustOffset((long) (byte) 0, false);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusMillis(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfEra();
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = property53.getDifference(readableInstant54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        int int61 = property53.getMaximumTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime63 = property53.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plusMillis(0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfEra();
        org.joda.time.ReadableInstant readableInstant74 = null;
        int int75 = property73.getDifference(readableInstant74);
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        int int81 = property73.getMaximumTextLength(locale79);
        org.joda.time.LocalDateTime localDateTime83 = property73.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = localDateTime83.toDateTime(readableInstant84);
        boolean boolean86 = dateTime65.isBefore(readableInstant84);
        org.joda.time.Instant instant87 = dateTime65.toInstant();
        java.lang.String str88 = dateTime65.toString();
        int int89 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime65);
        int int90 = property35.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime91 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime65.getZone();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((java.lang.Object) 4800245761421L);
        org.joda.time.DateTimeZone dateTimeZone96 = org.joda.time.DateTimeZone.forOffsetMillis(28876794);
        org.joda.time.DateTime dateTime97 = localDateTime94.toDateTime(dateTimeZone96);
        int int98 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(instant87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2122-02-11T09:44:58.302Z" + "'", str88, "2122-02-11T09:44:58.302Z");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test16480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16480");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(42);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMonths(550);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(438);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withYearOfEra(755);
        int int19 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusMinutes(80);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusHours(2122);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(16);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int int42 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusYears(0);
        boolean boolean48 = dateTimeZone35.isLocalDateTimeGap(localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime52.getFieldTypes();
        int int55 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35098361 + "'", int19 == 35098361);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test16481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16481");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDurationAdded(readableDuration8, 15);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(16);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.monthOfYear();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DurationField durationField16 = property13.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 35098393]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e00\u6708" + "'", str14, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test16482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16482");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale7.getVariant();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = property18.getAsText(locale21);
        java.lang.String str25 = nameProvider10.getName(locale21, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        int int46 = property33.getMaximumShortTextLength(locale45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        java.lang.String str56 = property55.getAsShortText();
        org.joda.time.LocalDateTime localDateTime58 = property55.setCopy("35");
        int int59 = property55.getLeapAmount();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        int int61 = property55.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale45.getDisplayLanguage(locale60);
        java.lang.String str63 = locale45.toLanguageTag();
        java.lang.String str66 = nameProvider10.getName(locale45, "hi!", "1");
        java.lang.String str67 = locale7.getDisplayScript(locale45);
        java.lang.String str68 = locale7.getDisplayCountry();
        java.lang.String str69 = locale7.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = locale7.getUnicodeLocaleType("2022-02-11T09:44:22.753");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:44:22.753");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "44" + "'", str56, "44");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "HI!" + "'", str68, "HI!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
    }

    @Test
    public void test16483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16483");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension('u', "2122-02-11T09:40:04.863Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:40:04.863Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test16484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16484");
        java.util.Locale locale2 = new java.util.Locale("IT", "2122-02-11T09:40:07.982Z");
        java.lang.String str3 = locale2.getISO3Language();
        org.junit.Assert.assertEquals(locale2.toString(), "it_2122-02-11T09:40:07.982Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ita" + "'", str3, "ita");
    }

    @Test
    public void test16485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16485");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("secondOfMinute", "2122-02-11T09:35:10.520Z", 21, 93);
        long long6 = fixedDateTimeZone4.previousTransition(4800245744808L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4800245744808L + "'", long6 == 4800245744808L);
    }

    @Test
    public void test16486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16486");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        int int2 = localDateTime0.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        int int19 = property11.getMaximumTextLength(locale17);
        org.joda.time.LocalDateTime localDateTime21 = property11.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.Chronology chronology25 = dateTime23.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = dateTime23.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        int int41 = localDateTime40.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        boolean boolean45 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        int int46 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime34.yearOfCentury();
        java.lang.String str48 = property47.getAsShortText();
        boolean boolean49 = property47.isLeap();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        int int77 = localDateTime76.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minus(readableDuration79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.minusHours(9);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property90.getFieldType();
        boolean boolean92 = localDateTime84.isSupported(dateTimeFieldType91);
        int int93 = dateTime69.get(dateTimeFieldType91);
        int int94 = property47.compareTo((org.joda.time.ReadableInstant) dateTime69);
        long long95 = dateTime69.getMillis();
        boolean boolean96 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime69);
        java.lang.String str97 = dateTime69.toString();
        int int98 = property3.getDifference((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 35098469]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22" + "'", str48, "22");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2122-02-11T09:44:58.469+00:00:00.021" + "'", str70, "2122-02-11T09:44:58.469+00:00:00.021");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 22 + "'", int93 == 22);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + 4800246298448L + "'", long95 == 4800246298448L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "2122-02-11T09:44:58.469+00:00:00.021" + "'", str97, "2122-02-11T09:44:58.469+00:00:00.021");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-99) + "'", int98 == (-99));
    }

    @Test
    public void test16487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16487");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMinutes(9);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(582);
        int int17 = localDateTime14.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withPeriodAdded(readablePeriod18, 35036806);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test16488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16488");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.toLanguageTag();
        java.lang.String str56 = nameProvider0.getName(locale35, "hi!", "1");
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str61 = nameProvider57.getName(locale58, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str67 = nameProvider57.getName(locale63, "2122-02-11T09:35:10.520Z", "0035-02-11T09:35:18.575");
        java.lang.String str70 = nameProvider0.getShortName(locale63, "2122-02-11T09:35:28.243Z", "");
        java.util.Set<java.lang.String> strSet71 = locale63.getUnicodeLocaleKeys();
        java.lang.Object[] objArray72 = strSet71.toArray();
        java.util.Iterator<java.lang.String> strItor73 = strSet71.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = strSet71.add("2122-02-11T09:40:29.563Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "44" + "'", str46, "44");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(strItor73);
    }

    @Test
    public void test16489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16489");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        boolean boolean18 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMaximumValue();
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        org.joda.time.Interval interval21 = property17.toInterval();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test16490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16490");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.Interval interval10 = property8.toInterval();
        int int11 = property8.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundHalfFloorCopy();
        int[] intArray13 = localDateTime12.getValues();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 11, 35100000]");
    }

    @Test
    public void test16491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16491");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property8.addToCopy(4800245713056L);
        int int16 = localDateTime15.size();
        int[] intArray17 = localDateTime15.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withWeekOfWeekyear(34536263);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34536263 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9128845, 12, 25, 69658637]");
    }

    @Test
    public void test16492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16492");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(292278993);
        int int10 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property7.withMinimumValue();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        int int13 = localDateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 58 + "'", int13 == 58);
    }

    @Test
    public void test16493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16493");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("12");
        boolean boolean2 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ora media di Greenwich" + "'", str4, "Ora media di Greenwich");
    }

    @Test
    public void test16494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16494");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        int int41 = localDateTime40.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(350);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusYears(39);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMinutes(34964684);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246298653L + "'", long36 == 4800246298653L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test16495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16495");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        int int32 = strSet15.size();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet15.spliterator();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        boolean boolean56 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.plusMillis((int) (byte) 10);
        boolean boolean59 = localDateTime38.isEqual((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        int int62 = localDateTime61.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property66 = localDateTime61.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        boolean boolean68 = localDateTime38.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        boolean boolean71 = strSet15.remove((java.lang.Object) localDateTime70);
        int int72 = strSet15.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test16496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16496");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245721413L);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        int int11 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime7);
        int int12 = localDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
    }

    @Test
    public void test16497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16497");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        int int64 = property56.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime48.isBefore(readableInstant67);
        boolean boolean70 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int71 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean72 = fixedDateTimeZone5.isFixed();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(4800245719728L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        java.util.TimeZone timeZone74 = fixedDateTimeZone5.toTimeZone();
        java.lang.String str75 = timeZone74.getID();
        java.lang.String str76 = timeZone74.getID();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:44:58.760+00:00:00.021" + "'", str28, "2122-02-11T09:44:58.760+00:00:00.021");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str75, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str76, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test16498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale8);
        int int10 = property6.getMaximumShortTextLength(locale8);
        java.lang.String str11 = locale8.getCountry();
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        java.lang.String str22 = property21.getAsShortText();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime25 = property21.setCopy("35", locale24);
        org.joda.time.LocalDateTime localDateTime26 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfDay();
        boolean boolean30 = strSet12.contains((java.lang.Object) property29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes(11);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        boolean boolean39 = strSet12.contains((java.lang.Object) localDateTime37);
        int int40 = strSet12.size();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(1);
        java.lang.String str45 = localDateTime41.toString("2022");
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plus(readablePeriod48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withWeekyear(5735993);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.minusMillis(859);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.withPeriodAdded(readablePeriod54, 541);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime47.plusSeconds(153);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = localDateTime47.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = strSet12.toArray(dateTimeFieldArray59);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "44" + "'", str22, "44");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test16499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16499");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        int int12 = property8.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField13 = property8.getField();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = property8.roundFloorCopy();
        int int16 = localDateTime15.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusYears(426);
        int int19 = localDateTime15.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime15.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44" + "'", str9, "44");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test16500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest32.test16500");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 838);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusHours(9);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = localDateTime26.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime10.withField(dateTimeFieldType33, (int) 'a');
        boolean boolean37 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime36.toString(dateTimeFormatter38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime.Property property41 = localDateTime36.property(dateTimeFieldType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 840 + "'", int9 == 840);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2097-02-11T09:44:58.840" + "'", str39, "2097-02-11T09:44:58.840");
    }
}

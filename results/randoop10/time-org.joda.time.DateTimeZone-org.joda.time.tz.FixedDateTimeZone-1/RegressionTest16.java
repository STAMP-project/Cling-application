import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(304, 35199071, 34648133, 804, 473);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 804 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(292278993);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 34871523 + "'", int6 == 34871523);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getCountry();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale.Builder builder15 = builder7.setLocale(locale11);
        java.util.Locale locale16 = builder7.build();
        java.util.Locale locale17 = builder7.build();
        java.util.Locale.Builder builder18 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("2022-01-10T09:36:10.841");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-01-10T09:36:10.841 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minus(readablePeriod16);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Collection<java.util.Locale> localeCollection29 = null;
        java.util.Locale locale30 = java.util.Locale.lookup(languageRangeList28, localeCollection29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap37);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        boolean boolean12 = property7.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = dateTimeZone17.getShortName(10L, locale20);
        long long25 = dateTimeZone17.adjustOffset((long) 10, false);
        java.lang.String str27 = dateTimeZone17.getNameKey(362L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        int int41 = localDateTime40.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        boolean boolean45 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.plusDays(292278993);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        int int50 = localDateTime49.getYearOfCentury();
        int int51 = localDateTime49.getMillisOfSecond();
        int int52 = localDateTime49.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.plusMillis(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfEra();
        org.joda.time.ReadableInstant readableInstant63 = null;
        int int64 = property62.getDifference(readableInstant63);
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        int int70 = property62.getMaximumTextLength(locale68);
        org.joda.time.LocalDateTime localDateTime72 = property62.addToCopy((int) (byte) 100);
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("hi!");
        int int75 = property62.getMaximumShortTextLength(locale74);
        org.joda.time.LocalDateTime localDateTime76 = property62.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property62.getFieldType();
        org.joda.time.LocalDateTime.Property property78 = localDateTime49.property(dateTimeFieldType77);
        boolean boolean79 = localDateTime47.isSupported(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property80 = localDateTime47.year();
        org.joda.time.LocalDateTime localDateTime81 = property80.getLocalDateTime();
        boolean boolean82 = dateTimeZone17.isLocalDateTimeGap(localDateTime81);
        org.joda.time.DateTime dateTime83 = localDateTime13.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime13.plusMonths(171);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minus(readablePeriod86);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:35" + "'", str22, "-01:35");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 593 + "'", int51 == 593);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T09:35:40.129Z", "2122-02-11T09:36:52.948Z");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:35:40.129z_2122-02-11T09:36:52.948Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        int int10 = fixedDateTimeZone4.getStandardOffset(4800245725694L);
        java.lang.String str12 = fixedDateTimeZone4.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.setCopy(53);
        boolean boolean28 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getName((long) (byte) 1);
        long long33 = dateTimeZone29.nextTransition((long) 2022);
        java.lang.String str34 = dateTimeZone29.toString();
        long long38 = dateTimeZone29.convertLocalToUTC(1L, false, (long) (byte) 100);
        int int40 = dateTimeZone29.getOffsetFromLocal(4800245759781L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = localDateTime41.getFieldTypes();
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.year();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone52 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long54 = fixedDateTimeZone52.nextTransition((long) (byte) 100);
        int int56 = fixedDateTimeZone52.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime57 = localDateTime47.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        long long60 = dateTimeZone29.getMillisKeepLocal(dateTimeZone58, 13L);
        long long62 = fixedDateTimeZone4.getMillisKeepLocal(dateTimeZone29, 3577040126L);
        java.util.Locale locale66 = new java.util.Locale("\u610f\u5927\u5229\u6587", "2122-02-11T09:35:07.696Z");
        java.util.Locale locale70 = new java.util.Locale("francese (Canada)", "Property[yearOfEra]", "ita");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleKeys();
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("9");
        java.lang.String str74 = locale70.getDisplayCountry(locale73);
        java.lang.String str75 = locale66.getDisplayVariant(locale70);
        java.lang.String str76 = fixedDateTimeZone4.getShortName((long) 54000000, locale70);
        boolean boolean77 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.070" + "'", str31, "+00:00:00.070");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2022L + "'", long33 == 2022L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.070" + "'", str34, "+00:00:00.070");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-69L) + "'", long38 == (-69L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 77L + "'", long60 == 77L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3577040088L + "'", long62 == 3577040088L);
        org.junit.Assert.assertEquals(locale66.toString(), "\u610f\u5927\u5229\u6587_2122-02-11T09:35:07.696Z");
        org.junit.Assert.assertEquals(locale70.toString(), "francese (canada)_PROPERTY[YEAROFERA]_ita");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PROPERTY[YEAROFERA]" + "'", str74, "PROPERTY[YEAROFERA]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.032" + "'", str76, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(34845661, 452, 799);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 452 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-69L) + "'", long29 == (-69L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240010940L + "'", long31 == 4800240010940L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245736066L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withSecondOfMinute(58);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.minuteOfHour();
        boolean boolean15 = property13.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(34529046);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = localDateTime16.isSupported(durationFieldType19);
        int int21 = localDateTime16.getCenturyOfEra();
        boolean boolean22 = localDateTime3.equals((java.lang.Object) localDateTime16);
        int int23 = localDateTime16.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale13 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder16 = builder7.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setExtension(' ', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals(locale13.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (China)" + "'", str14, "Chinese (China)");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = dateTimeZone29.getName((long) 292278993, locale31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.monthOfYear();
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = property37.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = property37.addWrapFieldToCopy(300);
        org.joda.time.LocalDateTime localDateTime43 = property37.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.070" + "'", str5, "+00:00:00.070");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.070" + "'", str32, "+00:00:00.070");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        int int43 = property35.getMaximumTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property35.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plusMillis(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfEra();
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = property55.getDifference(readableInstant56);
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        int int63 = property55.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property55.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime47.isBefore(readableInstant66);
        boolean boolean69 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int70 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long72 = fixedDateTimeZone4.nextTransition(4800245719443L);
        int int74 = fixedDateTimeZone4.getOffsetFromLocal((long) (-100));
        int int76 = fixedDateTimeZone4.getOffset(3577042656L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:41:11.894+00:00:00.070" + "'", str27, "2122-02-11T09:41:11.894+00:00:00.070");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 4800245719443L + "'", long72 == 4800245719443L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 32 + "'", int74 == 32);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property18.setCopy(58);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusHours(34692089);
        int int25 = localDateTime24.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 79 + "'", int25 == 79);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        int int3 = localDateTime2.getYearOfCentury();
        int int4 = localDateTime2.getMillisOfSecond();
        int int5 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMonths(839);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withDurationAdded(readableDuration8, 442);
        org.joda.time.LocalDateTime.Property property11 = localDateTime2.weekyear();
        org.joda.time.Chronology chronology12 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj0, chronology12);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 947 + "'", int4 == 947);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(707, 0, 1987, 545, 620, 947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 545 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:37:57.552+00:00:00.006");
        java.lang.String str2 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:37:57.552+00:00:00.006");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = dateTimeZone0.getShortName(10L, locale3);
        int int6 = dateTimeZone0.getStandardOffset(4800245724023L);
        java.lang.String str8 = dateTimeZone0.getNameKey(4800245713056L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int[] intArray10 = localDateTime9.getValues();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.weekOfWeekyear();
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withCenturyOfEra(263);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfSecond(187);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.070" + "'", str4, "+00:00:00.070");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 11, 34872018]");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = builder0.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder13 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setLanguageTag("2122-02-11T09:39:55.349Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2122 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = timeZone5.getOffset(4800245815763L);
        java.lang.String str8 = timeZone5.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:00" + "'", str8, "GMT+00:00");
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        boolean boolean22 = dateTime19.equals((java.lang.Object) builder21);
        java.util.Locale.Builder builder24 = builder21.setLanguage("deu");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.clear();
        java.util.Locale.Builder builder31 = builder27.setLanguageTag("zh");
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder34 = builder31.setLocale(locale33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale35.getCountry();
        java.util.Locale locale38 = locale35.stripExtensions();
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale38.getDisplayName();
        java.util.Locale.Builder builder42 = builder34.setLocale(locale38);
        java.util.Locale locale43 = builder34.build();
        java.util.Locale.Builder builder44 = builder26.setLocale(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder26.setExtension('a', "2022-02-11T09:36:07.472");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:36:07.472 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "deu");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        int int10 = timeZone9.getRawOffset();
        timeZone9.setRawOffset(12);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int[] intArray14 = localDateTime13.getValues();
        int int15 = localDateTime13.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        int int18 = localDateTime17.getYearOfCentury();
        int int19 = localDateTime17.getMillisOfSecond();
        boolean boolean20 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Date date21 = localDateTime13.toDate();
        boolean boolean22 = timeZone9.inDaylightTime(date21);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 11, 34872163]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 163 + "'", int19 == 163);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 09:41:12 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMinutes(677);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusHours(6050001);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears((int) (short) 0);
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.yearOfEra();
        int int34 = property33.get();
        org.joda.time.LocalDateTime localDateTime36 = property33.addToCopy(549);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime36.toString(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2571-02-11T09:41:12.195" + "'", str38, "2571-02-11T09:41:12.195");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(875, 273, 702, (-95), 883, 899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -95 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.minuteOfHour();
        boolean boolean16 = property14.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfCeilingCopy();
        int int18 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime21 = property14.setCopy(13);
        org.joda.time.LocalDateTime localDateTime23 = property14.addToCopy((long) 709);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks(529);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMinutes(49);
        int int30 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("coreano", strMap30);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = strSet35.remove(obj37);
        boolean boolean39 = strSet35.isEmpty();
        java.lang.Object[] objArray40 = strSet35.toArray();
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        strSet45.clear();
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.stream.Stream<java.util.Locale> localeStream58 = localeList55.stream();
        boolean boolean59 = strSet45.retainAll((java.util.Collection<java.util.Locale>) localeList55);
        boolean boolean60 = strSet35.retainAll((java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale locale77 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strSet78);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        java.lang.Object obj85 = null;
        boolean boolean86 = strSet83.remove(obj85);
        boolean boolean88 = strSet83.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strSet83);
        boolean boolean90 = strSet83.isEmpty();
        java.lang.String str91 = java.util.Locale.lookupTag(languageRangeList28, (java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[, hi!]");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(localeStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertEquals(locale77.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey(362L);
        java.util.TimeZone timeZone7 = fixedDateTimeZone4.toTimeZone();
        int int9 = fixedDateTimeZone4.getStandardOffset(4800245828220L);
        int int11 = fixedDateTimeZone4.getOffset(1641807401264L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str6, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet3.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet3.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(strSpliterator8);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(5735993);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMillis(859);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withPeriodAdded(readablePeriod13, 541);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.plusSeconds(153);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime6.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime6.withMinuteOfHour(846);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 846 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(4800245950631L, dateTimeZone1);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getOffset(4800245742947L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = dateTimeZone11.getName((long) 292278993, locale13);
        int int15 = property9.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property9.addToCopy((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDateTime17.getField(401);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 401");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.070" + "'", str14, "+00:00:00.070");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = timeZone2.toZoneId();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.lang.String str6 = timeZone0.getID();
        java.util.TimeZone.setDefault(timeZone0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minus(readablePeriod22);
        int[] intArray24 = localDateTime17.getValues();
        java.util.Date date25 = localDateTime17.toDate();
        boolean boolean26 = timeZone0.inDaylightTime(date25);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 11, 34872380]");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Feb 11 09:41:12 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1969, 806);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 806");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        int int12 = property8.getLeapAmount();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.lang.String str17 = property8.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property8.addToCopy(3576950127L);
        java.lang.String str20 = property8.toString();
        int int21 = property8.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "41" + "'", str17, "41");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[minuteOfHour]" + "'", str20, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone1.isFixed();
        java.lang.String str18 = dateTimeZone1.getName(39446997010528L);
        java.lang.String str20 = dateTimeZone1.getShortName(40L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone1.getName(4800245721875L, locale22);
        java.lang.String str25 = dateTimeZone1.getNameKey(9796L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.012" + "'", str18, "+00:00:00.012");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.012" + "'", str20, "+00:00:00.012");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.012" + "'", str23, "+00:00:00.012");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset(451L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.previousTransition((long) 'u');
        boolean boolean13 = fixedDateTimeZone4.isFixed();
        long long15 = fixedDateTimeZone4.nextTransition((long) 538);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.lang.String str17 = fixedDateTimeZone4.toString();
        int int19 = fixedDateTimeZone4.getOffsetFromLocal((long) 46);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 117L + "'", long12 == 117L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 538L + "'", long15 == 538L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str17, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        long long19 = property18.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str3, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 12499L + "'", long19 == 12499L);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusDays(263);
        int int23 = localDateTime16.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.util.TimeZone timeZone7 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str8 = timeZone7.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeZone7.getDisplayName(true, 504);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 504");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str8, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setScript("2122-02-11T09:35:56.230Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T09:35:56.230Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale0.getLanguage();
        java.lang.String str5 = locale0.getScript();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        strSet6.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        org.joda.time.LocalDateTime localDateTime15 = property12.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(292278993);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        int int37 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        boolean boolean41 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime30.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readableDuration52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.minusHours(9);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        boolean boolean65 = localDateTime57.isSupported(dateTimeFieldType64);
        boolean boolean66 = localDateTime43.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property67 = localDateTime23.property(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime18.withField(dateTimeFieldType64, 16);
        org.joda.time.LocalDateTime.Property property70 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfCeilingCopy();
        boolean boolean72 = languageRange1.equals((java.lang.Object) localDateTime71);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMonths(839);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withDurationAdded(readableDuration7, 442);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.plusWeeks((-100));
        int int12 = localDateTime11.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond(153);
        int int15 = localDateTime14.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 648 + "'", int3 == 648);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 4800245758597L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.centuryOfEra();
        int int4 = localDateTime1.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 58 + "'", int4 == 58);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long19 = dateTimeZone15.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        java.lang.String str21 = dateTimeZone15.getNameKey(4800245711010L);
        java.lang.String str23 = dateTimeZone15.getNameKey(4800245710519L);
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone15);
        boolean boolean26 = dateTimeZone15.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4800245707737L + "'", long19 == 4800245707737L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2122-02-11T09:35:48.546Z");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2122-02-11T09:35:52.575Z");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2122-02-11T08:01:18.341-01:35");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) (short) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        java.util.Locale locale2 = new java.util.Locale("Greenwich Zeit", "und");
        java.lang.String str3 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "greenwich zeit_UND");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = timeZone2.toZoneId();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.lang.String str6 = timeZone0.getID();
        int int8 = timeZone0.getOffset((-31L));
        int int10 = timeZone0.getOffset(3576927426L);
        java.lang.String str11 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ora media di Greenwich" + "'", str11, "Ora media di Greenwich");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusHours((-1));
        int int13 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(0);
        boolean boolean17 = dateTimeZone4.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.minuteOfHour();
        boolean boolean27 = property25.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.year();
        boolean boolean32 = dateTimeZone4.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.year();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMonths(362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withSecondOfMinute(828);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 828 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.getMaximumValue();
        int int11 = property8.getMinimumValueOverall();
        int int12 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property8.addWrapFieldToCopy(50);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        int int23 = property10.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy("35");
        int int36 = property32.getLeapAmount();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        int int38 = property32.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale22.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.lang.String str55 = property54.getAsShortText();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime58 = property54.setCopy("35", locale57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale57.getDisplayVariant(locale59);
        java.lang.String str62 = locale44.getDisplayScript(locale57);
        java.util.Locale.setDefault(category0, locale44);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = locale44.getDisplayCountry(locale64);
        java.lang.Object obj67 = locale44.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "41" + "'", str33, "41");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "41" + "'", str55, "41");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "HI!" + "'", str66, "HI!");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "hi!_HI!_hi!");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.lang.String str38 = locale34.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "41" + "'", str30, "41");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "italiano" + "'", str38, "italiano");
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.setLanguageTag("zh");
        java.util.Locale.Builder builder15 = builder13.setLanguage("");
        java.util.Locale locale16 = builder13.build();
        boolean boolean17 = languageRange1.equals((java.lang.Object) locale16);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en" + "'", str7, "en");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap17);
        boolean boolean19 = fixedDateTimeZone5.equals((java.lang.Object) strMap17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        boolean boolean37 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        int int38 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withYearOfCentury((int) (short) 0);
        boolean boolean41 = fixedDateTimeZone5.equals((java.lang.Object) (short) 0);
        long long43 = fixedDateTimeZone5.previousTransition(4800245784696L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) 4800245761520L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int45 = localDateTime44.getMillisOfSecond();
        java.util.Locale locale50 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.lang.String str55 = locale50.getDisplayScript(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = localDateTime44.toString("2122-02-11T09:39:52.644Z", locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4800245784696L + "'", long43 == 4800245784696L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 526 + "'", int45 == 526);
        org.junit.Assert.assertEquals(locale50.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension('a', "2097-02-11T09:39:57.664Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:39:57.664Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.lang.String str14 = fixedDateTimeZone4.getNameKey(4800245744056L);
        java.util.TimeZone timeZone15 = fixedDateTimeZone4.toTimeZone();
        timeZone15.setRawOffset((-798181));
        java.util.TimeZone.setDefault(timeZone15);
        timeZone15.setRawOffset(5735993);
        int int21 = timeZone15.getRawOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+01:35");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5735993 + "'", int21 == 5735993);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(655, 765, 445, 545, 76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 545 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "Italian");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.util.Locale locale15 = builder8.build();
        java.util.Locale.Builder builder16 = builder8.clear();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder19 = builder8.setLocale(locale17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = property27.getDifference(readableInstant28);
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        int int35 = property27.getMaximumTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime37 = property27.addToCopy((int) (byte) 100);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("hi!");
        int int40 = property27.getMaximumShortTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        int int47 = localDateTime46.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.minuteOfHour();
        java.lang.String str50 = property49.getAsShortText();
        org.joda.time.LocalDateTime localDateTime52 = property49.setCopy("35");
        int int53 = property49.getLeapAmount();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        int int55 = property49.getMaximumShortTextLength(locale54);
        java.lang.String str56 = locale39.getDisplayLanguage(locale54);
        java.util.Locale.Builder builder57 = builder19.setLocale(locale39);
        java.lang.String str58 = locale39.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = localDateTime6.toString("2122-02-11T09:38:16.925Z", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 106 + "'", int3 == 106);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "41" + "'", str50, "41");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusSeconds(394);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        int int10 = localDateTime8.getHourOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone15 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int17 = fixedDateTimeZone15.getStandardOffset((long) 529);
        long long19 = fixedDateTimeZone15.previousTransition((long) (short) 1);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.lang.String str23 = fixedDateTimeZone15.getName(4800245729437L, locale21);
        java.lang.String str25 = fixedDateTimeZone15.getName(4800245707867L);
        int int27 = fixedDateTimeZone15.getOffset(4800245766063L);
        org.joda.time.DateTime dateTime28 = localDateTime8.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone15);
        java.util.TimeZone timeZone29 = fixedDateTimeZone15.toTimeZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.032" + "'", str23, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.032" + "'", str25, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        int[] intArray8 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusYears(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        int int15 = dateTimeZone13.getOffset((long) 10);
        boolean boolean16 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        long long37 = dateTime36.getMillis();
        int int38 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        int int45 = localDateTime44.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusYears(0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime54.getFieldTypes();
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = dateTime53.isSupported(dateTimeFieldType59);
        boolean boolean61 = dateTime36.isSupported(dateTimeFieldType59);
        int int62 = localDateTime4.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 1, 10, 34873151]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4800246073119L + "'", long37 == 4800246073119L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        java.lang.String str3 = localDateTime1.toString();
        org.joda.time.DateTime dateTime4 = localDateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        java.lang.String str7 = dateTimeZone5.getName(12L);
        long long9 = dateTimeZone5.previousTransition((long) (short) 0);
        long long11 = dateTimeZone5.previousTransition((long) 171);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:41:13.188" + "'", str3, "2022-02-11T09:41:13.188");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.032" + "'", str7, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 171L + "'", long11 == 171L);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(47, 955);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 955");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(4800245713056L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(292278993);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) ' ');
        int int21 = localDateTime20.getMillisOfSecond();
        int int22 = localDateTime20.getYear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone27.getShortName(10L, locale30);
        long long35 = dateTimeZone27.adjustOffset((long) 10, false);
        java.lang.String str37 = dateTimeZone27.getNameKey(362L);
        org.joda.time.DateTime dateTime38 = localDateTime24.toDateTime(dateTimeZone27);
        boolean boolean39 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property40 = localDateTime3.era();
        java.lang.String str41 = property40.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 223 + "'", int21 == 223);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3220 + "'", int22 == 3220);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:35" + "'", str32, "-01:35");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "era" + "'", str41, "era");
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        org.joda.time.LocalDateTime localDateTime13 = property10.withMaximumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDateTime13.indexOf(dateTimeFieldType15);
        java.lang.String str17 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusDays(883);
        boolean boolean20 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "292278993-02-11T09:41:13.292" + "'", str17, "292278993-02-11T09:41:13.292");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusHours(2122);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYear(543);
        int int13 = localDateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:39:57.064Z", (double) 4800245896954L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.800245896954E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(25);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMillis(187);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        long long4 = dateTimeZone0.nextTransition((long) 2022);
        java.lang.String str5 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(1L, false, (long) (byte) 100);
        int int11 = dateTimeZone0.getOffsetFromLocal(4800245759781L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long25 = fixedDateTimeZone23.nextTransition((long) (byte) 100);
        int int27 = fixedDateTimeZone23.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime28 = localDateTime18.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 13L);
        int int33 = dateTimeZone0.getStandardOffset((long) 567);
        java.lang.String str34 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.032" + "'", str2, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2022L + "'", long4 == 2022L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str5, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-31L) + "'", long9 == (-31L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 39L + "'", long31 == 39L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str34, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone(zoneId11);
        java.lang.String str15 = timeZone14.getID();
        boolean boolean16 = timeZone4.hasSameRules(timeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withSecondOfMinute(10);
        int[] intArray24 = localDateTime21.getValues();
        java.util.Date date25 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.fromDateFields(date25);
        boolean boolean31 = timeZone4.inDaylightTime(date25);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GMT-01:35" + "'", str15, "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 1, 10, 34873415]");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Jan 10 09:41:13 GMT+01:35 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.lang.String str18 = nameProvider0.getShortName(locale12, "und", "2122-02-11T09:35:41.308Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getScript();
        java.lang.String str23 = locale21.getCountry();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.lang.String str25 = locale21.getLanguage();
        java.lang.String str28 = nameProvider0.getShortName(locale21, "2122-02-11T09:36:12.116Z", "utc");
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("hi!");
        int int49 = property36.getMaximumShortTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        int int56 = localDateTime55.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.minuteOfHour();
        java.lang.String str59 = property58.getAsShortText();
        org.joda.time.LocalDateTime localDateTime61 = property58.setCopy("35");
        int int62 = property58.getLeapAmount();
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        int int64 = property58.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale48.getDisplayLanguage(locale63);
        java.lang.String str66 = locale48.getCountry();
        java.util.Set<java.lang.String> strSet67 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str68 = locale21.getDisplayLanguage(locale48);
        java.lang.String str69 = locale48.getScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "41" + "'", str59, "41");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale3.getUnicodeLocaleType("2122-02-11T09:36:10.139+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2122-02-11T09:36:10.139+00:00:00.032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T08:00:15.544-01:35" + "'", str5, "2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        int int35 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withField(dateTimeFieldType41, 13);
        int int44 = localDateTime32.get(dateTimeFieldType41);
        int int45 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime14.plus(readableDuration46);
        org.joda.time.DateTime dateTime48 = localDateTime14.toDateTime();
        int int49 = localDateTime14.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 13 + "'", int35 == 13);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getLeapDurationField();
        java.lang.String str7 = property4.getName();
        java.lang.String str8 = property4.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "year" + "'", str8, "year");
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plus(readablePeriod14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDurationAdded(readableDuration16, 985);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.millisOfDay();
        java.lang.String str20 = property19.getName();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str25 = nameProvider21.getName(locale22, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale29 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str32 = nameProvider21.getShortName(locale29, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale29.getDisplayLanguage(locale33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        boolean boolean52 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        int int53 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime51.minuteOfHour();
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = property56.getAsShortText(locale60);
        java.lang.String str63 = locale29.getDisplayScript(locale60);
        java.lang.String str64 = property19.getAsShortText(locale29);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfDay" + "'", str20, "millisOfDay");
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(locale29.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str34, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "41" + "'", str62, "41");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "34828000" + "'", str64, "34828000");
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0, 34861889, 5835909, 34711614, 20, 775, 840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34711614 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getLeapDurationField();
        java.lang.String str23 = property19.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T09:35:58.445Z");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = property14.getAsText(locale15);
        boolean boolean17 = locale1.equals((java.lang.Object) locale15);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        boolean boolean7 = strSet3.isEmpty();
        java.lang.Object[] objArray8 = strSet3.toArray();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int14 = localDateTime13.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(11);
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusSeconds(42);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes((-292275054));
        boolean boolean24 = strSet3.contains((java.lang.Object) localDateTime21);
        boolean boolean25 = strSet3.isEmpty();
        java.lang.Object[] objArray26 = strSet3.toArray();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[, hi!]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[, hi!]");
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.lang.String str37 = locale19.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.util.Locale locale42 = new java.util.Locale("35");
        java.lang.String str43 = dateTimeZone39.getShortName((long) 150, locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale19.getDisplayName(locale42);
        java.lang.String str46 = locale42.getDisplayName();
        java.util.Locale locale49 = new java.util.Locale("29", "2122-02-11T09:37:48.035Z");
        java.lang.String str50 = locale42.getDisplayScript(locale49);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "41" + "'", str30, "41");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals(locale42.toString(), "35");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "35" + "'", str46, "35");
        org.junit.Assert.assertEquals(locale49.toString(), "29_2122-02-11T09:37:48.035Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        int int22 = localDateTime21.getYearOfCentury();
        int int23 = localDateTime21.getMillisOfSecond();
        int int24 = localDateTime21.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        int int47 = property34.getMaximumShortTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime48 = property34.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property34.getFieldType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime21.property(dateTimeFieldType49);
        boolean boolean51 = localDateTime19.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime19.year();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime19.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        int int61 = localDateTime60.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime59.getFieldTypes();
        int int64 = localDateTime59.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime68 = localDateTime59.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime59.minusSeconds(7);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        int int77 = localDateTime76.getMinuteOfHour();
        boolean boolean78 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime54.plusWeeks(341);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 665 + "'", int23 == 665);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 41 + "'", int64 == 41);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 41 + "'", int77 == 41);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) ' ');
        boolean boolean16 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(34520736);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, (int) (byte) 1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone28 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap40);
        boolean boolean42 = fixedDateTimeZone28.equals((java.lang.Object) strMap40);
        long long44 = fixedDateTimeZone28.previousTransition(2022L);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getScript();
        java.lang.String str48 = locale46.getCountry();
        java.lang.String str49 = fixedDateTimeZone28.getShortName(4800245746270L, locale46);
        int int51 = fixedDateTimeZone28.getOffset((long) 97);
        org.joda.time.DateTime dateTime52 = localDateTime23.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone28);
        long long54 = fixedDateTimeZone28.convertUTCToLocal(4800245714834L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2022L + "'", long44 == 2022L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.006" + "'", str49, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 4800245714840L + "'", long54 == 4800245714840L);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = new java.util.Locale("50", "+00:00:00.059");
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((-5700000L));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        boolean boolean28 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime17.minusMillis(8);
        org.joda.time.LocalDateTime.Property property33 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime51 = property41.addToCopy((int) (byte) 100);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("hi!");
        int int54 = property41.getMaximumShortTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime56 = property41.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField57 = property41.getLeapDurationField();
        java.lang.String str58 = property41.getAsString();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getScript();
        java.lang.String str61 = locale59.getCountry();
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale59.getDisplayScript(locale62);
        java.lang.String str64 = locale59.getISO3Country();
        java.lang.String str65 = property41.getAsShortText(locale59);
        java.lang.String str66 = locale59.getCountry();
        int int67 = property33.getMaximumShortTextLength(locale59);
        java.lang.String str68 = locale59.getScript();
        int int69 = property10.getMaximumShortTextLength(locale59);
        java.util.Locale.setDefault(category0, locale59);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals(locale6.toString(), "50_+00:00:00.059");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("German");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale47.getLanguage();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str69 = locale68.getDisplayScript();
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale73.getLanguage();
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale40, locale42, locale43, locale47, locale50, locale52, locale56, locale58, locale63, locale68, locale73, locale76 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        boolean boolean80 = strSet38.retainAll((java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Locale locale87 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale87 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.util.Locale>) localeList89);
        boolean boolean92 = strSet38.containsAll((java.util.Collection<java.util.Locale>) localeList91);
        boolean boolean93 = strSet21.removeAll((java.util.Collection<java.util.Locale>) localeList91);
        java.util.stream.Stream<java.util.Locale> localeStream94 = localeList91.parallelStream();
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.stream.Stream<java.util.Locale> localeStream96 = localeList91.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Italian" + "'", str41, "Italian");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(localeStream94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeStream96);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        int int7 = dateTimeZone1.getStandardOffset(4800245716316L);
        int int9 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("UTC");
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = dateTimeZone1.getShortName(4800245747930L, locale12);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeZone1.getName(4800245864808L, locale16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "utc" + "'", str13, "utc");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property18.setCopy(58);
        org.joda.time.DurationField durationField23 = property18.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNull(durationField23);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.lang.String str21 = property18.getAsText();
        int int22 = property18.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "13" + "'", str21, "13");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        java.lang.String str12 = fixedDateTimeZone4.getShortName(4800245771295L);
        long long16 = fixedDateTimeZone4.convertLocalToUTC(451L, false, (long) 34570185);
        java.lang.String str18 = fixedDateTimeZone4.getNameKey(362L);
        long long20 = fixedDateTimeZone4.nextTransition((long) 429);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 419L + "'", long16 == 419L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 429L + "'", long20 == 429L);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str10 = timeZone9.getID();
        java.util.TimeZone.setDefault(timeZone9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str10, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMinimumValueOverall();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DurationField durationField8 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMinimumValue();
        boolean boolean10 = property5.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        int int13 = localDateTime10.getMinuteOfHour();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long21 = fixedDateTimeZone19.previousTransition((long) 9);
        boolean boolean23 = fixedDateTimeZone19.isStandardOffset(4800245710661L);
        long long25 = fixedDateTimeZone19.nextTransition(2022L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        org.joda.time.Chronology chronology47 = dateTime45.getChronology();
        int int48 = fixedDateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime53.getFieldTypes();
        int int58 = localDateTime53.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime53.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        int int69 = localDateTime68.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.weekyear();
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.year();
        int int82 = localDateTime80.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = localDateTime83.getFieldTypes();
        org.joda.time.LocalDateTime.Property property87 = localDateTime83.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property87.getFieldType();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime80.withField(dateTimeFieldType88, 13);
        int int91 = localDateTime79.get(dateTimeFieldType88);
        int int92 = localDateTime53.indexOf(dateTimeFieldType88);
        boolean boolean93 = dateTime45.isSupported(dateTimeFieldType88);
        org.joda.time.DateTime dateTime94 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray95 = localDateTime10.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 41 + "'", int13 == 41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9L + "'", long21 == 9L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2022L + "'", long25 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 41 + "'", int58 == 41);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 13 + "'", int82 == 13);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2022 + "'", int91 == 2022);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray95);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(192);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(22);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(dateTimeZone12);
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        long long18 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 192 + "'", int14 == 192);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-192L) + "'", long18 == (-192L));
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology63 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime40.getZone();
        java.lang.String str66 = dateTimeZone64.getShortName(4800245743691L);
        java.lang.String str67 = dateTimeZone64.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:41:14.081+00:00:00.032" + "'", str20, "2122-02-11T09:41:14.081+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.032" + "'", str66, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str67, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("und", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("Italian");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale29.getLanguage();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Locale locale55 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale55.getLanguage();
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale22, locale24, locale25, locale29, locale32, locale34, locale38, locale40, locale45, locale50, locale55, locale58 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        boolean boolean62 = strSet20.retainAll((java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList71);
        boolean boolean74 = strSet20.containsAll((java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.stream.Stream<java.util.Locale> localeStream76 = localeList73.stream();
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.stream.Stream<java.util.Locale> localeStream78 = localeList77.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "italiano" + "'", str23, "italiano");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "italiano" + "'", str41, "italiano");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeStream76);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(localeStream78);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        int int23 = timeZone22.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone24 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDateTime localDateTime25 = null; // flaky: org.joda.time.LocalDateTime.now(dateTimeZone24);
        int int26 = 0; // flaky: localDateTime25.getYearOfEra();
        int int27 = 0; // flaky: localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = null; // flaky: localDateTime25.minusHours(661);
        int int30 = 0; // flaky: property21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-5700000) + "'", int23 == (-5700000));
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
// flaky:         org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = locale8.getDisplayVariant(locale9);
        java.lang.String str12 = locale9.getDisplayVariant();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale.Builder builder17 = builder13.setLanguageTag("zh");
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder20 = builder17.setLocale(locale19);
        java.lang.String str21 = locale19.toLanguageTag();
        java.lang.String str22 = locale9.getDisplayScript(locale19);
        java.util.Locale.Builder builder23 = builder0.setLocale(locale9);
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str28 = nameProvider24.getName(locale25, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale32 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str35 = nameProvider24.getShortName(locale32, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str40 = nameProvider24.getName(locale36, "yearOfCentury", "2122-02-11T09:36:22.838Z");
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusMillis(0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfEra();
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = property64.getDifference(readableInstant65);
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        int int72 = property64.getMaximumTextLength(locale70);
        org.joda.time.LocalDateTime localDateTime74 = property64.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        long long77 = dateTime76.getMillis();
        int int78 = property48.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDateTime localDateTime80 = property48.setCopy(100);
        org.joda.time.DurationField durationField81 = property48.getLeapDurationField();
        int int82 = property48.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime84 = property48.addToCopy((int) (byte) -1);
        java.util.Locale locale85 = java.util.Locale.CHINESE;
        int int86 = property48.getMaximumTextLength(locale85);
        java.lang.String str87 = locale85.getDisplayVariant();
        java.lang.String str90 = nameProvider24.getShortName(locale85, "2022-02-11T09:36:11.480", "2122-02-11T09:35:26.387Z");
        java.util.Locale.Builder builder91 = builder0.setLocale(locale85);
        java.util.Locale.Builder builder94 = builder91.setExtension('u', "France");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals(locale32.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 4800246074128L + "'", long77 == 4800246074128L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNull(durationField81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        int int11 = timeZone10.getRawOffset();
        java.lang.String str12 = timeZone10.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.032" + "'", str5, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT+00:00" + "'", str12, "GMT+00:00");
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = locale7.stripExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        java.util.Locale locale1 = new java.util.Locale("2022-02-14T00:00:00.000");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-14t00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = null; // flaky: timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = null; // flaky: timeZone2.toZoneId();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.lang.String str5 = timeZone0.getID();
        timeZone0.setRawOffset(22);
        java.util.TimeZone.setDefault(timeZone0);
        int int9 = timeZone0.getRawOffset();
        int int10 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone11 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Locale locale15 = new java.util.Locale("34620000");
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.getCountry();
        java.lang.String str54 = locale35.getDisplayCountry();
        java.lang.String str55 = locale15.getDisplayScript(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = timeZone0.getDisplayName(false, 549, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 549");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT-01:35" + "'", str5, "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals(locale15.toString(), "34620000");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "41" + "'", str46, "41");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(11);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.toString();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMonths(28878766);
        int int25 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(689);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[minuteOfHour]" + "'", str13, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = dateTimeZone19.getName((long) 292278993, locale21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusWeeks(529);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime17.withTime(272, 680, 652, 1987);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 272 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.032" + "'", str22, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:37:44.884");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:37:44.884' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        boolean boolean6 = dateTimeZone2.isStandardOffset(4800245925876L);
        long long8 = dateTimeZone2.nextTransition(16092L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours(22);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) ' ');
        int int22 = localDateTime21.getMillisOfSecond();
        int int23 = localDateTime21.getYear();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plus(readablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = dateTimeZone28.getShortName(10L, locale31);
        long long36 = dateTimeZone28.adjustOffset((long) 10, false);
        java.lang.String str38 = dateTimeZone28.getNameKey(362L);
        org.joda.time.DateTime dateTime39 = localDateTime25.toDateTime(dateTimeZone28);
        long long40 = dateTime39.getMillis();
        int int41 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 16092L + "'", long8 == 16092L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 316 + "'", int22 == 316);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3220 + "'", int23 == 3220);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:35" + "'", str33, "-01:35");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 39446997370316L + "'", long40 == 39446997370316L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-5700000) + "'", int41 == (-5700000));
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        long long10 = fixedDateTimeZone4.previousTransition((long) 305);
        long long12 = fixedDateTimeZone4.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        int int28 = property20.getMaximumTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime30 = property20.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField31 = property20.getDurationField();
        org.joda.time.LocalDateTime localDateTime32 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks(768);
        boolean boolean35 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime32);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 305L + "'", long10 == 305L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Collection<java.util.Locale> localeCollection29 = null;
        java.util.Locale locale30 = java.util.Locale.lookup(languageRangeList28, localeCollection29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList28, strCollection31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet48);
        java.lang.Object[] objArray50 = strSet48.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale57 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.stream.Stream<java.util.Locale> localeStream62 = localeList61.stream();
        boolean boolean63 = strSet48.removeAll((java.util.Collection<java.util.Locale>) localeList61);
        boolean boolean64 = strSet48.isEmpty();
        int int65 = strSet48.size();
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        strSet70.clear();
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale locale78 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream83 = localeList80.stream();
        boolean boolean84 = strSet70.retainAll((java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream85 = localeList80.parallelStream();
        boolean boolean86 = strSet48.removeAll((java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream87 = localeList80.stream();
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.stream.Stream<java.util.Locale> localeStream89 = localeList80.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(localeStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeStream83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localeStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localeStream87);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(localeStream89);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDateTime localDateTime23 = property20.setCopy("35");
        int int24 = property20.getLeapAmount();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        int int26 = property20.getMaximumShortTextLength(locale25);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        java.lang.String str29 = property20.getAsText(locale28);
        org.joda.time.LocalDateTime localDateTime31 = property20.addToCopy(34);
        java.util.Locale locale33 = new java.util.Locale("italiano");
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = property20.getAsText(locale33);
        java.lang.String str36 = property8.getAsText(locale33);
        java.lang.String str37 = property8.toString();
        org.joda.time.LocalDateTime localDateTime38 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property8.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "41" + "'", str21, "41");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "41" + "'", str29, "41");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals(locale33.toString(), "italiano");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "41" + "'", str35, "41");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "41" + "'", str36, "41");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[minuteOfHour]" + "'", str37, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean24 = strSet20.isEmpty();
        boolean boolean26 = strSet20.add("");
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet34.remove(obj36);
        boolean boolean38 = strSet34.isEmpty();
        java.lang.Object[] objArray39 = strSet34.toArray();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet34, filteringMode40);
        boolean boolean42 = strSet34.isEmpty();
        int int43 = strSet34.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) int43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[, hi!]");
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        boolean boolean4 = languageRange1.equals((java.lang.Object) 3577084619L);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00 (2122-02-11T09:35:34.896Z)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00 (2122-02-11T09:35:34.896Z)\" is malformed at \" (2122-02-11T09:35:34.896Z)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('x', "Italian");
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder11 = builder5.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder5.clear();
        java.util.Locale locale13 = builder12.build();
        java.lang.String str16 = nameProvider0.getShortName(locale13, "2122-02-11T09:35:34.362Z", "2122-02-11T08:01:35.748-01:35");
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = dateTimeZone19.getShortName(10L, locale22);
        java.lang.String str25 = locale22.getDisplayName();
        java.util.Locale locale29 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("hi!");
        int int50 = property37.getMaximumShortTextLength(locale49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.minuteOfHour();
        java.lang.String str60 = property59.getAsShortText();
        org.joda.time.LocalDateTime localDateTime62 = property59.setCopy("35");
        int int63 = property59.getLeapAmount();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        int int65 = property59.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale49.getDisplayLanguage(locale64);
        java.lang.String str67 = locale29.getDisplayCountry(locale49);
        java.lang.String str68 = locale22.getDisplayName(locale29);
        java.util.Locale locale72 = new java.util.Locale("2022-02-11T09:35:42.902", "2022-01-09T11:35:10.479", "2122-02-11T09:36:40.431Z");
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.plusMillis(0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.yearOfEra();
        org.joda.time.ReadableInstant readableInstant81 = null;
        int int82 = property80.getDifference(readableInstant81);
        java.util.Locale locale86 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        int int88 = property80.getMaximumTextLength(locale86);
        java.lang.String str89 = locale86.getDisplayCountry();
        java.lang.String str90 = locale86.getLanguage();
        java.lang.String str91 = locale72.getDisplayName(locale86);
        java.lang.String str92 = locale22.getDisplayLanguage(locale86);
        java.util.Locale locale93 = locale86.stripExtensions();
        java.lang.String str96 = nameProvider0.getName(locale86, "2122-02-11T09:39:24.101Z", "292278993-02-11T09:39:20.721");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:35" + "'", str24, "-01:35");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "41" + "'", str60, "41");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals(locale72.toString(), "2022-02-11t09:35:42.902_2022-01-09T11:35:10.479_2122-02-11T09:36:40.431Z");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "HI!" + "'", str89, "HI!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022-02-11t09:35:42.902 (2022-01-09T11:35:10.479,2122-02-11T09:36:40.431Z)" + "'", str91, "2022-02-11t09:35:42.902 (2022-01-09T11:35:10.479,2122-02-11T09:36:40.431Z)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withYear(25);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        java.util.Locale locale23 = new java.util.Locale("\u65e5\u672c\u8a9e\u65e5\u672c)", "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        java.lang.String str24 = property20.getAsText(locale23);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone29 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strMap41);
        boolean boolean43 = fixedDateTimeZone29.equals((java.lang.Object) strMap41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusHours(22);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) ' ');
        int int57 = localDateTime56.getMillisOfSecond();
        int int58 = localDateTime56.getYear();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.plus(readablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str67 = locale66.getDisplayScript();
        java.lang.String str68 = dateTimeZone63.getShortName(10L, locale66);
        long long71 = dateTimeZone63.adjustOffset((long) 10, false);
        java.lang.String str73 = dateTimeZone63.getNameKey(362L);
        org.joda.time.DateTime dateTime74 = localDateTime60.toDateTime(dateTimeZone63);
        int int75 = fixedDateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime74);
        long long76 = dateTime74.getMillis();
        long long77 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c\u8a9e\u65e5\u672c\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "41" + "'", str24, "41");
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 542 + "'", int57 == 542);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3220 + "'", int58 == 3220);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-01:35" + "'", str68, "-01:35");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 39446997370542L + "'", long76 == 39446997370542L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1680360574L) + "'", long77 == (-1680360574L));
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear(956);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYearOfCentury(860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 860 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.util.Date date41 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date41);
        java.util.Date date43 = localDateTime42.toDate();
        int int44 = localDateTime42.getEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246074637L + "'", long36 == 4800246074637L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 01 00:00:00 GMT-01:35 2022");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:01 GMT-01:35 2022");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("Canada", "14", 503, (int) '4');
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        timeZone5.setRawOffset(801);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone5.getOffset(421, 799, 34740000, 2289738, 0, 164);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 421");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withDayOfYear((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, 756);
        int int31 = localDateTime30.getWeekyear();
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.032" + "'", str25, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.year();
        org.joda.time.Interval interval2 = property1.toInterval();
        java.util.Locale locale4 = new java.util.Locale("Germany");
        int int5 = property1.getMaximumShortTextLength(locale4);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        int int7 = property1.getMaximumTextLength(locale6);
        java.lang.Object obj8 = null;
        boolean boolean9 = property1.equals(obj8);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertEquals(locale4.toString(), "germany");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:37:26.263+00:00:00.032", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "2022-02-11t09:35:42.902 (2022-01-09T11:35:10.479,2122-02-11T09:36:40.431Z)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4_2022-02-11t09:35:42.902 (2022-01-09T11:35:10.479,2122-02-11T09:36:40.431Z)");
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes(2);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone12 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long14 = fixedDateTimeZone12.previousTransition((long) 9);
        boolean boolean16 = fixedDateTimeZone12.isStandardOffset(4800245710661L);
        int int18 = fixedDateTimeZone12.getStandardOffset((long) (-798211));
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        boolean boolean20 = fixedDateTimeZone12.equals((java.lang.Object) locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        boolean boolean43 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.plusMillis((int) (byte) 10);
        boolean boolean46 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        int int49 = localDateTime48.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property53.getFieldType();
        boolean boolean55 = localDateTime25.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = localDateTime25.getChronology();
        boolean boolean57 = fixedDateTimeZone12.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime58 = localDateTime7.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone12);
        int int60 = fixedDateTimeZone12.getOffset((long) 187);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) locale0, (org.joda.time.DateTimeZone) fixedDateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2122-02-11T09:40:02.191Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2122-02-11T09:40:02.191Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readableDuration19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusWeeks(451);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.weekyear();
        java.lang.String str25 = localDateTime16.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:41:14.800" + "'", str25, "2022-02-11T09:41:14.800");
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withPeriodAdded(readablePeriod13, 62);
        org.joda.time.DateTime dateTime16 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMinutes(305);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        boolean boolean40 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusHours(9);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        boolean boolean64 = localDateTime56.isSupported(dateTimeFieldType63);
        boolean boolean65 = localDateTime42.isSupported(dateTimeFieldType63);
        int int66 = localDateTime18.get(dateTimeFieldType63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        int int75 = localDateTime74.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withFields((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readableDuration77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusYears(0);
        boolean boolean81 = dateTimeZone68.isLocalDateTimeGap(localDateTime78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        long long84 = dateTimeZone68.convertUTCToLocal((long) (byte) 10);
        int int86 = dateTimeZone68.getOffsetFromLocal(4800245711197L);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(4800245746270L, dateTimeZone68);
        org.joda.time.DateTime dateTime88 = localDateTime18.toDateTime(dateTimeZone68);
        boolean boolean89 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 70 + "'", int66 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 42L + "'", long84 == 42L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 32 + "'", int86 == 32);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        int int4 = strSet3.size();
        java.util.Iterator<java.lang.String> strItor5 = strSet3.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 575 + "'", int4 == 575);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime49.isBefore(readableInstant68);
        boolean boolean71 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property77.getFieldType();
        boolean boolean79 = dateTime28.isSupported(dateTimeFieldType78);
        int int80 = localDateTime1.get(dateTimeFieldType78);
        int int81 = localDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(chronology82);
        int int84 = localDateTime83.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.minusSeconds((int) 'u');
        int int88 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime87);
        int int89 = localDateTime87.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        int int91 = localDateTime87.indexOf(dateTimeFieldType90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime87.plusMinutes(566);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withWeekOfWeekyear(947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 947 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T09:41:15.031+00:00:00.032" + "'", str29, "2122-02-11T09:41:15.031+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 22 + "'", int84 == 22);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 39 + "'", int89 == 39);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        int int22 = property21.getLeapAmount();
        int int23 = property21.get();
        org.joda.time.DurationField durationField24 = property21.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = property21.setCopy(380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 380 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        boolean boolean14 = property11.equals((java.lang.Object) 8);
        java.lang.String str15 = property11.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "22" + "'", str15, "22");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        strSet8.clear();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "Italian");
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale.Builder builder17 = builder10.clearExtensions();
        java.util.Locale.Builder builder18 = builder10.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder21 = builder18.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder22 = builder18.clearExtensions();
        boolean boolean23 = strSet8.equals((java.lang.Object) builder18);
        strSet8.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.getCountry();
        java.lang.String str54 = property14.getAsShortText(locale35);
        java.lang.String str55 = locale35.getDisplayScript();
        java.util.Locale locale59 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        int int66 = localDateTime65.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        java.lang.String str69 = property68.getAsShortText();
        int int70 = property68.getMaximumValue();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = property68.getAsShortText(locale71);
        java.lang.String str73 = locale59.getDisplayScript(locale71);
        java.lang.String str74 = locale71.getDisplayName();
        java.lang.String str76 = locale71.getExtension('u');
        java.lang.String str77 = locale35.getDisplayLanguage(locale71);
        java.lang.String str78 = locale35.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "41" + "'", str46, "41");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Fri" + "'", str54, "Fri");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale59.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "41" + "'", str69, "41");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "41" + "'", str72, "41");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "German (Germany)" + "'", str74, "German (Germany)");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = null; // flaky: timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = null; // flaky: timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        timeZone0.setRawOffset((int) 'u');
        timeZone0.setID("2122-02-11T08:00:15.938-01:35");
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours(22);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusMinutes(9);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMillis(582);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        int int30 = localDateTime29.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        int int47 = localDateTime46.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readableDuration49);
        boolean boolean51 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.secondOfMinute();
        org.joda.time.DurationField durationField53 = property52.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime54 = property52.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = property52.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale locale71 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet72);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        java.lang.Object obj79 = null;
        boolean boolean80 = strSet77.remove(obj79);
        boolean boolean81 = strSet77.isEmpty();
        boolean boolean83 = strSet77.add("");
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet77, filteringMode84);
        boolean boolean86 = localDateTime56.equals((java.lang.Object) languageRangeList58);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime56);
        boolean boolean88 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        java.util.Date date89 = localDateTime56.toDate();
        boolean boolean90 = timeZone0.inDaylightTime(date89);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertEquals(locale71.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(date89);
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Fri Feb 11 09:41:21 GMT-01:35 2022");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder38.clearExtensions();
        java.util.Locale.Builder builder40 = builder38.clear();
        java.util.Locale.Builder builder42 = builder38.setLanguageTag("zh");
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder45 = builder42.setLocale(locale44);
        java.lang.String str46 = property7.getAsText(locale44);
        int int47 = property7.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime49 = property7.addWrapFieldToCopy(968);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusMillis(0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = property59.getDifference(readableInstant60);
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        int int67 = property59.getMaximumTextLength(locale65);
        org.joda.time.LocalDateTime localDateTime69 = property59.addToCopy((int) (byte) 100);
        int int70 = localDateTime69.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.dayOfMonth();
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.era();
        org.joda.time.LocalDateTime localDateTime73 = property72.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusSeconds(34529046);
        boolean boolean76 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246075164L + "'", long36 == 4800246075164L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusWeeks(362);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minusMinutes(445);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMinutes(795);
        int int43 = localDateTime40.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        int int33 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        long long70 = dateTime69.getMillis();
        int int71 = property41.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalDateTime localDateTime73 = property41.setCopy(100);
        org.joda.time.LocalDateTime localDateTime74 = property41.roundHalfCeilingCopy();
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        java.lang.String str81 = localDateTime74.toString("12", locale79);
        int int82 = property7.getMaximumTextLength(locale79);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType86 = null;
        boolean boolean87 = localDateTime85.isSupported(durationFieldType86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.yearOfEra();
        org.joda.time.LocalDateTime.Property property89 = localDateTime85.weekOfWeekyear();
        int int90 = property89.getLeapAmount();
        java.util.Locale locale94 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str95 = locale94.getLanguage();
        java.util.Locale.setDefault(locale94);
        int int97 = property89.getMaximumTextLength(locale94);
        java.lang.String str98 = locale79.getDisplayVariant(locale94);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4800246075225L + "'", long70 == 4800246075225L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "12" + "'", str81, "12");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals(locale94.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2122-02-11t09:35:08.397z" + "'", str95, "2122-02-11t09:35:08.397z");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T08:00:15.629-01:35");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T09:36:10.140+00:00:00.032");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = builder0.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder13 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("2021-05-24T08:04:08.541");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2021-05-24T08:04:08.541 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:07.696Z");
        timeZone1.setRawOffset(415);
        int int5 = timeZone1.getOffset((long) 759);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 415 + "'", int5 == 415);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:39:46.764Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:39:46.764z");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("-2122-02-11T09:36:58.015+00:00:00.032", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-2122-02-11t09:36:58.015+00:00:00.032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property12.setCopy(14);
        org.joda.time.LocalDateTime localDateTime16 = property12.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours(432);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusDays(117);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusHours(50);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusHours(22);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) ' ');
        int int33 = localDateTime30.getMinuteOfHour();
        int int34 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime30.getFieldType(0);
        int int37 = localDateTime19.get(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 41 + "'", int33 == 41);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("weekOfWeekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'weekOfWeekyear' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(1393260000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1393260000 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        int[] intArray5 = localDateTime2.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(35);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusHours(78);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDateTime12.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.weekyear();
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, chronology33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, chronology33);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2022, 1, 11, 34875448]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property13.getDifference(readableInstant14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        int int21 = property13.getMaximumTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime23 = property13.addToCopy((int) (byte) 100);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("hi!");
        int int26 = property13.getMaximumShortTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime28 = property13.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField29 = property13.getLeapDurationField();
        java.lang.String str30 = property13.getAsString();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.getCountry();
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale31.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getISO3Country();
        java.lang.String str37 = property13.getAsShortText(locale31);
        java.lang.String str38 = locale31.getCountry();
        java.util.Locale.Builder builder39 = builder5.setLocale(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder39.setScript("2122-02-11T09:39:29.656Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T09:39:29.656Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean24 = strSet20.isEmpty();
        boolean boolean26 = strSet20.add("");
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet34.remove(obj36);
        boolean boolean38 = strSet34.isEmpty();
        java.lang.Object[] objArray39 = strSet34.toArray();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet34, filteringMode40);
        org.joda.time.tz.Provider provider42 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider42);
        java.util.Set<java.lang.String> strSet44 = provider42.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet60);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.lang.Object obj67 = null;
        boolean boolean68 = strSet65.remove(obj67);
        boolean boolean69 = strSet65.isEmpty();
        boolean boolean71 = strSet65.add("");
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet65, filteringMode72);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet44, filteringMode72);
        java.util.Iterator<java.lang.String> strItor75 = strSet44.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[, hi!]");
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strItor75);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        boolean boolean8 = strSet3.remove((java.lang.Object) 5);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.minuteOfHour();
        boolean boolean20 = property18.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime21 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = property29.getAsShortText(locale30);
        java.lang.String str32 = property18.getAsText(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet33, filteringMode34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plusMillis(0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime36.minuteOfHour();
        boolean boolean45 = property43.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.weekOfWeekyear();
        boolean boolean49 = strSet33.contains((java.lang.Object) localDateTime46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        int int52 = localDateTime51.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusSeconds((int) (short) -1);
        java.lang.String str55 = localDateTime51.toString();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withYear(362);
        boolean boolean58 = strSet33.equals((java.lang.Object) 362);
        java.util.Date[] dateArray59 = new java.util.Date[] {};
        java.util.Date[] dateArray60 = strSet33.toArray(dateArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date[] dateArray61 = strSet3.toArray(dateArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "41" + "'", str32, "41");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:41:15.599" + "'", str55, "2022-02-11T09:41:15.599");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateArray59);
        org.junit.Assert.assertNotNull(dateArray60);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusHours(0);
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        boolean boolean39 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.secondOfMinute();
        org.joda.time.DurationField durationField41 = property40.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime42 = property40.getLocalDateTime();
        int int43 = localDateTime42.getMonthOfYear();
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(1L, chronology44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(4800245785134L, chronology44);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16, chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField51 = localDateTime49.getField(355);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 355");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str3, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 34583839);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str9 = timeZone8.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT+00:00" + "'", str9, "GMT+00:00");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:39:36.729", "2122-02-11T09:40:34.158Z", "44");
        java.lang.String str4 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:39:36.729_2122-02-11T09:40:34.158Z_44");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11t09:39:36.729_2122-02-11T09:40:34.158Z_44" + "'", str4, "2022-02-11t09:39:36.729_2122-02-11T09:40:34.158Z_44");
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        boolean boolean2 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        java.time.ZoneId zoneId4 = null; // flaky: timeZone0.toZoneId();
        java.util.TimeZone timeZone5 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId4);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category8, locale9);
        java.lang.String str11 = locale9.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = null; // flaky: timeZone5.getDisplayName(false, 153, locale9);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 153");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(zoneId4);
// flaky:         org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property7.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        long long24 = dateTime23.getMillis();
        org.joda.time.Instant instant25 = dateTime23.toInstant();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        boolean boolean43 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        int int44 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        java.util.Locale locale46 = null;
        int int47 = property45.getMaximumTextLength(locale46);
        java.lang.String str48 = property45.getAsString();
        int int49 = property45.get();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withSecondOfMinute((int) (byte) 10);
        int int59 = localDateTime56.getDayOfYear();
        int int60 = property45.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTime dateTime61 = localDateTime56.toDateTime();
        org.joda.time.Instant instant62 = dateTime61.toInstant();
        boolean boolean63 = instant25.isBefore((org.joda.time.ReadableInstant) instant62);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800246075719L + "'", long24 == 4800246075719L);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 42 + "'", int59 == 42);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(308, (int) (short) 0);
        long long5 = dateTimeZone2.adjustOffset((long) 78, false);
        long long9 = dateTimeZone2.convertLocalToUTC(42L, false, 4800245881787L);
        java.lang.String str11 = dateTimeZone2.getShortName((long) 270);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long18 = fixedDateTimeZone16.nextTransition((long) (byte) 100);
        int int20 = fixedDateTimeZone16.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone21 = fixedDateTimeZone16.toTimeZone();
        int int23 = fixedDateTimeZone16.getOffsetFromLocal(3576983560L);
        long long25 = dateTimeZone2.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone16, (long) 829);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 78L + "'", long5 == 78L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1108799958L) + "'", long9 == (-1108799958L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+308:00" + "'", str11, "+308:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1108800823L + "'", long25 == 1108800823L);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes(22);
        boolean boolean19 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.weekyear();
        java.lang.String str21 = property20.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[weekyear]" + "'", str21, "Property[weekyear]");
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMonths(362);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.dayOfWeek();
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        java.lang.String str38 = property37.getAsShortText();
        int int39 = property37.getMaximumValue();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.lang.String str42 = locale28.getDisplayScript(locale40);
        java.util.Locale locale46 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        java.lang.String str47 = locale40.getDisplayLanguage(locale46);
        java.util.Locale locale48 = locale46.stripExtensions();
        java.lang.String str49 = property24.getAsText(locale46);
        int int50 = property24.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "41" + "'", str38, "41");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "41" + "'", str41, "41");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale46.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "German" + "'", str47, "German");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Saturday" + "'", str49, "Saturday");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMonths(1);
        java.lang.String str10 = localDateTime6.toString("2022");
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withWeekyear(5735993);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusWeeks(97);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 899 + "'", int3 == 899);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.weekyear();
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears(362);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        boolean boolean24 = localDateTime18.isSupported(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        int int21 = localDateTime20.getCenturyOfEra();
        int int22 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond(50);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        int int24 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property19.withMinimumValue();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        boolean boolean28 = localDateTime26.isSupported(durationFieldType27);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMillis((int) (byte) 10);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(9);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        boolean boolean68 = localDateTime60.isSupported(dateTimeFieldType67);
        int int69 = dateTime45.get(dateTimeFieldType67);
        int int70 = localDateTime11.get(dateTimeFieldType67);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime11.withPeriodAdded(readablePeriod71, 653);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T09:41:16.018+00:00:00.032" + "'", str46, "2122-02-11T09:41:16.018+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.monthOfYear();
        int int7 = localDateTime4.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDateTime4.getFieldType(132);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 132");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(479);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:36:39.139Z", (double) 34725203);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.4725203E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:37:48.367Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        boolean boolean10 = dateTimeZone2.equals((java.lang.Object) int9);
        long long12 = dateTimeZone2.previousTransition((long) 9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long18 = dateTimeZone14.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        int int20 = dateTimeZone14.getStandardOffset(4800245716316L);
        int int22 = dateTimeZone14.getStandardOffset(0L);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("UTC");
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = dateTimeZone14.getShortName(4800245747930L, locale25);
        int int29 = dateTimeZone14.getOffset(4800245770243L);
        long long31 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 4800245710661L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) "2122-02-11T09:37:48.367Z", dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2122-02-11T09:37:48.367Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:37:48.367z");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4800245707737L + "'", long18 == 4800245707737L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "utc" + "'", str26, "utc");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800245710693L + "'", long31 == 4800245710693L);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(38401316);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(386);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2122-02-11T09:35:43.948Z");
        java.lang.String str12 = property9.getAsShortText(locale11);
        java.util.Locale locale14 = new java.util.Locale("2122-02-11T09:35:35.674Z");
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        java.lang.String str16 = locale11.getCountry();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 165 + "'", int3 == 165);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2074" + "'", str12, "2074");
        org.junit.Assert.assertEquals(locale14.toString(), "2122-02-11t09:35:35.674z");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYear(55);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        int int19 = localDateTime6.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime6.minusMonths(399);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale13.getVariant();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = property24.getAsText(locale27);
        java.lang.String str31 = nameProvider16.getName(locale27, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusMillis(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = property39.getDifference(readableInstant40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        int int47 = property39.getMaximumTextLength(locale45);
        org.joda.time.LocalDateTime localDateTime49 = property39.addToCopy((int) (byte) 100);
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("hi!");
        int int52 = property39.getMaximumShortTextLength(locale51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        int int59 = localDateTime58.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.minuteOfHour();
        java.lang.String str62 = property61.getAsShortText();
        org.joda.time.LocalDateTime localDateTime64 = property61.setCopy("35");
        int int65 = property61.getLeapAmount();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        int int67 = property61.getMaximumShortTextLength(locale66);
        java.lang.String str68 = locale51.getDisplayLanguage(locale66);
        java.lang.String str69 = locale51.toLanguageTag();
        java.lang.String str72 = nameProvider16.getName(locale51, "hi!", "1");
        java.lang.String str73 = locale13.getDisplayScript(locale51);
        java.lang.String str74 = fixedDateTimeZone4.getName((long) 968, locale51);
        long long76 = fixedDateTimeZone4.nextTransition(5700536L);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "41" + "'", str62, "41");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.032" + "'", str74, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 5700536L + "'", long76 == 5700536L);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology15);
        int int19 = localDateTime18.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int18 = fixedDateTimeZone16.getStandardOffset((long) 529);
        long long22 = fixedDateTimeZone16.convertLocalToUTC((long) (-1), false, (long) 100);
        long long24 = fixedDateTimeZone16.previousTransition((long) 'u');
        boolean boolean25 = fixedDateTimeZone16.isFixed();
        org.joda.time.DateTime dateTime26 = localDateTime11.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = dateTimeZone29.getShortName(10L, locale32);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.lang.String str38 = dateTimeZone29.getShortName((long) 116, locale37);
        java.lang.String str40 = dateTimeZone29.getNameKey(4800245732508L);
        boolean boolean41 = fixedDateTimeZone16.equals((java.lang.Object) 4800245732508L);
        int int43 = fixedDateTimeZone16.getOffsetFromLocal((long) 34653444);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-33L) + "'", long22 == (-33L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 117L + "'", long24 == 117L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:35" + "'", str34, "-01:35");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:35" + "'", str38, "-01:35");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.DurationField durationField40 = property7.getLeapDurationField();
        boolean boolean41 = property7.isLeap();
        org.joda.time.LocalDateTime localDateTime42 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246076246L + "'", long36 == 4800246076246L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.getID();
        java.util.TimeZone timeZone18 = fixedDateTimeZone11.toTimeZone();
        long long20 = fixedDateTimeZone11.previousTransition((long) 582);
        long long22 = fixedDateTimeZone11.nextTransition((long) 82894149);
        int int24 = fixedDateTimeZone11.getOffsetFromLocal((long) 34599659);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 582L + "'", long20 == 582L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 82894149L + "'", long22 == 82894149L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.setCopy(78);
        org.joda.time.LocalDateTime localDateTime24 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        java.lang.String str26 = property25.getAsString();
        java.lang.String str27 = property25.getAsShortText();
        org.joda.time.LocalDateTime localDateTime28 = property25.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Thu" + "'", str27, "Thu");
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone2 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone3 = null; // flaky: dateTimeZone2.toTimeZone();
// flaky:         timeZone3.setID("2122-02-11T08:00:14.774-01:35");
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT-01:35");
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        java.lang.String str9 = locale6.getDisplayName();
        java.util.Locale locale13 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        java.util.Locale locale27 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        int int29 = property21.getMaximumTextLength(locale27);
        org.joda.time.LocalDateTime localDateTime31 = property21.addToCopy((int) (byte) 100);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("hi!");
        int int34 = property21.getMaximumShortTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        int int41 = localDateTime40.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        java.lang.String str44 = property43.getAsShortText();
        org.joda.time.LocalDateTime localDateTime46 = property43.setCopy("35");
        int int47 = property43.getLeapAmount();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        int int49 = property43.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale33.getDisplayLanguage(locale48);
        java.lang.String str51 = locale13.getDisplayCountry(locale33);
        java.lang.String str52 = locale6.getDisplayName(locale13);
        java.lang.String str53 = locale0.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet54 = locale0.getUnicodeLocaleAttributes();
        strSet54.clear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        int int58 = localDateTime57.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.centuryOfEra();
        int int62 = localDateTime60.getYearOfEra();
        boolean boolean63 = strSet54.equals((java.lang.Object) localDateTime60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "41" + "'", str44, "41");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusDays(538);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.secondOfMinute();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone2 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDateTime localDateTime3 = null; // flaky: org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int4 = 0; // flaky: localDateTime3.getYearOfEra();
        int int5 = 0; // flaky: localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = null; // flaky: localDateTime3.minusHours(661);
        org.joda.time.LocalDateTime localDateTime9 = null; // flaky: localDateTime3.plusMinutes(185);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plus(readablePeriod14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDurationAdded(readableDuration16, 985);
        int int19 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.minusMonths(80700001);
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property5.setCopy(3220);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(0);
        boolean boolean21 = dateTimeZone8.isLocalDateTimeGap(localDateTime18);
        long long25 = dateTimeZone8.convertLocalToUTC((long) 1, true, 100L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getName((long) (byte) 1);
        long long30 = dateTimeZone26.nextTransition((long) 2022);
        java.lang.String str31 = dateTimeZone26.toString();
        long long35 = dateTimeZone26.convertLocalToUTC(1L, false, (long) (byte) 100);
        long long37 = dateTimeZone8.getMillisKeepLocal(dateTimeZone26, (long) 362);
        long long39 = dateTimeZone8.previousTransition((long) 34529046);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int[] intArray42 = localDateTime41.getValues();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.weekOfWeekyear();
        java.util.Locale locale46 = new java.util.Locale("ko", "2122-02-11T09:35:28.534Z");
        boolean boolean47 = locale46.hasExtensions();
        int int48 = property43.getMaximumShortTextLength(locale46);
        java.lang.String str49 = dateTimeZone8.getName(4800245730860L, locale46);
        java.lang.String str50 = property5.getAsText(locale46);
        java.lang.String str51 = locale46.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-31L) + "'", long25 == (-31L));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.032" + "'", str28, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2022L + "'", long30 == 2022L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str31, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-31L) + "'", long35 == (-31L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 362L + "'", long37 == 362L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 34529046L + "'", long39 == 34529046L);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 11, 34876617]");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_2122-02-11T09:35:28.534Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.032" + "'", str49, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "20" + "'", str50, "20");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        long long12 = fixedDateTimeZone4.previousTransition((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone23);
        int int26 = dateTimeZone23.getOffsetFromLocal(100L);
        java.lang.String str27 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        java.lang.String str38 = property37.getAsShortText();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime41 = property37.setCopy("35", locale40);
        org.joda.time.LocalDateTime localDateTime42 = property37.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime43 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        int int51 = localDateTime50.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readableDuration53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.weekyear();
        org.joda.time.Chronology chronology60 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.year();
        int int64 = localDateTime62.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime65.getFieldTypes();
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property69.getFieldType();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime62.withField(dateTimeFieldType70, 13);
        int int73 = localDateTime61.get(dateTimeFieldType70);
        int int74 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.Chronology chronology75 = localDateTime61.getChronology();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime61.minus(readablePeriod76);
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = localDateTime61.toString("+00:00:00.011", locale79);
        java.lang.String str81 = dateTimeZone23.getShortName((long) 524, locale79);
        java.util.TimeZone timeZone82 = dateTimeZone23.toTimeZone();
        long long84 = fixedDateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) 394);
        java.lang.String str85 = dateTimeZone23.getID();
        long long88 = dateTimeZone23.convertLocalToUTC(4800245755637L, false);
        java.util.Locale locale89 = java.util.Locale.ITALIAN;
        java.lang.String str90 = locale89.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet91 = locale89.getUnicodeLocaleKeys();
        boolean boolean92 = dateTimeZone23.equals((java.lang.Object) locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = locale89.getUnicodeLocaleType("2637-02-11T09:40:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2637-02-11T09:40:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "41" + "'", str38, "41");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.011" + "'", str80, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 426L + "'", long84 == 426L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 4800245755637L + "'", long88 == 4800245755637L);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Italienisch" + "'", str90, "Italienisch");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        java.util.Date date8 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 34876751]");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jan 10 09:41:17 GMT-01:35 2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        int int35 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withField(dateTimeFieldType41, 13);
        int int44 = localDateTime32.get(dateTimeFieldType41);
        int int45 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime14.plus(readableDuration46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime14.secondOfMinute();
        int int49 = property48.get();
        int int50 = property48.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245789550L);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours(22);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) ' ');
        int int37 = localDateTime36.getMillisOfSecond();
        boolean boolean38 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime23.getFieldTypes();
        int int40 = localDateTime23.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 800 + "'", int37 == 800);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property30 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime32 = property30.setCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval33 = property30.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra(33);
        int int43 = localDateTime42.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withDayOfWeek((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246076802L + "'", long36 == 4800246076802L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.LocalDateTime localDateTime22 = property19.setCopy("35");
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = property19.getAsText(locale23);
        org.joda.time.LocalDateTime localDateTime26 = property19.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(859);
        boolean boolean29 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.hourOfDay();
        boolean boolean45 = dateTimeZone31.isLocalDateTimeGap(localDateTime43);
        boolean boolean46 = dateTimeZone31.isFixed();
        java.lang.String str48 = dateTimeZone31.getName(39446997010528L);
        long long50 = dateTimeZone31.previousTransition(4800245748547L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) boolean29, dateTimeZone31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "41" + "'", str20, "41");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanisch (Japan)" + "'", str24, "Japanisch (Japan)");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "41" + "'", str25, "41");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.012" + "'", str48, "+00:00:00.012");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 4800245748547L + "'", long50 == 4800245748547L);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension(' ', "Coordinated Universal Time");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis((int) (short) 1);
        int int7 = localDateTime6.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        int int12 = property8.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField13 = property8.getField();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone19 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long21 = fixedDateTimeZone19.previousTransition((long) 9);
        java.util.TimeZone timeZone22 = fixedDateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime14.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone19);
        int int25 = fixedDateTimeZone19.getStandardOffset(0L);
        int int27 = fixedDateTimeZone19.getOffsetFromLocal(4800245865450L);
        long long29 = fixedDateTimeZone19.nextTransition(4800245786612L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9L + "'", long21 == 9L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4800245786612L + "'", long29 == 4800245786612L);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusHours(632);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField25 = localDateTime23.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.era();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withMillisOfSecond(2);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMillisOfDay((int) '4');
        int int31 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property16.getFieldType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime3.withField(dateTimeFieldType32, 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime3.withYear(666);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusYears(748);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 16 + "'", int1 == 16);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        int int43 = property35.getMaximumTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property35.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plusMillis(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfEra();
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = property55.getDifference(readableInstant56);
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        int int63 = property55.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property55.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        boolean boolean68 = dateTime47.isBefore(readableInstant66);
        boolean boolean69 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int70 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long72 = fixedDateTimeZone4.nextTransition(4800245719443L);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.toLanguageTag();
        java.lang.String str76 = fixedDateTimeZone4.getName(4800245783614L, locale74);
        java.util.TimeZone timeZone77 = fixedDateTimeZone4.toTimeZone();
        int int79 = fixedDateTimeZone4.getStandardOffset((long) (short) 10);
        java.util.TimeZone timeZone80 = fixedDateTimeZone4.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = timeZone80.getDisplayName(false, 433);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 433");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:41:17.016Z" + "'", str27, "2122-02-11T09:41:17.016Z");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 4800245719443L + "'", long72 == 4800245719443L);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "und" + "'", str75, "und");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.032" + "'", str76, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone46);
        boolean boolean50 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.DurationField durationField53 = property51.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246077049L + "'", long36 == 4800246077049L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYearOfEra((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(351);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks(82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withTime(77950143, 844, 0, 34540925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 77950143 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getLanguage();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str46 = locale45.getDisplayScript();
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getLanguage();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale17, locale19, locale20, locale24, locale27, locale29, locale33, locale35, locale40, locale45, locale50, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        boolean boolean57 = strSet15.retainAll((java.util.Collection<java.util.Locale>) localeList55);
        int int58 = strSet15.size();
        strSet15.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italienisch" + "'", str18, "Italienisch");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Italienisch" + "'", str36, "Italienisch");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        int int21 = property7.get();
        java.lang.String str22 = property7.getAsString();
        java.lang.String str23 = property7.getName();
        int int24 = property7.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "yearOfEra" + "'", str23, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale.Builder builder16 = builder12.setLanguageTag("zh");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = fixedDateTimeZone4.getShortName(4800245729932L, locale17);
        long long20 = fixedDateTimeZone4.nextTransition(4800245708295L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.minuteOfHour();
        boolean boolean42 = property40.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime44.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.minusDays(292278993);
        boolean boolean50 = localDateTime43.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        int int51 = localDateTime43.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.minusMinutes(4);
        boolean boolean55 = fixedDateTimeZone4.equals((java.lang.Object) 4);
        int int57 = fixedDateTimeZone4.getOffset((long) 748);
        long long59 = fixedDateTimeZone4.previousTransition(764L);
        int int61 = fixedDateTimeZone4.getOffsetFromLocal(4800245791481L);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale locale67 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        boolean boolean70 = strSet68.equals((java.lang.Object) locale69);
        java.util.Locale.Builder builder71 = builder63.setLocale(locale69);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale72.getDisplayVariant();
        java.util.Locale.Builder builder74 = builder63.setLocale(locale72);
        java.util.Locale.Builder builder75 = builder74.clear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.plusMillis(0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.yearOfEra();
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.lang.String str85 = locale84.getDisplayLanguage();
        java.lang.String str86 = locale84.getVariant();
        java.lang.String str87 = property83.getAsShortText(locale84);
        java.util.Locale.Builder builder88 = builder74.setLocale(locale84);
        java.lang.String str89 = fixedDateTimeZone4.getName(4800245762562L, locale84);
        java.lang.String str90 = locale84.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245708295L + "'", long20 == 4800245708295L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 764L + "'", long59 == 764L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "italien" + "'", str85, "italien");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022" + "'", str87, "2022");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00:00.032" + "'", str89, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(529);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        int int4 = localDateTime2.getSecondOfMinute();
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        int int7 = timeZone6.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime10 = null; // flaky: org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int12 = 0; // flaky: dateTimeZone9.getStandardOffset(34599418L);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (-69L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 17 + "'", int4 == 17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-5700000) + "'", int12 == (-5700000));
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1910099931L + "'", long14 == 1910099931L);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        int int5 = localDateTime1.getMillisOfSecond();
        int int6 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusHours(9);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        boolean boolean29 = localDateTime21.isSupported(dateTimeFieldType28);
        boolean boolean30 = localDateTime1.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime1.dayOfWeek();
        int int32 = property31.getMinimumValue();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("2022-02-14T00:00:00.000");
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 289 + "'", int5 == 289);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Fri" + "'", str35, "Fri");
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        org.joda.time.Chronology chronology91 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(chronology91);
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(chronology91);
        int int94 = localDateTime93.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray95 = localDateTime93.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime97 = localDateTime93.minusMillis(292278993);
        int int98 = localDateTime93.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:41:17.372Z" + "'", str20, "2122-02-11T09:41:17.372Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray95);
        org.junit.Assert.assertNotNull(localDateTime97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 372 + "'", int98 == 372);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMinutes(791);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withYearOfCentury(843);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 843 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2022-02-11T09:39:07.796", "2122-02-11T09:38:31.323Z", 647, 105);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(789, 876608, 665, 2122, 34711614);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2122 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:36:10.140+00:00:00.032", "2122-02-11T09:41:10.587Z", "2122-02-11T09:37:19.287Z");
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t09:36:10.140+00:00:00.032_2122-02-11T09:41:10.587Z_2122-02-11T09:37:19.287Z");
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMillis((int) (byte) 10);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = localDateTime4.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks(764);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.monthOfYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.withYearOfEra((int) '4');
        boolean boolean53 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withPeriodAdded(readablePeriod54, 272);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withMillisOfSecond(569);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int11 = fixedDateTimeZone4.getOffsetFromLocal(3576983560L);
        long long13 = fixedDateTimeZone4.previousTransition(4800245707161L);
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4800245707161L + "'", long13 == 4800245707161L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        int int12 = fixedDateTimeZone4.getOffset((long) ' ');
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId15 = null; // flaky: timeZone14.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId17 = null; // flaky: timeZone16.toZoneId();
        boolean boolean18 = timeZone14.hasSameRules(timeZone16);
        boolean boolean19 = timeZone13.hasSameRules(timeZone16);
        java.time.ZoneId zoneId20 = null; // flaky: timeZone13.toZoneId();
        java.util.TimeZone timeZone21 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone22 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId20);
        boolean boolean23 = false; // flaky: timeZone22.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone22);
        boolean boolean25 = fixedDateTimeZone4.equals((java.lang.Object) timeZone22);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId27 = timeZone26.toZoneId();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId29 = timeZone28.toZoneId();
        boolean boolean30 = timeZone26.hasSameRules(timeZone28);
        boolean boolean31 = false; // flaky: timeZone22.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone22);
// flaky:         timeZone22.setID("2022-02-11T09:36:53.760");
        java.lang.Object obj35 = null; // flaky: timeZone22.clone();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertNotNull(zoneId20);
// flaky:         org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:35");
// flaky:         org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "sun.util.calendar.ZoneInfo[id=\"2022-02-11T09:36:53.760\",offset=-5700000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "sun.util.calendar.ZoneInfo[id=\"2022-02-11T09:36:53.760\",offset=-5700000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "sun.util.calendar.ZoneInfo[id=\"2022-02-11T09:36:53.760\",offset=-5700000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        java.lang.String str6 = dateTimeZone0.getName((long) 34520736, locale5);
        long long9 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        boolean boolean50 = dateTime29.isBefore(readableInstant48);
        org.joda.time.Instant instant51 = dateTime29.toInstant();
        java.lang.String str52 = dateTime29.toString();
        int int53 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str54 = dateTime29.toString();
        java.lang.String str55 = dateTime29.toString();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        int int62 = localDateTime61.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withFields((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime71.toDateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime76.getZone();
        boolean boolean79 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Instant instant80 = dateTime29.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2122-02-11T09:41:17.551Z" + "'", str52, "2122-02-11T09:41:17.551Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2122-02-11T09:41:17.551Z" + "'", str54, "2122-02-11T09:41:17.551Z");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2122-02-11T09:41:17.551Z" + "'", str55, "2122-02-11T09:41:17.551Z");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-10T01:41:17.001Z" + "'", str77, "2022-02-10T01:41:17.001Z");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant80);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        int int9 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.minusMonths(9);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.minusSeconds(7);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.plusWeeks(52);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plusDays(844);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.minusYears(35);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 41 + "'", int9 == 41);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekyear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 627 + "'", int3 == 627);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        int int16 = property13.getMaximumValueOverall();
        java.util.Locale locale19 = new java.util.Locale("2022");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.util.Locale locale22 = new java.util.Locale("34620000");
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = property13.setCopy("zh", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zh\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertEquals(locale19.toString(), "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale22.toString(), "34620000");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("Deutsch (Deutschland)", "2122-02-11T09:37:21.400Z", 2023, 34804761);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withCenturyOfEra(0);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0);
        int int13 = localDateTime12.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfCentury((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withDayOfMonth(981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 981 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 'a');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        boolean boolean21 = localDateTime1.equals((java.lang.Object) localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        int int24 = dateTimeZone22.getOffset((long) 10);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        long long46 = dateTime45.getMillis();
        int int47 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plusMillis(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfEra();
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = property55.getDifference(readableInstant56);
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        int int63 = property55.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property55.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        int int75 = localDateTime74.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withFields((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readableDuration77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.minusHours(9);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property88.getFieldType();
        boolean boolean90 = localDateTime82.isSupported(dateTimeFieldType89);
        int int91 = dateTime67.get(dateTimeFieldType89);
        boolean boolean92 = dateTime45.isSupported(dateTimeFieldType89);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime18.withField(dateTimeFieldType89, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.minusMonths(34565127);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = localDateTime96.withEra((-798861));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -798861 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4800246077685L + "'", long46 == 4800246077685L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2122-02-11T09:41:17.685Z" + "'", str68, "2122-02-11T09:41:17.685Z");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 22 + "'", int91 == 22);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int int16 = localDateTime15.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfDay(0);
        boolean boolean22 = fixedDateTimeZone4.equals((java.lang.Object) 0);
        int int24 = fixedDateTimeZone4.getOffset(4800245717934L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone4.toTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone25);
        int int28 = timeZone25.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'italiano' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        int int20 = localDateTime17.getDayOfYear();
        int int21 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekOfWeekyear();
        long long24 = property23.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 207677731L + "'", long24 == 207677731L);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(1987);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str16 = dateTimeZone15.toString();
        boolean boolean17 = dateTimeZone15.isFixed();
        boolean boolean18 = localDateTime8.equals((java.lang.Object) dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime8.monthOfYear();
        int int20 = localDateTime8.getCenturyOfEra();
        int int21 = localDateTime8.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:35" + "'", str16, "-01:35");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        java.lang.String str14 = property8.getAsShortText();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str18 = property8.getAsText(locale16);
        java.lang.String str19 = locale16.getLanguage();
        java.lang.String str20 = locale16.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = locale16.getDisplayLanguage(locale21);
        java.lang.String str25 = locale21.getDisplayLanguage();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "41" + "'", str14, "41");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "41" + "'", str18, "41");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de-DE" + "'", str20, "de-DE");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinesisch" + "'", str25, "Chinesisch");
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        int int15 = timeZone13.getRawOffset();
        timeZone13.setID("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = timeZone13.getDisplayName(true, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 51");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.setExtension('4', "2122-02-11T09:37:48.571Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        int int21 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusDays(301);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.monthOfYear();
        int int25 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.minusWeeks(98);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2122 + "'", int21 == 2122);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("2122-02-11T09:35:32.577Z");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2122-02-11T09:35:30.958Z");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("ko");
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("2122-02-11t09:35:07.818z (Property[yearOfEra])");
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet18 = locale16.getExtensionKeys();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale16);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str24 = nameProvider20.getName(locale21, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str31 = nameProvider20.getShortName(locale28, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str36 = nameProvider20.getName(locale32, "yearOfCentury", "2122-02-11T09:36:22.838Z");
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = property44.getDifference(readableInstant45);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        int int52 = property44.getMaximumTextLength(locale50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusMillis(0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfEra();
        org.joda.time.ReadableInstant readableInstant61 = null;
        int int62 = property60.getDifference(readableInstant61);
        java.util.Locale locale66 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        int int68 = property60.getMaximumTextLength(locale66);
        org.joda.time.LocalDateTime localDateTime70 = property60.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        long long73 = dateTime72.getMillis();
        int int74 = property44.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalDateTime localDateTime76 = property44.setCopy(100);
        org.joda.time.DurationField durationField77 = property44.getLeapDurationField();
        int int78 = property44.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime80 = property44.addToCopy((int) (byte) -1);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        int int82 = property44.getMaximumTextLength(locale81);
        java.lang.String str83 = locale81.getDisplayVariant();
        java.lang.String str86 = nameProvider20.getShortName(locale81, "2022-02-11T09:36:11.480", "2122-02-11T09:35:26.387Z");
        java.util.Locale.Builder builder87 = builder12.setLocale(locale81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strSet11.remove((java.lang.Object) locale81);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800246077831L + "'", long73 == 4800246077831L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNull(durationField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusSeconds((-798211));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusWeeks(466);
        int int13 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusMinutes(39);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34877854 + "'", int8 == 34877854);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(4, 34585323, 548, 782, (-798181), 2121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 782 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.millisOfSecond();
        int int6 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 34877939]");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-01-11T09:39:52.958");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-11t09:39:52.958");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        int int11 = fixedDateTimeZone4.getStandardOffset((long) 442);
        long long15 = fixedDateTimeZone4.convertLocalToUTC(4800245784664L, true, 4800245856670L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4800245784658L + "'", long15 == 4800245784658L);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("", "zh-CN", 948, 43);
        java.lang.String str5 = fixedDateTimeZone4.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(191, 794, 719, 139, 784, 838, 34811686, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 139 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMonths(839);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusSeconds(620);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 61 + "'", int3 == 61);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245739319L);
        boolean boolean25 = fixedDateTimeZone18.isFixed();
        long long27 = fixedDateTimeZone18.previousTransition(4800245865349L);
        java.util.TimeZone timeZone28 = fixedDateTimeZone18.toTimeZone();
        int int30 = fixedDateTimeZone18.getOffset(4800245813000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4800245865349L + "'", long27 == 4800245865349L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        java.lang.String str91 = localDateTime88.toString();
        org.joda.time.LocalDateTime.Property property92 = localDateTime88.secondOfMinute();
        org.joda.time.DurationField durationField93 = property92.getDurationField();
        java.lang.String str94 = property92.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:41:18.097Z" + "'", str20, "2122-02-11T09:41:18.097Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2122-02-11T09:41:18.097" + "'", str91, "2122-02-11T09:41:18.097");
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Property[secondOfMinute]" + "'", str94, "Property[secondOfMinute]");
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset(0L, false);
        long long12 = dateTimeZone2.convertUTCToLocal((long) (short) 1);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("2122-02-11T08:00:14.119-01:35");
        boolean boolean15 = dateTimeZone2.equals((java.lang.Object) "2122-02-11T08:00:14.119-01:35");
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property25.getDifference(readableInstant26);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = property25.getAsText(locale28);
        java.lang.String str32 = nameProvider17.getName(locale28, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder33.setExtension('x', "Italian");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder39 = builder33.setLocale(locale38);
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale38.getDisplayLanguage(locale40);
        java.lang.String str45 = nameProvider17.getName(locale38, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        java.lang.String str46 = dateTimeZone2.getShortName(4800245710519L, locale38);
        java.util.TimeZone timeZone47 = dateTimeZone2.toTimeZone();
        int int49 = timeZone47.getOffset(4800245948058L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-5699999L) + "'", long12 == (-5699999L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-01:35" + "'", str46, "-01:35");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-5700000) + "'", int49 == (-5700000));
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str10 = locale5.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getVariant();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = property20.getAsText(locale23);
        java.lang.String str27 = nameProvider12.getName(locale23, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        int int43 = property35.getMaximumTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property35.addToCopy((int) (byte) 100);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("hi!");
        int int48 = property35.getMaximumShortTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.minuteOfHour();
        java.lang.String str58 = property57.getAsShortText();
        org.joda.time.LocalDateTime localDateTime60 = property57.setCopy("35");
        int int61 = property57.getLeapAmount();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        int int63 = property57.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale47.getDisplayLanguage(locale62);
        java.lang.String str65 = locale47.toLanguageTag();
        java.lang.String str68 = nameProvider12.getName(locale47, "hi!", "1");
        java.lang.String str69 = locale9.getDisplayScript(locale47);
        java.util.Locale.setDefault(category0, locale47);
        java.util.Locale locale71 = java.util.Locale.getDefault(category0);
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("2122-02-11T09:35:43.948Z");
        java.util.Locale.setDefault(category0, locale73);
        java.lang.String str75 = locale73.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "41" + "'", str58, "41");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:36:40.200Z", "2122-02-11T09:38:15.898Z", "2022-02-11T09:39:30.974");
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t09:36:40.200z_2122-02-11T09:38:15.898Z_2022-02-11T09:39:30.974");
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        long long20 = fixedDateTimeZone4.previousTransition(2022L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int22 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMinutes(305);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        int int45 = localDateTime44.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        boolean boolean49 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime38.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        int int58 = localDateTime57.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readableDuration60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusHours(9);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property71.getFieldType();
        boolean boolean73 = localDateTime65.isSupported(dateTimeFieldType72);
        boolean boolean74 = localDateTime51.isSupported(dateTimeFieldType72);
        int int75 = localDateTime27.get(dateTimeFieldType72);
        int int76 = dateTime25.get(dateTimeFieldType72);
        int int77 = localDateTime21.get(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2022L + "'", long20 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 34878225 + "'", int22 == 34878225);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 70 + "'", int75 == 70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = property26.getAsText(locale29);
        java.lang.String str31 = property18.getAsShortText(locale29);
        java.lang.String str32 = property18.toString();
        java.lang.String str33 = property18.getName();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.weekyear();
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        int int53 = localDateTime51.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localDateTime54.getFieldTypes();
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withField(dateTimeFieldType59, 13);
        int int62 = localDateTime50.get(dateTimeFieldType59);
        int int63 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime64 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime65 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "18" + "'", str31, "18");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[secondOfMinute]" + "'", str32, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 18 + "'", int53 == 18);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.lang.String str27 = dateTime26.toString();
        java.lang.String str28 = dateTime26.toString();
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = property37.getAsText(locale40);
        java.lang.String str44 = nameProvider29.getName(locale40, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder45.setExtension('x', "Italian");
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder51 = builder45.setLocale(locale50);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getCountry();
        java.lang.String str54 = locale50.getDisplayLanguage(locale52);
        java.lang.String str57 = nameProvider29.getName(locale50, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        boolean boolean58 = dateTime26.equals((java.lang.Object) nameProvider29);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.weekyear();
        org.joda.time.Chronology chronology74 = localDateTime70.getChronology();
        boolean boolean75 = dateTime26.equals((java.lang.Object) chronology74);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology74);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(435, 34810893, 322, 34829466, 400, 582, 0, chronology74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34829466 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:41:18.302Z" + "'", str27, "2122-02-11T09:41:18.302Z");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:41:18.302Z" + "'", str28, "2122-02-11T09:41:18.302Z");
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getOffset((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        long long29 = fixedDateTimeZone18.convertLocalToUTC(4800245762594L, false, 0L);
        java.lang.String str31 = fixedDateTimeZone18.getNameKey(4800245735651L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4800245762562L + "'", long29 == 4800245762562L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian" + "'", str31, "Italian");
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusWeeks(362);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.minusMinutes(445);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMinutes(795);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withTime(162, 604, 732, 150);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 162 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withYearOfEra(263);
        int int33 = localDateTime28.getWeekyear();
        int int34 = localDateTime28.getYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean36 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime35);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("2122-02-11T09:36:29.975Z");
        boolean boolean39 = fixedDateTimeZone4.equals((java.lang.Object) timeZone38);
        boolean boolean40 = timeZone38.useDaylightTime();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime8.isSupported(durationFieldType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        int int15 = localDateTime8.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withMillisOfDay(21);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(272);
        long long5 = dateTimeZone1.convertLocalToUTC(3576983587L, false, (long) 72);
        java.lang.String str7 = dateTimeZone1.getShortName(4800245859875L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        long long30 = dateTime29.getMillis();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusMillis(0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = property59.getDifference(readableInstant60);
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        int int67 = property59.getMaximumTextLength(locale65);
        org.joda.time.LocalDateTime localDateTime69 = property59.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.plusMillis(0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.yearOfEra();
        org.joda.time.ReadableInstant readableInstant80 = null;
        int int81 = property79.getDifference(readableInstant80);
        java.util.Locale locale85 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        int int87 = property79.getMaximumTextLength(locale85);
        org.joda.time.LocalDateTime localDateTime89 = property79.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = localDateTime89.toDateTime(readableInstant90);
        boolean boolean92 = dateTime71.isBefore(readableInstant90);
        boolean boolean93 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Instant instant94 = dateTime71.toInstant();
        boolean boolean95 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime71);
        int int96 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime29);
        int int97 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3576983315L + "'", long5 == 3576983315L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.272" + "'", str7, "+00:00:00.272");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4800246078413L + "'", long30 == 4800246078413L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2122-02-11T09:41:18.413Z" + "'", str51, "2122-02-11T09:41:18.413Z");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals(locale85.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 272 + "'", int97 == 272);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withSecondOfMinute(582);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 582 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder24.setExtension('x', "Italian");
        java.util.Locale locale28 = builder27.build();
        int int29 = property19.getMaximumShortTextLength(locale28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMonths(272);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = localDateTime44.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 838);
        int int51 = localDateTime50.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        int int61 = localDateTime60.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.minusHours(9);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        boolean boolean76 = localDateTime68.isSupported(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime52.withField(dateTimeFieldType75, (int) 'a');
        boolean boolean79 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withDurationAdded(readableDuration80, 20);
        int int83 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.DateTime dateTime84 = localDateTime78.toDateTime();
        int int85 = property19.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDateTime localDateTime86 = property19.withMaximumValue();
        org.joda.time.DurationField durationField87 = property19.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 464 + "'", int51 == 464);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNull(durationField87);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        long long11 = fixedDateTimeZone5.convertLocalToUTC((long) (-1), false, (long) 100);
        long long13 = fixedDateTimeZone5.previousTransition((long) 'u');
        long long15 = fixedDateTimeZone5.convertUTCToLocal((long) 6);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(4800245710519L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long19 = fixedDateTimeZone5.convertLocalToUTC(4800245737790L, false);
        long long23 = fixedDateTimeZone5.convertLocalToUTC(34627079L, false, (long) 955);
        int int25 = fixedDateTimeZone5.getOffset((-1200L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-33L) + "'", long11 == (-33L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 117L + "'", long13 == 117L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 38L + "'", long15 == 38L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4800245737758L + "'", long19 == 4800245737758L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 34627047L + "'", long23 == 34627047L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        java.lang.String str36 = property35.getAsShortText();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime39 = property35.setCopy("35", locale38);
        org.joda.time.LocalDateTime localDateTime40 = property35.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.centuryOfEra();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = property43.roundFloorCopy();
        org.joda.time.DurationField durationField46 = property43.getLeapDurationField();
        boolean boolean47 = strSet20.remove((java.lang.Object) property43);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plusMillis(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfEra();
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = property55.getDifference(readableInstant56);
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        int int63 = property55.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property55.addToCopy((int) (byte) 100);
        int int66 = localDateTime65.getDayOfMonth();
        int int67 = localDateTime65.getMonthOfYear();
        java.util.Locale locale71 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet72.spliterator();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        int int80 = localDateTime79.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withFields((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minus(readableDuration82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime83.minus(readablePeriod88);
        boolean boolean90 = strSet72.equals((java.lang.Object) localDateTime89);
        boolean boolean91 = localDateTime65.isAfter((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime.Property property92 = localDateTime89.dayOfMonth();
        org.joda.time.LocalDateTime.Property property93 = localDateTime89.millisOfDay();
        int int94 = localDateTime89.size();
        org.joda.time.LocalDateTime.Property property95 = localDateTime89.year();
        boolean boolean96 = strSet20.contains((java.lang.Object) property95);
        java.util.Iterator<java.lang.String> strItor97 = strSet20.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "41" + "'", str36, "41");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertEquals(locale71.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strItor97);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long16 = dateTimeZone0.convertUTCToLocal((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) long16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        int[] intArray17 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.plusHours(974);
        int int20 = localDateTime9.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 34878704]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMonths(34522866);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.setCopy(692);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property20 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.DurationField durationField23 = property20.getRangeDurationField();
        org.joda.time.Interval interval24 = property20.toInterval();
        long long25 = property20.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Locale locale5 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getLanguage();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getLanguage();
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale25, locale27, locale28, locale32, locale35, locale37, locale41, locale43, locale48, locale53, locale58, locale61 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        boolean boolean65 = strSet23.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.stream.Stream<java.util.Locale> localeStream77 = localeList74.stream();
        boolean boolean78 = strSet23.containsAll((java.util.Collection<java.util.Locale>) localeList74);
        boolean boolean79 = strSet6.removeAll((java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale locale86 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale86 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList88);
        boolean boolean91 = strSet6.retainAll((java.util.Collection<java.util.Locale>) localeList88);
        int int92 = strSet6.size();
        java.lang.String str93 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italian" + "'", str44, "Italian");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        int int3 = localDateTime0.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minus(readablePeriod4);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 34878796]");
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 41 + "'", int3 == 41);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusHours(9);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        boolean boolean24 = localDateTime16.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime0.withField(dateTimeFieldType23, (int) 'a');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime0.minus(readablePeriod28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime0.withDayOfMonth(424);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 424 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = dateTimeZone19.getName((long) 292278993, locale21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readableDuration36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusHours(9);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime41.isSupported(dateTimeFieldType48);
        boolean boolean50 = localDateTime26.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime26.minusMillis(69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDateTime26.getFieldType(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 17");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("2122-02-11T09:36:07.986Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T09:36:07.986Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        boolean boolean31 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumTextLength(locale34);
        java.lang.String str36 = property33.getAsString();
        int int37 = property33.get();
        org.joda.time.DurationField durationField38 = property33.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property33.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime13.withField(dateTimeFieldType39, 754);
        org.joda.time.LocalDateTime.Property property42 = localDateTime13.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2122-02-11T09:39:35.560Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:39:35.560z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getVariant();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime3.getFieldTypes();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long16 = fixedDateTimeZone14.nextTransition((long) (byte) 100);
        int int18 = fixedDateTimeZone14.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime19 = localDateTime9.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str27 = fixedDateTimeZone25.getNameKey((long) (short) -1);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = fixedDateTimeZone25.getName((-31L), locale29);
        int int32 = fixedDateTimeZone25.getOffset((long) 236);
        long long34 = dateTimeZone20.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone25, (long) 116);
        long long36 = fixedDateTimeZone25.nextTransition(4800245764583L);
        boolean boolean37 = fixedDateTimeZone25.isFixed();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int[] intArray39 = localDateTime38.getValues();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property40.getFieldType();
        java.lang.String str43 = property40.toString();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readableDuration59);
        boolean boolean61 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        int int62 = localDateTime60.getYearOfEra();
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        java.lang.String str66 = property63.getAsString();
        int int67 = property63.get();
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder68.setExtension('x', "Italian");
        java.util.Locale locale72 = builder71.build();
        int int73 = property63.getMaximumShortTextLength(locale72);
        int int74 = property40.getMaximumTextLength(locale72);
        java.lang.String str75 = locale72.getDisplayScript();
        java.util.Locale locale78 = new java.util.Locale("34750303", "2122-02-11T09:38:20.057Z");
        java.lang.String str79 = locale72.getDisplayLanguage(locale78);
        java.util.Locale.setDefault(locale72);
        boolean boolean81 = fixedDateTimeZone25.equals((java.lang.Object) locale72);
        java.lang.String str82 = locale0.getDisplayLanguage(locale72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.032" + "'", str30, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 90L + "'", long34 == 90L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800245764583L + "'", long36 == 4800245764583L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2022, 2, 11, 34878876]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[weekOfWeekyear]" + "'", str43, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals(locale78.toString(), "34750303_2122-02-11T09:38:20.057Z");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Italian" + "'", str82, "Italian");
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setLanguageTag("zh");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        java.lang.String str17 = locale7.getDisplayCountry(locale15);
        java.lang.String str18 = locale7.toLanguageTag();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        boolean boolean27 = strSet25.equals((java.lang.Object) locale26);
        java.util.Locale.Builder builder28 = builder20.setLocale(locale26);
        java.lang.String str29 = locale7.getDisplayCountry(locale26);
        java.lang.String str30 = locale26.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.DurationField durationField13 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int14 = localDateTime10.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long24 = fixedDateTimeZone21.convertLocalToUTC((long) (-798211), true);
        long long26 = fixedDateTimeZone21.previousTransition(2022L);
        org.joda.time.DateTime dateTime27 = localDateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:41:18.941" + "'", str16, "2022-02-11T09:41:18.941");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-798217L) + "'", long24 == (-798217L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2022L + "'", long26 == 2022L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekOfWeekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Collection<java.util.Locale> localeCollection29 = null;
        java.util.Locale locale30 = java.util.Locale.lookup(languageRangeList28, localeCollection29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        int int47 = property45.getMinimumValue();
        int int48 = property45.getMaximumValue();
        java.util.Locale locale50 = new java.util.Locale("2022");
        java.lang.String str51 = property45.getAsShortText(locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str54 = java.util.Locale.lookupTag(languageRangeList36, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList56, strMap57);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 59 + "'", int48 == 59);
        org.junit.Assert.assertEquals(locale50.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "41" + "'", str51, "41");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusDays(20);
        org.joda.time.DurationFieldType durationFieldType16 = null;
        boolean boolean17 = localDateTime15.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.era();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("japonais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("2122-02-11T09:35:51.696Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:35:51.696Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("secondOfMinute", "2122-02-11T09:35:10.520Z", 21, 93);
        long long6 = fixedDateTimeZone4.previousTransition(4800245744808L);
        boolean boolean7 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4800245744808L + "'", long6 == 4800245744808L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        int int10 = fixedDateTimeZone4.getStandardOffset(4800245725694L);
        java.lang.String str12 = fixedDateTimeZone4.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.setCopy(53);
        boolean boolean28 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plus(readableDuration29);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy(1);
        int int23 = localDateTime22.getDayOfYear();
        org.joda.time.Chronology chronology24 = localDateTime22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26 + "'", int23 == 26);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        long long11 = fixedDateTimeZone5.convertLocalToUTC((long) (-1), false, (long) 100);
        boolean boolean12 = fixedDateTimeZone5.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 108, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int14 = localDateTime13.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-33L) + "'", long11 == (-33L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("9");
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours(660);
        int int15 = localDateTime14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) ' ');
        boolean boolean23 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis(34520736);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime27.getFieldTypes();
        org.joda.time.Chronology chronology29 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(82894149, 700, 34520736, 34857586, 34870554, (-798861), 795, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34857586 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int13 = fixedDateTimeZone11.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone11.previousTransition((long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = fixedDateTimeZone11.getName(4800245729437L, locale17);
        boolean boolean20 = property6.equals((java.lang.Object) fixedDateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        java.lang.String str23 = property22.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "dayOfMonth" + "'", str23, "dayOfMonth");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minus(readableDuration36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.monthOfYear();
        int int39 = property38.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('x', "Italian");
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getCountry();
        java.lang.String str25 = locale21.getDisplayLanguage(locale23);
        java.lang.String str28 = nameProvider0.getName(locale21, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusMillis(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = property39.getDifference(readableInstant40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        int int47 = property39.getMaximumTextLength(locale45);
        java.lang.String str48 = property39.toString();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.getVariant();
        int int52 = property39.getMaximumShortTextLength(locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray54 = strSet53.toArray();
        org.joda.time.tz.NameProvider nameProvider55 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider55);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider55);
        boolean boolean58 = strSet53.contains((java.lang.Object) nameProvider55);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider55);
        java.util.Locale locale60 = java.util.Locale.PRC;
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale.setDefault(locale60);
        java.lang.String str65 = nameProvider55.getShortName(locale60, "2122-02-11T08:00:16.821-01:35", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str66 = dateTimeZone30.getName((long) 258, locale60);
        java.lang.String str69 = nameProvider0.getShortName(locale60, "2122-02-11T09:35:40.817Z", "Februar");
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category70, locale71);
        java.util.Locale locale73 = java.util.Locale.getDefault(category70);
        java.util.Locale locale74 = java.util.Locale.getDefault(category70);
        java.lang.String str77 = nameProvider0.getName(locale74, "2122-02-11T09:37:53.897Z", "2122-02-11T09:35:24.707Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[yearOfEra]" + "'", str48, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str50, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(nameProvider55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.009" + "'", str66, "+00:00:00.009");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category70.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        int int15 = localDateTime10.getEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusSeconds(34561314);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.plusMinutes(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.minusMillis(8);
        org.joda.time.LocalDateTime.Property property22 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("hi!");
        int int43 = property30.getMaximumShortTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime45 = property30.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField46 = property30.getLeapDurationField();
        java.lang.String str47 = property30.getAsString();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getScript();
        java.lang.String str50 = locale48.getCountry();
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale48.getDisplayScript(locale51);
        java.lang.String str53 = locale48.getISO3Country();
        java.lang.String str54 = property30.getAsShortText(locale48);
        java.lang.String str55 = locale48.getCountry();
        int int56 = property22.getMaximumShortTextLength(locale48);
        java.lang.String str57 = locale48.getScript();
        java.lang.Object obj58 = locale48.clone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        strSet1.clear();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.previousTransition(4800245735513L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str15 = fixedDateTimeZone4.getNameKey(4800246041746L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735513L + "'", long11 == 4800245735513L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str15, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withYear(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime36.toString(dateTimeFormatter37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusMonths(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0035-02-11T09:41:19.459" + "'", str38, "0035-02-11T09:41:19.459");
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:35.674Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.Object obj3 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String[] strArray1 = java.util.Locale.getISOLanguages();
        java.io.Serializable[] serializableArray2 = strSet0.toArray((java.io.Serializable[]) strArray1);
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        boolean boolean5 = strSet0.equals((java.lang.Object) "zh-CN");
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet0.spliterator();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        long long43 = dateTime42.getMillis();
        int int44 = property14.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime46 = property14.setCopy(100);
        org.joda.time.LocalDateTime localDateTime47 = property14.roundHalfCeilingCopy();
        java.util.Date date48 = localDateTime47.toDate();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.fromDateFields(date48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.fromDateFields(date48);
        int int51 = localDateTime50.size();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusWeeks(68);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusWeeks(571);
        boolean boolean56 = strSet0.equals((java.lang.Object) localDateTime55);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(serializableArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4800246079524L + "'", long43 == 4800246079524L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(464, 61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 61");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale4);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str12 = nameProvider8.getName(locale9, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale16 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str19 = nameProvider8.getShortName(locale16, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str24 = nameProvider8.getName(locale20, "yearOfCentury", "2122-02-11T09:36:22.838Z");
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        long long61 = dateTime60.getMillis();
        int int62 = property32.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime64 = property32.setCopy(100);
        org.joda.time.DurationField durationField65 = property32.getLeapDurationField();
        int int66 = property32.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime68 = property32.addToCopy((int) (byte) -1);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        int int70 = property32.getMaximumTextLength(locale69);
        java.lang.String str71 = locale69.getDisplayVariant();
        java.lang.String str74 = nameProvider8.getShortName(locale69, "2022-02-11T09:36:11.480", "2122-02-11T09:35:26.387Z");
        java.util.Locale.Builder builder75 = builder0.setLocale(locale69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder77 = builder75.removeUnicodeLocaleAttribute("2022-01-10T09:38:10.729");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-01-10T09:38:10.729 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals(locale16.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 4800246079565L + "'", long61 == 4800246079565L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNull(durationField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:20.783Z");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long10 = fixedDateTimeZone7.convertLocalToUTC((long) (-798211), true);
        long long12 = fixedDateTimeZone7.previousTransition(2022L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone7.toTimeZone();
        java.util.TimeZone timeZone14 = fixedDateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.util.TimeZone timeZone19 = dateTimeZone17.toTimeZone();
        java.time.ZoneId zoneId20 = timeZone19.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId20);
        boolean boolean25 = timeZone14.hasSameRules(timeZone24);
        int int26 = timeZone24.getRawOffset();
        int int28 = timeZone24.getOffset(4800245969811L);
        boolean boolean29 = timeZone1.hasSameRules(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-798217L) + "'", long10 == (-798217L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-5700000) + "'", int26 == (-5700000));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-5700000) + "'", int28 == (-5700000));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        long long20 = fixedDateTimeZone4.nextTransition(4800245859173L);
        int int22 = fixedDateTimeZone4.getOffset(4800245822474L);
        java.util.TimeZone timeZone23 = fixedDateTimeZone4.toTimeZone();
        java.util.Locale locale26 = java.util.Locale.PRC;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeZone23.getDisplayName(false, 831, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 831");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245859173L + "'", long20 == 4800245859173L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clearExtensions();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.LocalDateTime localDateTime22 = property19.setCopy("35");
        int int23 = property19.getLeapAmount();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        int int25 = property19.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale24.getISO3Country();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.minuteOfHour();
        boolean boolean36 = property34.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime37 = property34.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusMillis(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = property45.getAsShortText(locale46);
        java.lang.String str48 = property34.getAsText(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale24.getDisplayVariant(locale46);
        java.util.Locale.Builder builder51 = builder8.setLocale(locale24);
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder52.setVariant("+524:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: +524:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "41" + "'", str20, "41");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "41" + "'", str48, "41");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        java.util.Locale locale27 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        int int29 = property21.getMaximumTextLength(locale27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        long long50 = dateTime49.getMillis();
        int int51 = property21.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime53 = property21.setCopy(100);
        org.joda.time.DurationField durationField54 = property21.getLeapDurationField();
        java.lang.String str55 = property21.getAsText();
        long long56 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime57 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField58 = property21.getField();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale59.getCountry();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        int int74 = localDateTime73.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readableDuration76);
        boolean boolean78 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.plusMillis(0);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.yearOfEra();
        org.joda.time.ReadableInstant readableInstant88 = null;
        int int89 = property87.getDifference(readableInstant88);
        java.util.Locale locale90 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str91 = property87.getAsText(locale90);
        java.lang.String str92 = property79.getAsShortText(locale90);
        java.lang.String str93 = locale59.getDisplayScript(locale90);
        java.lang.String str94 = locale90.toLanguageTag();
        int int95 = property21.getMaximumShortTextLength(locale90);
        java.lang.String str96 = locale10.getDisplayVariant(locale90);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 4800246079664L + "'", long50 == 4800246079664L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3577279664L + "'", long56 == 3577279664L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022" + "'", str91, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "19" + "'", str92, "19");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fr-CA" + "'", str94, "fr-CA");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.toLanguageTag();
        java.lang.String str56 = nameProvider0.getName(locale35, "hi!", "1");
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str62 = nameProvider0.getShortName(locale58, "2122-02-11T08:00:14.774-01:35", "2122-02-11T08:00:16.405-01:35");
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusMillis(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        org.joda.time.ReadableInstant readableInstant71 = null;
        int int72 = property70.getDifference(readableInstant71);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str74 = property70.getAsText(locale73);
        java.lang.String str75 = locale73.getVariant();
        java.lang.String str78 = nameProvider0.getShortName(locale73, "6", "2122-02-11T08:01:14.814-01:35");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "41" + "'", str46, "41");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022" + "'", str74, "2022");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusHours(9);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        boolean boolean42 = localDateTime34.isSupported(dateTimeFieldType41);
        int int43 = dateTime19.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.monthOfYear();
        boolean boolean53 = dateTime19.equals((java.lang.Object) localDateTime48);
        java.util.Date date54 = localDateTime48.toDate();
        org.joda.time.LocalDateTime.Property property55 = localDateTime48.dayOfWeek();
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:41:19.726Z" + "'", str20, "2122-02-11T09:41:19.726Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Mon Jan 10 09:41:20 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays(32);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMonths(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(749);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis(77770339);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245714191L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone18.toTimeZone();
        java.lang.String str26 = fixedDateTimeZone18.toString();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int29 = fixedDateTimeZone18.getOffset((long) 28895840);
        long long31 = fixedDateTimeZone18.previousTransition(4800245834085L);
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = property41.getAsText(locale44);
        java.lang.String str48 = nameProvider33.getName(locale44, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider33);
        java.util.Locale locale52 = new java.util.Locale("2022-02-11T09:36:00.000", "");
        java.lang.String str55 = nameProvider33.getName(locale52, "802254-10-26T09:34:03.182", "2122-02-11T09:38:37.752Z");
        java.lang.String str56 = fixedDateTimeZone18.getName((long) 875, locale52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str26, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800245834085L + "'", long31 == 4800245834085L);
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals(locale52.toString(), "2022-02-11t09:36:00.000");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.032" + "'", str56, "+00:00:00.032");
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime13.isSupported(durationFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDayOfYear(762);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 762 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = dateTimeZone15.getShortName(10L, locale18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("hi!");
        int int41 = property28.getMaximumShortTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.LocalDateTime localDateTime53 = property50.setCopy("35");
        int int54 = property50.getLeapAmount();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        int int56 = property50.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale40.getDisplayLanguage(locale55);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.lang.String str59 = locale55.toLanguageTag();
        java.lang.String str60 = locale18.getDisplayLanguage(locale55);
        java.util.Set<java.lang.String> strSet61 = locale55.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet61.spliterator();
        java.lang.String str63 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet61);
        strSet61.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:35" + "'", str20, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "41" + "'", str51, "41");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "it" + "'", str59, "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2122-02-11T09:36:00.828Z");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        strSet6.clear();
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strItor8);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        int int13 = localDateTime12.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime24 = property22.getLocalDateTime();
        int int25 = localDateTime24.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withPeriodAdded(readablePeriod26, 756);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minusSeconds(362);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        int int34 = localDateTime33.getYearOfCentury();
        int int35 = property31.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        int int36 = localDateTime33.getMillisOfSecond();
        boolean boolean37 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime12.plusMinutes(2182826);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 890 + "'", int13 == 890);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 890 + "'", int36 == 890);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(998, 692, 63, 452, 529, 54000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 452 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.year();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        int int15 = property13.getMaximumValue();
        org.joda.time.DurationField durationField16 = property13.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property8.toInterval();
        java.lang.String str16 = property8.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleAttributes();
        int int21 = property8.getMaximumTextLength(locale17);
        int int22 = property8.get();
        org.joda.time.LocalDateTime localDateTime23 = property8.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "41" + "'", str16, "41");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u5fb7\u6587" + "'", str18, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 41 + "'", int22 == 41);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T09:37:45.548Z", "2122-02-11t08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)");
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:37:45.548z_2122-02-11T08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)");
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("18");
        timeZone1.setRawOffset(908);
        timeZone1.setID("21");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(true, 257);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 257");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int10 = timeZone9.getRawOffset();
        java.lang.String str11 = timeZone9.getID();
        int int12 = timeZone9.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = timeZone9.getOffset(34591664, 34794176, 504, 28877285, 639, 463);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 34591664");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str11, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        java.lang.String str12 = fixedDateTimeZone4.getShortName(4800245771295L);
        long long16 = fixedDateTimeZone4.convertLocalToUTC(451L, false, (long) 34570185);
        long long18 = fixedDateTimeZone4.previousTransition(0L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 419L + "'", long16 == 419L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        long long9 = fixedDateTimeZone4.adjustOffset((long) 582, false);
        boolean boolean10 = fixedDateTimeZone4.isFixed();
        int int12 = fixedDateTimeZone4.getStandardOffset(4800246067049L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 582L + "'", long9 == 582L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.convertUTCToLocal((long) 21);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey(4800245796621L);
        java.lang.String str14 = fixedDateTimeZone4.toString();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 27L + "'", long11 == 27L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "italiano" + "'", str14, "italiano");
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        java.lang.Object obj0 = null;
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getOffset(4800245742947L);
        java.lang.String str9 = fixedDateTimeZone5.getNameKey(4800245783541L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(obj0, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(773);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italian" + "'", str9, "Italian");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.year();
        boolean boolean14 = property13.isLeap();
        int int15 = property13.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property13.addToCopy(4800245857283L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4800245857283");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        int int9 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(18);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(5699969L);
        boolean boolean16 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(673);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withSecondOfMinute(116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 41 + "'", int9 == 41);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.DurationField durationField21 = property20.getRangeDurationField();
        int int22 = property20.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime24 = property20.setCopy(13);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        int int26 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfDay(691);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, 42);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean33 = dateTimeZone32.isFixed();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = dateTimeZone32.getShortName(10L, locale35);
        int int38 = dateTimeZone32.getStandardOffset(4800245724023L);
        java.lang.String str40 = dateTimeZone32.getNameKey(4800245713056L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int[] intArray42 = localDateTime41.getValues();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.weekOfWeekyear();
        boolean boolean44 = dateTimeZone32.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withCenturyOfEra(263);
        java.util.Date date47 = localDateTime41.toDate();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusWeeks((-292275054));
        org.joda.time.LocalDateTime.Property property50 = localDateTime41.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        org.joda.time.LocalDateTime.Property property52 = localDateTime28.property(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.032" + "'", str36, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 11, 34880242]");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Fri Feb 11 09:41:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime18 = property8.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusMillis(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = property49.getDifference(readableInstant50);
        java.util.Locale locale55 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        int int57 = property49.getMaximumTextLength(locale55);
        org.joda.time.LocalDateTime localDateTime59 = property49.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        boolean boolean62 = dateTime41.isBefore(readableInstant60);
        boolean boolean63 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology64 = dateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 6, chronology64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology64);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        int int74 = localDateTime73.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readableDuration76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusYears(0);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withDayOfYear((int) (short) 10);
        int int82 = localDateTime77.getWeekyear();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.withYearOfEra(35);
        org.joda.time.LocalDateTime.Property property85 = localDateTime77.monthOfYear();
        int int86 = localDateTime77.getYearOfCentury();
        boolean boolean87 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T09:41:20.286+00:00:00.032" + "'", str21, "2122-02-11T09:41:20.286+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 22 + "'", int86 == 22);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale5 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str6 = locale0.getDisplayName(locale5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        int int27 = property14.getMaximumShortTextLength(locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str29 = locale5.getDisplayScript(locale26);
        java.lang.Object obj30 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale5.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (China)" + "'", str6, "Chinese (China)");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "2122-02-11t09:35:08.397z_UTC_hi!");
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2122-02-11T09:36:42.705Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2122-02-11T09:36:42.705Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = dateTimeZone15.getShortName(10L, locale18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("hi!");
        int int41 = property28.getMaximumShortTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.LocalDateTime localDateTime53 = property50.setCopy("35");
        int int54 = property50.getLeapAmount();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        int int56 = property50.getMaximumShortTextLength(locale55);
        java.lang.String str57 = locale40.getDisplayLanguage(locale55);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.lang.String str59 = locale55.toLanguageTag();
        java.lang.String str60 = locale18.getDisplayLanguage(locale55);
        java.util.Set<java.lang.String> strSet61 = locale55.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet61.spliterator();
        java.lang.String str63 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strSet61);
        boolean boolean64 = strSet61.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = strSet61.add("49");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:35" + "'", str20, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "41" + "'", str51, "41");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "it" + "'", str59, "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusHours(9);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        boolean boolean51 = localDateTime43.isSupported(dateTimeFieldType50);
        int int52 = dateTime28.get(dateTimeFieldType50);
        boolean boolean53 = localDateTime6.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime6.dayOfMonth();
        java.lang.String str55 = property54.getAsString();
        org.joda.time.ReadablePartial readablePartial56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = property54.compareTo(readablePartial56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T09:41:20.557+00:00:00.032" + "'", str29, "2122-02-11T09:41:20.557+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10" + "'", str55, "10");
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        java.lang.String str12 = property7.getAsShortText();
        int int13 = property7.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime14 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        boolean boolean5 = timeZone4.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(11L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(1);
        int int11 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int12 = localDateTime8.getMillisOfSecond();
        java.util.Date date13 = localDateTime8.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date13);
        boolean boolean15 = timeZone4.inDaylightTime(date13);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 595 + "'", int12 == 595);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:41:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(34867996, 801);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 801");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 286);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime.Property property5 = localDateTime1.property(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property18.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet38);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = strSet43.remove(obj45);
        boolean boolean47 = strSet43.isEmpty();
        boolean boolean49 = strSet43.add("");
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet43, filteringMode50);
        boolean boolean52 = localDateTime22.equals((java.lang.Object) languageRangeList24);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator58 = strSet57.spliterator();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.minus(readablePeriod73);
        boolean boolean75 = strSet57.equals((java.lang.Object) localDateTime74);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Iterator<java.lang.String> strItor77 = strSet57.iterator();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strItor77);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime16.minusMinutes(417);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime16.getFieldType(34787508);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34787508");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246080666L + "'", long55 == 4800246080666L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfFloorCopy();
        long long6 = property4.remainder();
        java.util.Locale locale8 = new java.util.Locale("2022-02-11T09:36:03.993");
        int int9 = property4.getMaximumTextLength(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale8.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 34880715L + "'", long6 == 34880715L);
        org.junit.Assert.assertEquals(locale8.toString(), "2022-02-11t09:36:03.993");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfCentury((int) (short) 0);
        boolean boolean40 = fixedDateTimeZone4.equals((java.lang.Object) (short) 0);
        java.lang.String str42 = fixedDateTimeZone4.getNameKey((long) 292278993);
        java.lang.String str43 = fixedDateTimeZone4.toString();
        java.util.TimeZone timeZone44 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str45 = timeZone44.getID();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(11L);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths(1);
        int int51 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        int int52 = localDateTime48.getMillisOfSecond();
        java.util.Date date53 = localDateTime48.toDate();
        boolean boolean54 = timeZone44.inDaylightTime(date53);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str42, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "italiano" + "'", str43, "italiano");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "italiano" + "'", str45, "italiano");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 753 + "'", int52 == 753);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 11 09:41:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(235);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMillis((int) (short) 1);
        int int12 = localDateTime11.getHourOfDay();
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusWeeks(764);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay(60);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2637-02-11T09:39:00.000");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        java.lang.String str3 = property2.getAsText();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2637" + "'", str3, "2637");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245736066L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withSecondOfMinute(58);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.minuteOfHour();
        boolean boolean15 = property13.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(34529046);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = localDateTime16.isSupported(durationFieldType19);
        int int21 = localDateTime16.getCenturyOfEra();
        boolean boolean22 = localDateTime3.equals((java.lang.Object) localDateTime16);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusWeeks(34719543);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusYears(529);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMonthOfYear(1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.era();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusDays(538);
        org.joda.time.DateTime dateTime41 = localDateTime37.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 838);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusHours(9);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = localDateTime26.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime10.withField(dateTimeFieldType33, (int) 'a');
        boolean boolean37 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime36.toString(dateTimeFormatter38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.weekyear();
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology55);
        int int57 = localDateTime56.getMinuteOfHour();
        boolean boolean58 = localDateTime36.isEqual((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 894 + "'", int9 == 894);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2097-02-11T09:41:20.894" + "'", str39, "2097-02-11T09:41:20.894");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 41 + "'", int57 == 41);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(567);
        org.joda.time.LocalDateTime localDateTime40 = property36.setCopy(27);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        int[] intArray16 = localDateTime13.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours(28847909);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.era();
        int int20 = localDateTime18.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 2, 10, 6080980]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 980 + "'", int20 == 980);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekyear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withDurationAdded(readableDuration8, 34591664);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears(397);
        int int18 = localDateTime17.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMinutes(22);
        int int24 = localDateTime20.getMillisOfSecond();
        int int25 = localDateTime20.getMonthOfYear();
        boolean boolean26 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime.Property property28 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36 + "'", int24 == 36);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245715938L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        int[] intArray5 = localDateTime4.getValues();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusYears(35);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        int int16 = localDateTime8.indexOf(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime1.withField(dateTimeFieldType15, 130);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 130 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2022, 2, 11, 34881067]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1987 + "'", int9 == 1987);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 2, 11, 34881067]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.setExtension('a', "JPN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder7.addUnicodeLocaleAttribute("2022-02-11T09:40:05.969");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:40:05.969 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(94, 496);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 496");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(965, 34540925);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 34540925");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = dateTimeZone19.getName((long) 292278993, locale21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.lang.String str37 = property35.getAsShortText(locale36);
        int int38 = property35.getMaximumValueOverall();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = property35.getAsShortText(locale39);
        java.lang.String str42 = property27.getAsShortText(locale39);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = locale43.getExtension('a');
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale50 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale43.getDisplayCountry(locale50);
        java.lang.String str53 = locale39.getDisplayCountry(locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = locale50.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 2022-02-11t09:35:23.304");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.032" + "'", str22, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dec" + "'", str42, "Dec");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertEquals(locale50.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Canada" + "'", str52, "Canada");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(5);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("hi!");
        int int29 = property16.getMaximumShortTextLength(locale28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        java.lang.String str39 = property38.getAsShortText();
        org.joda.time.LocalDateTime localDateTime41 = property38.setCopy("35");
        int int42 = property38.getLeapAmount();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        int int44 = property38.getMaximumShortTextLength(locale43);
        java.lang.String str45 = locale28.getDisplayLanguage(locale43);
        java.util.Locale locale46 = locale43.stripExtensions();
        java.util.Locale.setDefault(locale46);
        java.lang.String str48 = property8.getAsShortText(locale46);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "41" + "'", str39, "41");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "34865169" + "'", str48, "34865169");
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(571, 183);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 183");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet42);
        java.lang.Object[] objArray44 = strSet42.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.stream.Stream<java.util.Locale> localeStream56 = localeList55.stream();
        boolean boolean57 = strSet42.removeAll((java.util.Collection<java.util.Locale>) localeList55);
        boolean boolean58 = strSet42.isEmpty();
        strSet42.clear();
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.util.TimeZone[] timeZoneArray63 = new java.util.TimeZone[] {};
        java.util.TimeZone[] timeZoneArray64 = strSet62.toArray(timeZoneArray63);
        java.lang.Cloneable[] cloneableArray65 = strSet42.toArray((java.lang.Cloneable[]) timeZoneArray64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.minusDays(292278993);
        int int72 = localDateTime71.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.centuryOfEra();
        boolean boolean74 = strSet42.remove((java.lang.Object) property73);
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet42);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(timeZoneArray63);
        org.junit.Assert.assertNotNull(timeZoneArray64);
        org.junit.Assert.assertNotNull(cloneableArray65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 34881209 + "'", int72 == 34881209);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        int int14 = localDateTime10.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMillis(815);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readableDuration19);
        int int21 = localDateTime20.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        int[] intArray16 = localDateTime13.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours(28847909);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime18.toString(dateTimeFormatter19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withDurationAdded(readableDuration21, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withEra(917);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 917 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 2, 10, 6081320]");
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "5313-01-24T06:41:21.320" + "'", str20, "5313-01-24T06:41:21.320");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        boolean boolean2 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(34719543);
        int int7 = timeZone0.getOffset(4800245824639L);
        java.util.Locale locale13 = new java.util.Locale("francese (Canada)", "Property[yearOfEra]", "ita");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("9");
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = timeZone0.getDisplayName(true, 380, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 380");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+09:38");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 34719543 + "'", int7 == 34719543);
        org.junit.Assert.assertEquals(locale13.toString(), "francese (canada)_PROPERTY[YEAROFERA]_ita");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY[YEAROFERA]" + "'", str17, "PROPERTY[YEAROFERA]");
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDurationAdded(readableDuration8, 15);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withSecondOfMinute((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plusYears(304);
        int int15 = localDateTime4.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 34881364]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(16330033, 436, 54, 34703529, 2252, 454, 34724471);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34703529 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long3 = dateTimeZone1.convertUTCToLocal(131L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 201L + "'", long3 == 201L);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.year();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = localDateTime11.isSupported(durationFieldType15);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 'a');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        boolean boolean21 = localDateTime1.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.withWeekyear(901);
        int int24 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.plusDays(779);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.weekyear();
        org.joda.time.DurationField durationField62 = property61.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime63 = property61.roundHalfEvenCopy();
        boolean boolean64 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime63);
        int int65 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = localDateTime1.withDayOfWeek(108);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 108 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNull(durationField62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        int int7 = dateTimeZone1.getStandardOffset(4800245716316L);
        int int9 = dateTimeZone1.getStandardOffset(0L);
        int int11 = dateTimeZone1.getOffset((long) 524);
        java.lang.Object obj12 = null;
        boolean boolean13 = dateTimeZone1.equals(obj12);
        java.lang.String str15 = dateTimeZone1.getName((long) 615);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.lang.String str38 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        int int41 = localDateTime40.getYearOfCentury();
        java.lang.String str42 = localDateTime40.toString();
        org.joda.time.DateTime dateTime43 = localDateTime40.toDateTime();
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        boolean boolean45 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246081525L + "'", long36 == 4800246081525L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2122-02-11T09:41:21.557+00:00:00.032" + "'", str38, "2122-02-11T09:41:21.557+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:41:21.557" + "'", str42, "2022-02-11T09:41:21.557");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        int int19 = property18.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = dateTimeZone23.getShortName(10L, locale26);
        long long31 = dateTimeZone23.adjustOffset((long) 10, false);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYear((int) (byte) 0);
        boolean boolean50 = dateTimeZone23.isLocalDateTimeGap(localDateTime49);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale52.getCountry();
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = dateTimeZone23.getName((long) 53, locale52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = property18.setCopy("en", locale52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399999 + "'", int19 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:35" + "'", str28, "-01:35");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-01:35" + "'", str56, "-01:35");
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        org.joda.time.LocalDateTime localDateTime24 = property21.withMaximumValue();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plus(readablePeriod26);
        int int28 = localDateTime27.getWeekyear();
        boolean boolean29 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.minusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plus(readablePeriod34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale5.getDisplayVariant(locale7);
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale3.getDisplayLanguage(locale10);
        java.lang.String str12 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!_HI!_hi!" + "'", str12, "hi!_HI!_hi!");
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        boolean boolean4 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        java.lang.String str14 = property13.getAsShortText();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime17 = property13.setCopy("35", locale16);
        org.joda.time.LocalDateTime localDateTime18 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = property13.addToCopy(4800245713056L);
        int int21 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime22 = property3.roundHalfCeilingCopy();
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = property32.getAsText(locale35);
        java.lang.String str39 = nameProvider24.getName(locale35, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setExtension('x', "Italian");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder46 = builder40.setLocale(locale45);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getCountry();
        java.lang.String str49 = locale45.getDisplayLanguage(locale47);
        java.lang.String str52 = nameProvider24.getName(locale45, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        java.lang.String str53 = locale45.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = localDateTime22.toString("2122-02-11T09:35:38.405Z", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "41" + "'", str14, "41");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.toString();
        boolean boolean18 = fixedDateTimeZone11.isFixed();
        java.lang.String str20 = fixedDateTimeZone11.getNameKey(4800245718484L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.weekOfWeekyear();
        int int31 = localDateTime25.getMinuteOfHour();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime25.getFields();
        boolean boolean33 = fixedDateTimeZone11.equals((java.lang.Object) localDateTime25);
        java.util.Date date34 = localDateTime25.toDate();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromDateFields(date34);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str20, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 41 + "'", int31 == 41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 10 09:41:22 GMT+09:38 2022");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("\u516c\u5143", "2122-02-11T08:00:15.629-01:35", (int) '#', 386);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone(zoneId11);
        java.lang.String str15 = timeZone14.getID();
        boolean boolean16 = timeZone5.hasSameRules(timeZone14);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = timeZone14.getOffset(611, 34703529, 2417049, 77950143, 292278907, 385);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GMT-01:35" + "'", str15, "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category3, locale4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property13.getDifference(readableInstant14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        int int21 = property13.getMaximumTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime23 = property13.addToCopy((int) (byte) 100);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("hi!");
        int int26 = property13.getMaximumShortTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDateTime localDateTime38 = property35.setCopy("35");
        int int39 = property35.getLeapAmount();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        int int41 = property35.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale25.getDisplayLanguage(locale40);
        java.util.Locale.setDefault(category3, locale25);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str48 = locale47.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.minuteOfHour();
        java.lang.String str58 = property57.getAsShortText();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime61 = property57.setCopy("35", locale60);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale60.getDisplayVariant(locale62);
        java.lang.String str65 = locale47.getDisplayScript(locale60);
        java.util.Locale.setDefault(category3, locale47);
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale67);
        java.lang.String str69 = locale47.getDisplayCountry(locale67);
        java.lang.String str70 = locale0.getDisplayLanguage(locale47);
        java.util.Locale locale72 = new java.util.Locale("2122-02-11T09:35:33.251Z");
        java.lang.String str73 = locale47.getDisplayCountry(locale72);
        java.lang.String str74 = locale47.getDisplayScript();
        boolean boolean75 = locale47.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u671d\u9c9c\u6587" + "'", str2, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "41" + "'", str36, "41");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "41" + "'", str58, "41");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "HI!" + "'", str69, "HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Korean" + "'", str70, "Korean");
        org.junit.Assert.assertEquals(locale72.toString(), "2122-02-11t09:35:33.251z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "HI!" + "'", str73, "HI!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(380, 198);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = dateTimeZone26.getShortName(10L, locale29);
        java.lang.String str32 = locale29.getDisplayName();
        java.util.Set<java.lang.Character> charSet33 = locale29.getExtensionKeys();
        java.lang.String str35 = locale29.getExtension('a');
        java.lang.String str36 = locale29.getDisplayScript();
        java.lang.String str39 = nameProvider0.getShortName(locale29, "secondOfMinute", "GMT+00:00");
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale29.getDisplayName(locale40);
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        boolean boolean44 = strSet42.remove((java.lang.Object) "2122-02-11T09:35:20.903Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:35" + "'", str31, "-01:35");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withCenturyOfEra(0);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date16 = localDateTime12.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -745 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        int int24 = localDateTime23.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("zh");
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder10 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setLanguage("2022-02-11T09:38:53.697");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:38:53.697 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMinutes(9);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(582);
        int int17 = localDateTime14.getCenturyOfEra();
        int int18 = localDateTime14.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        java.lang.String str31 = dateTime30.toString();
        java.lang.String str32 = dateTime30.toString();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = property41.getAsText(locale44);
        java.lang.String str48 = nameProvider33.getName(locale44, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder49.setExtension('x', "Italian");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder55 = builder49.setLocale(locale54);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getCountry();
        java.lang.String str58 = locale54.getDisplayLanguage(locale56);
        java.lang.String str61 = nameProvider33.getName(locale54, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        boolean boolean62 = dateTime30.equals((java.lang.Object) nameProvider33);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        int int69 = localDateTime68.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.weekyear();
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        boolean boolean79 = dateTime30.equals((java.lang.Object) chronology78);
        boolean boolean80 = fixedDateTimeZone4.equals((java.lang.Object) chronology78);
        int int82 = fixedDateTimeZone4.getOffset((long) '#');
        int int84 = fixedDateTimeZone4.getStandardOffset((-33L));
        java.util.Locale locale86 = java.util.Locale.TAIWAN;
        java.lang.String str87 = locale86.getLanguage();
        java.lang.String str88 = fixedDateTimeZone4.getShortName(39446997250161L, locale86);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2122-02-11T09:41:21.868+00:00:00.032" + "'", str31, "2122-02-11T09:41:21.868+00:00:00.032");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11T09:41:21.868+00:00:00.032" + "'", str32, "2122-02-11T09:41:21.868+00:00:00.032");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "zh" + "'", str87, "zh");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.032" + "'", str88, "+00:00:00.032");
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        boolean boolean6 = dateTimeZone2.isStandardOffset(4800245925876L);
        int int8 = dateTimeZone2.getOffset((long) 244);
        long long11 = dateTimeZone2.adjustOffset(4800246069211L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-5700000) + "'", int8 == (-5700000));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800246069211L + "'", long11 == 4800246069211L);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours(22);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) ' ');
        int int37 = localDateTime36.getMillisOfSecond();
        boolean boolean38 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime23.withYearOfCentury(36);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime23.withMillisOfDay(697);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 930 + "'", int37 == 930);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        long long4 = dateTimeZone0.nextTransition((long) 2022);
        java.lang.String str5 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(1L, false, (long) (byte) 100);
        java.lang.String str10 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.convertLocalToUTC((long) 0, false);
        long long15 = dateTimeZone0.convertUTCToLocal(4800245905497L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.032" + "'", str2, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2022L + "'", long4 == 2022L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str5, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-31L) + "'", long9 == (-31L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str10, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-32L) + "'", long13 == (-32L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4800245905529L + "'", long15 == 4800245905529L);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(15);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra((int) 'x');
        int int9 = localDateTime6.size();
        int int10 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        java.lang.String str17 = dateTimeZone11.getName((long) 34520736, locale16);
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime(dateTimeZone11);
        long long21 = dateTimeZone11.adjustOffset(4800245781637L, false);
        long long24 = dateTimeZone11.adjustOffset(4800245747102L, true);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) long24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths(1);
        java.lang.String str33 = localDateTime29.toString("2022");
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime51 = property41.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime29.toDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusMillis(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfEra();
        org.joda.time.ReadableInstant readableInstant64 = null;
        int int65 = property63.getDifference(readableInstant64);
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        int int71 = property63.getMaximumTextLength(locale69);
        org.joda.time.LocalDateTime localDateTime73 = property63.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = dateTimeZone75.getName((long) 292278993, locale77);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = localDateTime73.toDateTime(dateTimeZone75);
        long long81 = dateTime80.getMillis();
        int int82 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime80.getZone();
        int int84 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime80);
        long long88 = dateTimeZone27.convertLocalToUTC(4800245764840L, false, (long) 34703529);
        boolean boolean89 = localDateTime25.equals((java.lang.Object) long88);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4800245781637L + "'", long21 == 4800245781637L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800245747102L + "'", long24 == 4800245747102L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 4800246081932L + "'", long81 == 4800246081932L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 4800245764840L + "'", long88 == 4800245764840L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int11 = localDateTime10.getDayOfYear();
        boolean boolean12 = dateTimeZone4.equals((java.lang.Object) int11);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale55);
        java.lang.String str57 = dateTimeZone4.getShortName((long) 16, locale55);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder60 = builder58.setScript("");
        java.util.Locale.Builder builder62 = builder60.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder64 = builder60.setRegion("Italian (GMT-01:35,2122-02-11T09:35:20.746Z)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italian (GMT-01:35,2122-02-11T09:35:20.746Z) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "41" + "'", str47, "41");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.clear();
        java.util.Locale.Builder builder21 = builder17.setLanguageTag("zh");
        java.util.Locale locale22 = builder17.build();
        java.lang.String str25 = nameProvider0.getShortName(locale22, "12", "2122-02-11T09:35:30.958Z");
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T09:35:34.361Z", "");
        java.lang.String str31 = nameProvider0.getShortName(locale28, "", "2122-02-11T09:36:00.199Z");
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.String str36 = nameProvider0.getShortName(locale33, "inglese", "Francia");
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str41 = nameProvider37.getName(locale38, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale45 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str48 = nameProvider37.getShortName(locale45, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str53 = nameProvider37.getName(locale49, "yearOfCentury", "2122-02-11T09:36:22.838Z");
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str58 = nameProvider54.getName(locale55, "2122-02-11T08:00:12.990-01:35", "");
        java.lang.String str59 = locale55.getDisplayName();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale55.getDisplayCountry(locale60);
        java.lang.String str65 = nameProvider37.getName(locale60, "2022-01-09T11:36:10.663", "2122-02-11T09:35:27.860Z");
        java.lang.String str68 = nameProvider0.getName(locale60, "2122-02-11T08:00:14.648-01:35", "292275055");
        java.lang.String str69 = locale60.getISO3Language();
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale60.getDisplayName(locale70);
        java.lang.String str72 = locale70.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t09:35:34.361z");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals(locale45.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh" + "'", str50, "zh");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "eng" + "'", str69, "eng");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "anglais" + "'", str71, "anglais");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        boolean boolean22 = dateTime19.equals((java.lang.Object) builder21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        boolean boolean40 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime29.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusHours(9);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        boolean boolean64 = localDateTime56.isSupported(dateTimeFieldType63);
        boolean boolean65 = localDateTime42.isSupported(dateTimeFieldType63);
        int int66 = dateTime19.get(dateTimeFieldType63);
        java.lang.String str67 = dateTime19.toString();
        long long68 = dateTime19.getMillis();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2122-02-11T09:41:22.057Z" + "'", str67, "2122-02-11T09:41:22.057Z");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 4800246082057L + "'", long68 == 4800246082057L);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField18 = property7.getDurationField();
        java.lang.String str19 = property7.getName();
        java.lang.String str20 = property7.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        int int23 = localDateTime22.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (short) -1);
        int int26 = localDateTime25.getEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks(230);
        int int29 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime30 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime32 = property7.setCopy(463);
        int int33 = localDateTime32.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfEra" + "'", str19, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 463 + "'", int33 == 463);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese (Japan)" + "'", str1, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("3220-01-10T09:39:10.899-01:35");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getISO3Language();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "France" + "'", str13, "France");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale5.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int int35 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.minuteOfHour();
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = property38.getAsShortText(locale42);
        java.lang.String str45 = locale13.getDisplayLanguage(locale42);
        java.lang.String str46 = locale42.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "41" + "'", str44, "41");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.year();
        int int13 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime15.getFields();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plus(readableDuration17);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        java.lang.String str6 = dateTimeZone0.getName((long) 34520736, locale5);
        long long9 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        boolean boolean50 = dateTime29.isBefore(readableInstant48);
        org.joda.time.Instant instant51 = dateTime29.toInstant();
        java.lang.String str52 = dateTime29.toString();
        int int53 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str54 = dateTime29.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime29.getZone();
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        int int63 = localDateTime62.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.minuteOfHour();
        java.lang.String str66 = property65.getAsShortText();
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime69 = property65.setCopy("35", locale68);
        org.joda.time.LocalDateTime localDateTime70 = property65.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime71 = property65.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.centuryOfEra();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = property73.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime75 = property73.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusMillis(91);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withYear(528);
        org.joda.time.LocalDateTime.Property property80 = localDateTime75.secondOfMinute();
        boolean boolean81 = dateTimeZone55.isLocalDateTimeGap(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2122-02-11T09:41:22.269Z" + "'", str52, "2122-02-11T09:41:22.269Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2122-02-11T09:41:22.269Z" + "'", str54, "2122-02-11T09:41:22.269Z");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "41" + "'", str66, "41");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withMillisOfDay(117);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withDayOfYear(98);
        int[] intArray23 = localDateTime15.getValues();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 10, 6082001]");
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        int int5 = localDateTime0.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(34759000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:36:27.473", "2122-02-11T08:00:16.405-01:35", "2122-02-11T08:01:57.362-01:35");
        java.lang.String str4 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:36:27.473_2122-02-11T08:00:16.405-01:35_2122-02-11T08:01:57.362-01:35");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.year();
        int int45 = property44.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246082468L + "'", long36 == 4800246082468L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        java.util.Iterator<java.lang.String> strItor32 = strSet15.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet15.spliterator();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = locale34.getDisplayVariant(locale36);
        java.util.Set<java.lang.String> strSet39 = locale34.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet39.spliterator();
        java.lang.Object[] objArray41 = strSet39.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet57);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        java.lang.Object obj64 = null;
        boolean boolean65 = strSet62.remove(obj64);
        boolean boolean67 = strSet62.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap69);
        java.util.Collection<java.util.Locale> localeCollection71 = null;
        java.util.Locale locale72 = java.util.Locale.lookup(languageRangeList70, localeCollection71);
        java.util.Collection<java.lang.String> strCollection73 = null;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList70, strCollection73);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale locale81 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList83.stream();
        java.util.stream.Stream<java.util.Locale> localeStream87 = localeList83.parallelStream();
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList70, (java.util.Collection<java.util.Locale>) localeList83);
        boolean boolean89 = strSet39.removeAll((java.util.Collection<java.util.Locale>) localeList83);
        boolean boolean90 = strSet15.retainAll((java.util.Collection<java.util.Locale>) localeList83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals(locale81.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeStream86);
        org.junit.Assert.assertNotNull(localeStream87);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale.Builder builder12 = builder0.setLanguage("ita");
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        int int28 = property20.getMaximumTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        long long49 = dateTime48.getMillis();
        int int50 = property20.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMillis(0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property58.getDifference(readableInstant59);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property58.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime68 = property58.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime70.getZone();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str74 = dateTimeZone71.getShortName((-3155679300L), locale73);
        int int75 = property20.getMaximumShortTextLength(locale73);
        java.util.Locale.Builder builder76 = builder12.setLocale(locale73);
        java.util.Locale.Builder builder77 = builder76.clear();
        java.util.Locale.Builder builder78 = builder77.clearExtensions();
        java.util.Locale.Builder builder80 = builder77.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder83 = builder80.setExtension('u', "2122-02-11T09:37:14.132Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:37:14.132Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4800246082632L + "'", long49 == 4800246082632L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale locale11 = builder0.build();
        java.util.Locale locale12 = builder0.build();
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setScript("\u5341\u4e8c\u6708");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.DurationField durationField15 = property13.getDurationField();
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plus(readablePeriod28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(974);
        org.joda.time.DateTime dateTime32 = localDateTime29.toDateTime();
        int int33 = property13.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(1987);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str16 = dateTimeZone15.toString();
        boolean boolean17 = dateTimeZone15.isFixed();
        boolean boolean18 = localDateTime8.equals((java.lang.Object) dateTimeZone15);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        boolean boolean27 = strSet25.equals((java.lang.Object) locale26);
        java.util.Locale.Builder builder28 = builder20.setLocale(locale26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getDisplayVariant();
        java.util.Locale.Builder builder31 = builder20.setLocale(locale29);
        java.util.Locale locale32 = builder20.build();
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = dateTimeZone15.getShortName(4800245870419L, locale32);
        long long37 = dateTimeZone15.convertLocalToUTC(4800245955839L, true);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:35" + "'", str16, "-01:35");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ko" + "'", str33, "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:35" + "'", str34, "-01:35");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4800251655839L + "'", long37 == 4800251655839L);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("German");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale47.getLanguage();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str69 = locale68.getDisplayScript();
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale73.getLanguage();
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale40, locale42, locale43, locale47, locale50, locale52, locale56, locale58, locale63, locale68, locale73, locale76 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        boolean boolean80 = strSet38.retainAll((java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Locale locale87 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale87 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.util.Locale>) localeList89);
        boolean boolean92 = strSet38.containsAll((java.util.Collection<java.util.Locale>) localeList91);
        boolean boolean93 = strSet21.removeAll((java.util.Collection<java.util.Locale>) localeList91);
        java.util.stream.Stream<java.util.Locale> localeStream94 = localeList91.parallelStream();
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap96 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList97 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap96);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str41, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str59, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(localeStream94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(languageRangeList97);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(939);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = dateTimeZone29.getName((long) 292278993, locale31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.monthOfYear();
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = property37.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField41 = property37.getField();
        boolean boolean42 = property37.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.006" + "'", str5, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.006" + "'", str32, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        boolean boolean7 = strSet3.isEmpty();
        java.lang.Object[] objArray8 = strSet3.toArray();
        java.lang.Class<?> wildcardClass9 = objArray8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[, hi!]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder4.build();
        boolean boolean10 = locale8.equals((java.lang.Object) 4800245971259L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.util.Date date41 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromDateFields(date41);
        int int44 = localDateTime43.size();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusWeeks(68);
        int int47 = localDateTime43.getYear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(164);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DurationField durationField51 = property50.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246082919L + "'", long36 == 4800246082919L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 01 00:00:00 GMT+09:38 2022");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        int int2 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(22);
        int int12 = localDateTime11.size();
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDateTime11.isSupported(durationFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minus(readablePeriod15);
        int int17 = localDateTime16.getDayOfWeek();
        int int18 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime0.plusWeeks(67);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 34882954]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        java.util.Locale locale1 = new java.util.Locale("2122-02-11T09:35:59.916Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.lang.String str5 = locale1.getExtension('a');
        org.junit.Assert.assertEquals(locale1.toString(), "2122-02-11t09:35:59.916z");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2122-02-11t09:35:59.916z" + "'", str3, "2122-02-11t09:35:59.916z");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        boolean boolean6 = strSet4.equals((java.lang.Object) locale5);
        boolean boolean7 = strSet4.isEmpty();
        strSet4.clear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(100L);
        java.lang.String str14 = dateTimeZone10.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        java.lang.String str25 = property24.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime28 = property24.setCopy("35", locale27);
        org.joda.time.LocalDateTime localDateTime29 = property24.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekyear();
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.year();
        int int51 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.withField(dateTimeFieldType57, 13);
        int int60 = localDateTime48.get(dateTimeFieldType57);
        int int61 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.Chronology chronology62 = localDateTime48.getChronology();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime48.minus(readablePeriod63);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = localDateTime48.toString("+00:00:00.011", locale66);
        java.lang.String str68 = dateTimeZone10.getShortName((long) 524, locale66);
        java.util.TimeZone timeZone69 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        int int72 = dateTimeZone70.getOffset(4800245758408L);
        int int74 = dateTimeZone70.getOffsetFromLocal((long) 559);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "41" + "'", str25, "41");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.011" + "'", str67, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property21.getDifference(readableInstant22);
        org.joda.time.LocalDateTime localDateTime24 = property21.withMaximumValue();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plus(readablePeriod26);
        int int28 = localDateTime27.getWeekyear();
        boolean boolean29 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.minusHours((int) '4');
        int int32 = localDateTime31.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        int int15 = property11.getMaximumTextLength(locale13);
        java.util.Locale locale19 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str20 = locale13.getDisplayCountry(locale19);
        java.lang.String str21 = locale13.getVariant();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals(locale19.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        java.util.Locale locale3 = new java.util.Locale("\u610f\u5927\u5229\u6587", "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:13.839-01:35");
        java.util.Locale locale7 = new java.util.Locale("35", "2022-02-11T08:00:17.729", "2122-02-11T09:35:08.397Z");
        java.lang.String str8 = locale3.getDisplayLanguage(locale7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long15 = fixedDateTimeZone13.previousTransition((long) 9);
        java.lang.String str16 = fixedDateTimeZone13.getID();
        boolean boolean17 = fixedDateTimeZone13.isFixed();
        long long19 = fixedDateTimeZone13.nextTransition(4800245735033L);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale.Builder builder25 = builder21.setLanguageTag("zh");
        java.util.Locale locale26 = builder21.build();
        java.lang.String str27 = fixedDateTimeZone13.getShortName(4800245729932L, locale26);
        long long29 = fixedDateTimeZone13.nextTransition(4800245708295L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusMillis(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime42.minuteOfHour();
        boolean boolean51 = property49.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localDateTime53.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusDays(292278993);
        boolean boolean59 = localDateTime52.isEqual((org.joda.time.ReadablePartial) localDateTime58);
        int int60 = localDateTime52.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime52.minusMinutes(4);
        boolean boolean64 = fixedDateTimeZone13.equals((java.lang.Object) 4);
        int int66 = fixedDateTimeZone13.getOffset((long) 748);
        long long68 = fixedDateTimeZone13.previousTransition(764L);
        int int70 = fixedDateTimeZone13.getOffsetFromLocal(4800245791481L);
        java.lang.String str72 = fixedDateTimeZone13.getNameKey((long) 116);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) locale7, (org.joda.time.DateTimeZone) fixedDateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u610f\u5927\u5229\u6587\u610f\u5927\u5229\u6587_2122-02-11T08:00:13.839-01:35");
        org.junit.Assert.assertEquals(locale7.toString(), "35_2022-02-11T08:00:17.729_2122-02-11T09:35:08.397Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str8, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9L + "'", long15 == 9L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str16, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4800245735033L + "'", long19 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.032" + "'", str27, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4800245708295L + "'", long29 == 4800245708295L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 32 + "'", int66 == 32);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 764L + "'", long68 == 764L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Italian" + "'", str72, "Italian");
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(292278993);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        int int45 = localDateTime44.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusHours(9);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = localDateTime52.isSupported(dateTimeFieldType59);
        boolean boolean61 = localDateTime38.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property62 = localDateTime18.property(dateTimeFieldType59);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime13.withField(dateTimeFieldType59, 16);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plusMillis(0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfEra();
        org.joda.time.ReadableInstant readableInstant74 = null;
        int int75 = property73.getDifference(readableInstant74);
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        int int81 = property73.getMaximumTextLength(locale79);
        org.joda.time.LocalDateTime localDateTime83 = property73.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        java.util.Locale locale87 = java.util.Locale.GERMANY;
        java.lang.String str88 = dateTimeZone85.getName((long) 292278993, locale87);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.DateTime dateTime90 = localDateTime83.toDateTime(dateTimeZone85);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime83.minusWeeks(529);
        int int93 = property65.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime.Property property94 = localDateTime83.year();
        int int95 = localDateTime83.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.006" + "'", str88, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("+00:00:00.009");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("2122-02-11T09:36:02.100Z");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.DurationField durationField24 = property23.getRangeDurationField();
        int int25 = property23.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime27 = property23.setCopy(13);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property23.getFieldType();
        int int29 = localDateTime9.indexOf(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        int int14 = property12.getMaximumValue();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = property12.getAsShortText(locale15);
        java.lang.String str17 = locale3.getDisplayScript(locale15);
        java.lang.String str18 = locale15.toLanguageTag();
        java.lang.String str19 = locale15.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "41" + "'", str13, "41");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "41" + "'", str16, "41");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "de-DE" + "'", str18, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str19, "\u5fb7\u6587\u5fb7\u56fd)");
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        boolean boolean6 = strSet4.equals((java.lang.Object) locale5);
        boolean boolean7 = strSet4.isEmpty();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = strSet11.remove(obj13);
        boolean boolean15 = strSet11.isEmpty();
        boolean boolean17 = strSet11.add("");
        strSet11.clear();
        strSet11.clear();
        boolean boolean20 = strSet4.contains((java.lang.Object) strSet11);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        java.util.Date date41 = localDateTime38.toDate();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withMillisOfSecond(9);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond(34);
        boolean boolean46 = strSet11.remove((java.lang.Object) localDateTime45);
        int int47 = localDateTime45.getHourOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Feb 11 09:41:23 GMT+09:38 2122");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        java.lang.String str23 = property14.toString();
        org.joda.time.LocalDateTime localDateTime25 = property14.setCopy((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime25.getFields();
        org.joda.time.Chronology chronology27 = localDateTime25.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        int int30 = localDateTime29.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.dayOfWeek();
        int int32 = localDateTime29.getDayOfYear();
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime25, chronology33);
        boolean boolean35 = languageRange1.equals((java.lang.Object) localDateTime34);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[yearOfEra]" + "'", str23, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays(756);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime6.toString(dateTimeFormatter9);
        int int11 = localDateTime6.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withDate(0, 443, (-7044));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 443 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-01T00:00:00.000" + "'", str10, "2022-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("2022-01-09T11:41:10.066");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-01-09T11:41:10.066 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder8.setExtension('u', "fr-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setRegion("\u5fb7\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours(22);
        int int23 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        int int24 = localDateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 13 + "'", int24 == 13);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        int int7 = dateTimeZone1.getStandardOffset(4800245716316L);
        int int9 = dateTimeZone1.getStandardOffset(0L);
        int int11 = dateTimeZone1.getOffset((long) 524);
        long long14 = dateTimeZone1.adjustOffset(90L, true);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        boolean boolean16 = timeZone15.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 90L + "'", long14 == 90L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDateTime10.indexOf(dateTimeFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        org.joda.time.LocalDateTime localDateTime33 = property30.withMaximumValue();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = localDateTime33.indexOf(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plus(readablePeriod37);
        boolean boolean39 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime21.withWeekyear(91);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone46 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long48 = fixedDateTimeZone46.previousTransition((long) 9);
        java.lang.String str49 = fixedDateTimeZone46.getID();
        boolean boolean50 = fixedDateTimeZone46.isFixed();
        long long52 = fixedDateTimeZone46.nextTransition(4800245735033L);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.util.Locale.Builder builder56 = builder54.clear();
        java.util.Locale.Builder builder58 = builder54.setLanguageTag("zh");
        java.util.Locale locale59 = builder54.build();
        java.lang.String str60 = fixedDateTimeZone46.getShortName(4800245729932L, locale59);
        long long62 = fixedDateTimeZone46.nextTransition(4800245708295L);
        java.lang.String str63 = fixedDateTimeZone46.toString();
        org.joda.time.DateTime dateTime64 = localDateTime41.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone46);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField73 = localDateTime71.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.era();
        org.joda.time.DateTimeField dateTimeField75 = property74.getField();
        int int76 = property74.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime77 = property74.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property74.getFieldType();
        int int79 = dateTime64.get(dateTimeFieldType78);
        int int80 = localDateTime15.get(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 9L + "'", long48 == 9L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str49, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4800245735033L + "'", long52 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.032" + "'", str60, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 4800245708295L + "'", long62 == 4800245708295L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str63, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        boolean boolean16 = fixedDateTimeZone4.equals((java.lang.Object) timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        java.lang.String str18 = timeZone15.getID();
        timeZone15.setID("2122-02-11T09:35:26.282Z");
        java.util.TimeZone.setDefault(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId22 = timeZone15.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2122-02-11T09:35:26.282Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT-01:35" + "'", str18, "GMT-01:35");
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusDays(292278993);
        int int13 = localDateTime12.getWeekyear();
        boolean boolean14 = property4.equals((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withPeriodAdded(readablePeriod16, 34748043);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-798211) + "'", int13 == (-798211));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(755);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusWeeks(301);
        int int21 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2021 + "'", int21 == 2021);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        int[] intArray8 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusYears(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plusMillis(137);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(707);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 707 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 1, 10, 34883567]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int13 = localDateTime12.getDayOfYear();
        boolean boolean14 = dateTimeZone6.equals((java.lang.Object) int13);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category16, locale17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime36 = property26.addToCopy((int) (byte) 100);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("hi!");
        int int39 = property26.getMaximumShortTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        java.lang.String str49 = property48.getAsShortText();
        org.joda.time.LocalDateTime localDateTime51 = property48.setCopy("35");
        int int52 = property48.getLeapAmount();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        int int54 = property48.getMaximumShortTextLength(locale53);
        java.lang.String str55 = locale38.getDisplayLanguage(locale53);
        java.util.Locale.setDefault(category16, locale38);
        java.util.Locale locale57 = java.util.Locale.US;
        java.util.Locale.setDefault(category16, locale57);
        java.lang.String str59 = dateTimeZone6.getShortName((long) 16, locale57);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder63.clearExtensions();
        java.util.Locale locale65 = builder63.build();
        java.lang.String str66 = dateTimeZone60.getName((long) 34520736, locale65);
        boolean boolean67 = dateTimeZone6.equals((java.lang.Object) locale65);
        java.lang.String str68 = dateTimeZone2.getName(4800245789422L, locale65);
        java.util.Locale locale69 = locale65.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "41" + "'", str49, "41");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.006" + "'", str59, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-01:35" + "'", str68, "-01:35");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths(7);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(844);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (byte) 0);
        int int16 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        boolean boolean18 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Date date19 = localDateTime6.toDate();
        org.joda.time.Chronology chronology20 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 GMT-01:35 2022");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays((-52596480));
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        int int37 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        boolean boolean41 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = property50.getAsText(locale53);
        java.lang.String str55 = property42.getAsShortText(locale53);
        java.lang.String str56 = property42.toString();
        java.lang.String str57 = property42.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property42.getFieldType();
        int int59 = localDateTime21.indexOf(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "23" + "'", str55, "23");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[secondOfMinute]" + "'", str56, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "secondOfMinute" + "'", str57, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("2122-02-11T08:00:17.260-01:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T08:00:17.260-01:35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-01-09T10:02:10.610");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-09t10:02:10.610");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('u', "2022-02-11T09:39:24.300");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:39:24.300 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        java.util.Date date3 = localDateTime1.toDate();
        int int4 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.hourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:41:23 GMT-01:35 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(616, 948, 16857161, 37, 28930930);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((long) 3220);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        int int28 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        int int30 = localDateTime26.getYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusHours(22);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) ' ');
        int int47 = localDateTime46.getMillisOfSecond();
        boolean boolean48 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime33.withYearOfCentury(36);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMillis(0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property58.getDifference(readableInstant59);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property58.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.plusMillis(0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfEra();
        org.joda.time.ReadableInstant readableInstant75 = null;
        int int76 = property74.getDifference(readableInstant75);
        java.util.Locale locale80 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        int int82 = property74.getMaximumTextLength(locale80);
        org.joda.time.LocalDateTime localDateTime84 = property74.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime(readableInstant85);
        long long87 = dateTime86.getMillis();
        int int88 = property58.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalDateTime localDateTime90 = property58.setCopy(100);
        org.joda.time.LocalDateTime localDateTime91 = property58.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime91.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology95 = localDateTime91.getChronology();
        org.joda.time.LocalDateTime.Property property96 = localDateTime91.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = property96.getFieldType();
        int int98 = localDateTime50.get(dateTimeFieldType97);
        int int99 = localDateTime9.indexOf(dateTimeFieldType97);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 978 + "'", int3 == 978);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 978 + "'", int47 == 978);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 4800246083946L + "'", long87 == 4800246083946L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 16883978 + "'", int98 == 16883978);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 3 + "'", int99 == 3);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        java.lang.String str38 = property36.toString();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[millisOfDay]" + "'", str38, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("35_2022-02-11T08:00:17.729_2122-02-11T09:35:08.397Z", (double) 34591664L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.4591664E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        int int12 = property10.getMinimumValue();
        int int13 = property10.getMaximumValue();
        java.util.Locale locale15 = new java.util.Locale("italiano");
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = property10.getAsShortText(locale15);
        java.lang.String str18 = locale0.getDisplayVariant(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale15.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "italiano" + "'", str1, "italiano");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertEquals(locale15.toString(), "italiano");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "41" + "'", str17, "41");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(718);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property25.addWrapFieldToCopy(34811686);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        long long11 = fixedDateTimeZone5.convertLocalToUTC((long) (-1), false, (long) 100);
        boolean boolean12 = fixedDateTimeZone5.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 108, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long15 = fixedDateTimeZone5.nextTransition(4800246082468L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-33L) + "'", long11 == (-33L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4800246082468L + "'", long15 == 4800246082468L);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fra");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.lang.String str3 = timeZone1.getID();
        java.lang.String str4 = timeZone1.getID();
        boolean boolean5 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:36:00.414Z", "FRA", "2122-02-11T09:36:39.526Z");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = dateTimeZone6.getShortName(10L, locale9);
        java.lang.String str12 = locale9.getDisplayName();
        java.lang.String str13 = locale9.getISO3Language();
        java.lang.String str14 = locale3.getDisplayScript(locale9);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale9.getDisplayName(locale18);
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t09:36:00.414z_FRA_2122-02-11T09:36:39.526Z");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:35" + "'", str11, "-01:35");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime9.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        int int23 = property10.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy("35");
        int int36 = property32.getLeapAmount();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        int int38 = property32.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale22.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale41 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault(category0);
        java.lang.String str46 = locale45.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "41" + "'", str33, "41");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en_GB" + "'", str46, "en_GB");
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(299, 360, 278, 20, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        java.util.TimeZone timeZone11 = fixedDateTimeZone4.toTimeZone();
        int int13 = fixedDateTimeZone4.getStandardOffset(4800245732199L);
        java.util.TimeZone timeZone14 = fixedDateTimeZone4.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId15 = timeZone14.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2122-02-11T09:35:07.818Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("\u610f\u5927\u5229\u6587", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245739319L);
        boolean boolean25 = fixedDateTimeZone18.isFixed();
        long long27 = fixedDateTimeZone18.previousTransition(4800245865349L);
        java.util.TimeZone timeZone28 = fixedDateTimeZone18.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId29 = timeZone28.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2122-02-11T09:35:07.818Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5700001L + "'", long22 == 5700001L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4800245865349L + "'", long27 == 4800245865349L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:32.577Z");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = null; // flaky: timeZone2.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId5 = null; // flaky: timeZone4.toZoneId();
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        boolean boolean7 = timeZone4.observesDaylightTime();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId10 = null; // flaky: timeZone9.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId12 = null; // flaky: timeZone11.toZoneId();
        boolean boolean13 = timeZone9.hasSameRules(timeZone11);
        boolean boolean14 = timeZone8.hasSameRules(timeZone11);
        java.time.ZoneId zoneId15 = null; // flaky: timeZone8.toZoneId();
        java.util.TimeZone timeZone16 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId15);
        java.util.TimeZone timeZone17 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId15);
        boolean boolean18 = timeZone4.hasSameRules(timeZone17);
        timeZone4.setID("2122-02-11T09:35:36.870Z");
        boolean boolean21 = timeZone1.hasSameRules(timeZone4);
        boolean boolean22 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertNotNull(zoneId15);
// flaky:         org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        java.util.Locale locale1 = new java.util.Locale("2022-01-10T09:37:10.734");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder2.setExtension('x', "Italian");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale1.getDisplayVariant(locale12);
        java.lang.String str15 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-01-10t09:37:10.734");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        int int91 = localDateTime88.getDayOfYear();
        org.joda.time.LocalDateTime.Property property92 = localDateTime88.monthOfYear();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime88.minusDays(2122);
        org.joda.time.LocalDateTime.Property property95 = localDateTime94.yearOfEra();
        org.joda.time.LocalDateTime.Property property96 = localDateTime94.year();
        int int97 = property96.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:41:24.523+00:00:00.032" + "'", str20, "2122-02-11T09:41:24.523+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 42 + "'", int91 == 42);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str19 = nameProvider15.getName(locale16, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale23 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str26 = nameProvider15.getShortName(locale23, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale23.getDisplayLanguage(locale27);
        java.util.Locale locale29 = locale23.stripExtensions();
        boolean boolean30 = fixedDateTimeZone4.equals((java.lang.Object) locale23);
        java.lang.String str31 = locale23.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals(locale23.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str28, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[yearOfEra]" + "'", str31, "Property[yearOfEra]");
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.era();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMaximumValue();
        int int48 = localDateTime47.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246084541L + "'", long36 == 4800246084541L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 21 + "'", int48 == 21);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        boolean boolean3 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        int int19 = property11.getMaximumTextLength(locale17);
        org.joda.time.LocalDateTime localDateTime21 = property11.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        long long24 = dateTime23.getMillis();
        int int25 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(9);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        boolean boolean68 = localDateTime60.isSupported(dateTimeFieldType67);
        int int69 = dateTime45.get(dateTimeFieldType67);
        boolean boolean70 = dateTime23.isSupported(dateTimeFieldType67);
        java.lang.String str71 = dateTime23.toString();
        org.joda.time.Instant instant72 = dateTime23.toInstant();
        org.joda.time.DateTimeZone dateTimeZone73 = instant72.getZone();
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        long long77 = dateTimeZone75.previousTransition((long) 10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        int int80 = localDateTime79.getYearOfCentury();
        java.lang.String str81 = localDateTime79.toString();
        org.joda.time.DateTime dateTime82 = localDateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime82.getZone();
        int int84 = dateTimeZone75.getOffset((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Chronology chronology85 = dateTime82.getChronology();
        boolean boolean86 = instant72.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800246084578L + "'", long24 == 4800246084578L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T09:41:24.610+00:00:00.032" + "'", str46, "2122-02-11T09:41:24.610+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2122-02-11T09:41:24.610+00:00:00.032" + "'", str71, "2122-02-11T09:41:24.610+00:00:00.032");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-11T09:41:24.610" + "'", str81, "2022-02-11T09:41:24.610");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        strSet15.clear();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.util.TimeZone[] timeZoneArray36 = new java.util.TimeZone[] {};
        java.util.TimeZone[] timeZoneArray37 = strSet35.toArray(timeZoneArray36);
        java.lang.Cloneable[] cloneableArray38 = strSet15.toArray((java.lang.Cloneable[]) timeZoneArray37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime39.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusDays(292278993);
        int int45 = localDateTime44.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.centuryOfEra();
        boolean boolean47 = strSet15.remove((java.lang.Object) property46);
        java.util.Iterator<java.lang.String> strItor48 = strSet15.iterator();
        int int49 = strSet15.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(timeZoneArray36);
        org.junit.Assert.assertNotNull(timeZoneArray37);
        org.junit.Assert.assertNotNull(cloneableArray38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 34884689 + "'", int45 == 34884689);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(567);
        org.joda.time.Interval interval39 = property36.toInterval();
        java.lang.String str40 = property36.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfDay" + "'", str40, "millisOfDay");
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        int int35 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withField(dateTimeFieldType41, 13);
        int int44 = localDateTime32.get(dateTimeFieldType41);
        int int45 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property46 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime14.minusHours(34591664);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime14.withMillisOfSecond(243);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 24 + "'", int35 == 24);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str8 = fixedDateTimeZone4.getShortName(4800245716534L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long15 = fixedDateTimeZone4.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone13, (long) (byte) 0);
        long long18 = fixedDateTimeZone13.convertLocalToUTC((long) 373, false);
        java.lang.String str20 = fixedDateTimeZone13.getNameKey(146L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.032" + "'", str8, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 26L + "'", long15 == 26L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 367L + "'", long18 == 367L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str20, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.minuteOfHour();
        boolean boolean18 = property16.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = property27.getAsShortText(locale28);
        java.lang.String str30 = property16.getAsText(locale28);
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet31, filteringMode32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = strSet37.remove(obj39);
        boolean boolean42 = strSet37.remove((java.lang.Object) 5);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        boolean boolean50 = strSet48.equals((java.lang.Object) locale49);
        boolean boolean51 = strSet48.isEmpty();
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet48, filteringMode52);
        boolean boolean54 = languageRange1.equals((java.lang.Object) strSet48);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "41" + "'", str30, "41");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusDays(292278993);
        int int13 = localDateTime12.getWeekyear();
        boolean boolean14 = property4.equals((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.secondOfMinute();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        boolean boolean17 = property15.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-798211) + "'", int13 == (-798211));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2", "2122-02-11T08:00:13.839-01:35", 159, 508);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey(4800245735625L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2122-02-11T08:00:13.839-01:35" + "'", str6, "2122-02-11T08:00:13.839-01:35");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = property12.getAsText(locale15);
        int int17 = property4.getMaximumTextLength(locale15);
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str22 = nameProvider18.getName(locale19, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale26 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str29 = nameProvider18.getShortName(locale26, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale26.getDisplayLanguage(locale30);
        java.lang.String str32 = locale26.getDisplayLanguage();
        java.lang.String str33 = property4.getAsText(locale26);
        java.util.Set<java.lang.String> strSet34 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        boolean boolean57 = dateTime54.equals((java.lang.Object) builder56);
        java.util.Locale.Builder builder59 = builder56.setLanguage("deu");
        java.util.Locale locale60 = builder59.build();
        java.lang.String str61 = locale26.getDisplayScript(locale60);
        java.util.Locale.setDefault(locale60);
        java.lang.String str63 = locale60.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals(locale26.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str31, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str32, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Friday" + "'", str33, "Friday");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "deu" + "'", str63, "deu");
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        int int12 = property8.getLeapAmount();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.lang.String str17 = property8.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property8.addToCopy(34);
        java.lang.String str20 = property8.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "41" + "'", str17, "41");
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "41" + "'", str20, "41");
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2122-02-11T09:35:10.043Z");
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = property19.getDifference(readableInstant20);
        java.util.Locale locale25 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        int int27 = property19.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = property19.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = dateTimeZone31.getName((long) 292278993, locale33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = property47.getAsShortText(locale48);
        int int50 = property47.getMaximumValueOverall();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getScript();
        java.lang.String str53 = property47.getAsShortText(locale51);
        java.lang.String str54 = property39.getAsShortText(locale51);
        java.lang.String str55 = locale11.getDisplayCountry(locale51);
        java.lang.String str56 = locale11.getDisplayLanguage();
        java.util.Locale.Builder builder57 = builder8.setLocale(locale11);
        java.lang.Object obj58 = locale11.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.032" + "'", str34, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022" + "'", str53, "2022");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dec" + "'", str54, "Dec");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 34583839);
        int int9 = fixedDateTimeZone4.getOffset(4800245869615L);
        int int11 = fixedDateTimeZone4.getOffsetFromLocal(4800245884204L);
        org.joda.time.Chronology chronology12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) int11, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.setCopy(78);
        org.joda.time.LocalDateTime localDateTime24 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        int int26 = localDateTime24.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond(40);
        java.lang.String str11 = localDateTime10.toString();
        int int12 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusWeeks(400);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2074-02-11T09:41:25.040" + "'", str11, "2074-02-11T09:41:25.040");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 25 + "'", int12 == 25);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(883);
        int int15 = localDateTime14.size();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = property26.getAsText(locale29);
        java.lang.String str31 = property18.getAsShortText(locale29);
        java.lang.String str32 = property18.toString();
        java.lang.String str33 = property18.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime35 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMinutes(356);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusYears(351);
        java.lang.Class<?> wildcardClass40 = localDateTime39.getClass();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "25" + "'", str31, "25");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[secondOfMinute]" + "'", str32, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readableDuration9);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDateTime10.getValue(345290);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 345290");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:35:33.251Z", (double) 4800245896824L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.800245896824E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        int int11 = property8.getMaximumValue();
        java.util.Locale locale13 = new java.util.Locale("2022");
        java.lang.String str14 = property8.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        int int18 = property8.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property8.getLocalDateTime();
        int int20 = localDateTime19.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear(548);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 548 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertEquals(locale13.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "41" + "'", str14, "41");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(716, 28920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 28920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        int int64 = property56.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime48.isBefore(readableInstant67);
        boolean boolean70 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int71 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long73 = fixedDateTimeZone5.previousTransition(4800245716316L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((-3155679300L), (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long76 = fixedDateTimeZone5.convertUTCToLocal(413L);
        long long78 = fixedDateTimeZone5.previousTransition(34592952L);
        java.lang.String str80 = fixedDateTimeZone5.getNameKey(0L);
        int int82 = fixedDateTimeZone5.getOffsetFromLocal(4800240011004L);
        boolean boolean84 = fixedDateTimeZone5.isStandardOffset((long) 277);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:41:25.149+00:00:00.032" + "'", str28, "2122-02-11T09:41:25.149+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800245716316L + "'", long73 == 4800245716316L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 445L + "'", long76 == 445L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 34592952L + "'", long78 == 34592952L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Italian" + "'", str80, "Italian");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        int[] intArray8 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusHours(9);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        boolean boolean51 = localDateTime43.isSupported(dateTimeFieldType50);
        int int52 = dateTime28.get(dateTimeFieldType50);
        int int53 = localDateTime4.get(dateTimeFieldType50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime.Property property55 = localDateTime4.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 1, 10, 34885176]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T09:41:25.176+00:00:00.032" + "'", str29, "2122-02-11T09:41:25.176+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime18 = property8.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(34798172L, chronology22);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(193);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.LocalDateTime localDateTime10 = property7.withMinimumValue();
        java.lang.String str11 = property7.getName();
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 34885224]");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfWeek" + "'", str11, "dayOfWeek");
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.getMaximumValue();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getCountry();
        int int13 = property8.getMaximumShortTextLength(locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = dateTimeZone16.getShortName(10L, locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hi!");
        int int42 = property29.getMaximumShortTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        java.lang.String str52 = property51.getAsShortText();
        org.joda.time.LocalDateTime localDateTime54 = property51.setCopy("35");
        int int55 = property51.getLeapAmount();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        int int57 = property51.getMaximumShortTextLength(locale56);
        java.lang.String str58 = locale41.getDisplayLanguage(locale56);
        java.util.Locale locale59 = locale56.stripExtensions();
        java.lang.String str60 = locale56.toLanguageTag();
        java.lang.String str61 = locale19.getDisplayLanguage(locale56);
        java.lang.String str63 = locale56.getExtension('u');
        boolean boolean64 = locale56.hasExtensions();
        java.lang.String str65 = locale11.getDisplayScript(locale56);
        java.util.Set<java.lang.String> strSet66 = locale56.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray67 = strSet66.toArray();
        boolean boolean68 = strSet66.isEmpty();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "41" + "'", str9, "41");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:35" + "'", str21, "-01:35");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "41" + "'", str52, "41");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str8 = fixedDateTimeZone4.getShortName(4800245716534L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long15 = fixedDateTimeZone4.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone13, (long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond(192);
        boolean boolean30 = fixedDateTimeZone13.equals((java.lang.Object) 192);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.032" + "'", str8, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 26L + "'", long15 == 26L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        int int15 = timeZone13.getRawOffset();
        int int16 = timeZone13.getRawOffset();
        timeZone13.setID("2022-02-11T09:39:45.629");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 497);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 529L + "'", long3 == 529L);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.lang.String str41 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime42 = property7.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone50.isLocalDateTimeGap(localDateTime51);
        java.lang.String str53 = dateTimeZone50.getID();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.plusHours(0);
        boolean boolean67 = dateTimeZone50.isLocalDateTimeGap(localDateTime66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.plusMillis(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = localDateTime75.getFields();
        org.joda.time.DateTime dateTime77 = localDateTime75.toDateTime();
        long long78 = property68.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime77);
        int int79 = property68.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime80 = property68.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property68.getFieldType();
        org.joda.time.LocalDateTime.Property property82 = localDateTime45.property(dateTimeFieldType81);
        boolean boolean83 = localDateTime42.isSupported(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246085300L + "'", long36 == 4800246085300L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str53, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 59 + "'", int79 == 59);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2122-02-11T09:38:34.602Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2122-02-11T09:38:34.602Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((-876576), (int) 'u', 981, 262, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 262 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays(756);
        int int9 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(624);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset(0L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale15.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale23.getCountry();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale15.getDisplayCountry(locale23);
        java.lang.String str28 = dateTimeZone2.getShortName(4800245779159L, locale23);
        java.lang.String str30 = locale23.getExtension('x');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals(locale20.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:35" + "'", str28, "-01:35");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        boolean boolean31 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime20.getField(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        java.lang.String str3 = localDateTime1.toString();
        org.joda.time.DateTime dateTime4 = localDateTime1.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        int int20 = property12.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime22 = property12.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime42 = property32.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        boolean boolean45 = dateTime24.isBefore(readableInstant43);
        org.joda.time.Instant instant46 = dateTime24.toInstant();
        boolean boolean47 = dateTime4.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property52.getFieldType();
        boolean boolean55 = instant46.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = instant46.getZone();
        long long57 = instant46.getMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T08:06:25.420" + "'", str3, "2022-02-11T08:06:25.420");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4800246085420L + "'", long57 == 4800246085420L);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = property7.withMinimumValue();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone38 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = fixedDateTimeZone38.getShortName(4800245725694L, locale40);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        boolean boolean49 = strSet47.equals((java.lang.Object) locale48);
        java.util.Locale.Builder builder50 = builder42.setLocale(locale48);
        java.lang.String str51 = locale40.getDisplayCountry(locale48);
        java.lang.String str52 = property7.getAsShortText(locale40);
        java.lang.String str53 = locale40.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.011" + "'", str41, "+00:00:00.011");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:07.696Z");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setID("2122-02-11T09:36:39.526Z");
        int int5 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusYears(528);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.minusSeconds(503);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek(317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 317 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.setLanguageTag("zh");
        java.util.Locale locale14 = builder9.build();
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str23 = locale18.getDisplayVariant(locale22);
        java.lang.String str24 = locale14.getDisplayCountry(locale22);
        java.lang.String str25 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category7, locale14);
        java.util.Locale.Builder builder27 = builder6.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder6.addUnicodeLocaleAttribute("2022-02-11T08:01:47.096");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T08:01:47.096 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "deu");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale5.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int int35 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.minuteOfHour();
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = property38.getAsShortText(locale42);
        boolean boolean45 = strSet16.remove((java.lang.Object) locale42);
        java.util.Locale locale49 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        strSet50.clear();
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale58 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.stream.Stream<java.util.Locale> localeStream63 = localeList60.stream();
        boolean boolean64 = strSet50.retainAll((java.util.Collection<java.util.Locale>) localeList60);
        java.util.stream.Stream<java.util.Locale> localeStream65 = localeList60.stream();
        boolean boolean66 = strSet16.removeAll((java.util.Collection<java.util.Locale>) localeList60);
        boolean boolean67 = strSet16.isEmpty();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "6" + "'", str44, "6");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property4.getAsText(locale6);
        java.lang.Object obj10 = locale6.clone();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "de_DE");
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours(286);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMonths(195);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = property26.setCopy(34810543);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34810543 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfCeilingCopy();
        java.lang.String str7 = property5.getAsString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
    }
}

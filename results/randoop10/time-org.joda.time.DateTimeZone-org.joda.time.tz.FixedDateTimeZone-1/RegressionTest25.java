import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest25 {

    public static boolean debug = false;

    @Test
    public void test12501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12501");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("+00:00:00.059");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test12502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12502");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("zh", "2122-02-11T09:35:28.997Z", 11, 5735993);
        int int6 = fixedDateTimeZone4.getOffsetFromLocal(4800245746270L);
        long long8 = fixedDateTimeZone4.previousTransition(4800245818049L);
        java.lang.String str10 = fixedDateTimeZone4.getNameKey((long) 51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) fixedDateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245818049L + "'", long8 == 4800245818049L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2122-02-11T09:35:28.997Z" + "'", str10, "2122-02-11T09:35:28.997Z");
    }

    @Test
    public void test12503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12503");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T08:00:00.000");
        int int2 = localDateTime1.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYearOfEra(89);
        int int5 = localDateTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test12504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12504");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long10 = fixedDateTimeZone8.nextTransition((long) (byte) 100);
        int int12 = fixedDateTimeZone8.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone8.toTimeZone();
        int int15 = fixedDateTimeZone8.getStandardOffset((long) 183);
        java.lang.String str17 = fixedDateTimeZone8.getNameKey((long) 661);
        java.util.TimeZone timeZone18 = fixedDateTimeZone8.toTimeZone();
        boolean boolean19 = fixedDateTimeZone8.isFixed();
        java.util.TimeZone timeZone20 = fixedDateTimeZone8.toTimeZone();
        boolean boolean21 = strSet3.remove((java.lang.Object) fixedDateTimeZone8);
        java.lang.Object[] objArray22 = strSet3.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str17, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test12505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12505");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone7.isLocalDateTimeGap(localDateTime8);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusHours(0);
        boolean boolean24 = dateTimeZone7.isLocalDateTimeGap(localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime32.getFields();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        long long35 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        int int36 = property25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property25.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.plusMillis(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = property45.getDifference(readableInstant46);
        java.util.Locale locale51 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        int int53 = property45.getMaximumTextLength(locale51);
        org.joda.time.LocalDateTime localDateTime55 = property45.addToCopy((int) (byte) 100);
        int int56 = localDateTime55.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.dayOfMonth();
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.era();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime60 = property58.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withMillisOfSecond(15);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime37, chronology64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(462, 0, 801, 35, 1512000000, 831, 29189982, chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.841" + "'", str10, "+00:00:00.841");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test12506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12506");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(42);
        int int13 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withCenturyOfEra((int) 'x');
        int int16 = localDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology17 = localDateTime9.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test12507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12507");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        int int16 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy((long) 2122);
        org.joda.time.LocalDateTime localDateTime20 = property17.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test12508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12508");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:36:48.970", (double) 373);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=373.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12509");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        strSet15.clear();
        strSet15.clear();
        java.util.Spliterator<java.lang.String> strSpliterator19 = strSet15.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSpliterator19);
    }

    @Test
    public void test12510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12510");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime38 = property7.roundFloorCopy();
        java.lang.Class<?> wildcardClass39 = localDateTime38.getClass();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246195982L + "'", long36 == 4800246195982L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test12511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12511");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("+00:00:00.009");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("\u5354\u5b9a\u4e16\u754c\u6642");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test12512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12512");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusSeconds((-798211));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusWeeks(466);
        int int13 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusMinutes(39);
        org.joda.time.LocalDateTime.Property property16 = localDateTime7.millisOfDay();
        int int17 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34996872 + "'", int8 == 34996872);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test12513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12513");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.util.TimeZone timeZone7 = fixedDateTimeZone4.toTimeZone();
        int int9 = fixedDateTimeZone4.getOffset(4800245966201L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test12514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12514");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.yearOfCentury();
        java.util.Locale locale23 = new java.util.Locale("\u610f\u5927\u5229\u6587", "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:13.839-01:35");
        java.util.Locale locale27 = new java.util.Locale("35", "2022-02-11T08:00:17.729", "2122-02-11T09:35:08.397Z");
        java.lang.String str28 = locale23.getDisplayLanguage(locale27);
        int int29 = property19.getMaximumShortTextLength(locale27);
        java.lang.String str30 = property19.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u610f\u5927\u5229\u6587\u610f\u5927\u5229\u6587_2122-02-11T08:00:13.839-01:35");
        org.junit.Assert.assertEquals(locale27.toString(), "35_2022-02-11T08:00:17.729_2122-02-11T09:35:08.397Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str28, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22" + "'", str30, "22");
    }

    @Test
    public void test12515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12515");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        long long20 = fixedDateTimeZone4.nextTransition(4800245859173L);
        int int22 = fixedDateTimeZone4.getOffset(4800245822474L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone27 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int29 = fixedDateTimeZone27.getStandardOffset((long) 529);
        long long31 = fixedDateTimeZone27.previousTransition((long) (short) 1);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.lang.String str35 = fixedDateTimeZone27.getName(4800245729437L, locale33);
        java.lang.String str37 = fixedDateTimeZone27.getNameKey(4800245744056L);
        boolean boolean38 = fixedDateTimeZone4.equals((java.lang.Object) fixedDateTimeZone27);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245859173L + "'", long20 == 4800245859173L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.032" + "'", str35, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Italian" + "'", str37, "Italian");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12516");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("35");
        int int14 = property10.getLeapAmount();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        int int16 = property10.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = dateTimeZone0.getShortName((long) 0, locale15);
        boolean boolean19 = dateTimeZone0.isFixed();
        long long22 = dateTimeZone0.convertLocalToUTC((long) '#', false);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks(34648133);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "43" + "'", str11, "43");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.841" + "'", str18, "+00:00:00.841");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-806L) + "'", long22 == (-806L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test12517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12517");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusMinutes((-100));
        int int38 = localDateTime37.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusDays(0);
        boolean boolean41 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime11.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMinutes(475);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test12518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12518");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
    }

    @Test
    public void test12519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12519");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(174);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plus(readableDuration29);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test12520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12520");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime3.minuteOfHour();
        boolean boolean12 = property10.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime13 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = property21.getAsShortText(locale22);
        java.lang.String str24 = property10.getAsText(locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet25, filteringMode26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plusMillis(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = property39.getDifference(readableInstant40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        int int47 = property39.getMaximumTextLength(locale45);
        java.lang.String str48 = property39.toString();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.getVariant();
        int int52 = property39.getMaximumShortTextLength(locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray54 = strSet53.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.parse("coreano", strMap56);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object obj63 = null;
        boolean boolean64 = strSet61.remove(obj63);
        boolean boolean65 = strSet61.isEmpty();
        java.lang.Object[] objArray66 = strSet61.toArray();
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        strSet71.clear();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale79 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList81.stream();
        boolean boolean85 = strSet71.retainAll((java.util.Collection<java.util.Locale>) localeList81);
        boolean boolean86 = strSet61.retainAll((java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList57, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale> localeStream88 = localeList87.stream();
        boolean boolean89 = strSet53.containsAll((java.util.Collection<java.util.Locale>) localeList87);
        java.lang.String str90 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "43" + "'", str24, "43");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[yearOfEra]" + "'", str48, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italienisch" + "'", str50, "Italienisch");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[, hi!]");
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test12521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12521");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int[] intArray6 = localDateTime5.getValues();
        int int7 = localDateTime5.getEra();
        boolean boolean8 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 11, 34997170]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12522");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test12523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12523");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusSeconds((-798211));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours(559);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34997203 + "'", int8 == 34997203);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12524");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusMillis(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        org.joda.time.ReadableInstant readableInstant71 = null;
        int int72 = property70.getDifference(readableInstant71);
        java.util.Locale locale76 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        int int78 = property70.getMaximumTextLength(locale76);
        org.joda.time.LocalDateTime localDateTime80 = property70.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(readableInstant81);
        boolean boolean83 = dateTime62.isBefore(readableInstant81);
        boolean boolean84 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime62);
        long long85 = dateTime62.getMillis();
        boolean boolean86 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime62);
        long long87 = dateTime19.getMillis();
        org.joda.time.Chronology chronology88 = dateTime19.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:43:17.237+00:00:00.841" + "'", str42, "2122-02-11T09:43:17.237+00:00:00.841");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 4800246196396L + "'", long85 == 4800246196396L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 4800246196396L + "'", long87 == 4800246196396L);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test12525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12525");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str5 = fixedDateTimeZone4.toString();
        long long7 = fixedDateTimeZone4.previousTransition(0L);
        java.util.Locale locale11 = new java.util.Locale("2122-02-11T08:00:14.119-01:35", "2122-02-11T09:35:20.005Z");
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = property19.getAsShortText(locale20);
        java.util.Set<java.lang.Character> charSet24 = locale20.getExtensionKeys();
        java.lang.String str25 = locale11.getDisplayName(locale20);
        java.lang.String str26 = fixedDateTimeZone4.getShortName(4800245722839L, locale11);
        java.lang.String str28 = fixedDateTimeZone4.getNameKey(4800245770739L);
        boolean boolean29 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str5, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals(locale11.toString(), "2122-02-11t08:00:14.119-01:35_2122-02-11T09:35:20.005Z");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italienisch" + "'", str21, "Italienisch");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2122-02-11t08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)" + "'", str25, "2122-02-11t08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.032" + "'", str26, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italian" + "'", str28, "Italian");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test12526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12526");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        org.joda.time.Chronology chronology91 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(chronology91);
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(chronology91);
        int int94 = localDateTime93.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray95 = localDateTime93.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime97 = localDateTime93.minusMillis(292278993);
        org.joda.time.ReadablePeriod readablePeriod98 = null;
        org.joda.time.LocalDateTime localDateTime99 = localDateTime93.plus(readablePeriod98);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:17.302+00:00:00.841" + "'", str20, "2122-02-11T09:43:17.302+00:00:00.841");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertNotNull(localDateTime99);
    }

    @Test
    public void test12527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12527");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property7.getAsShortText(locale8);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str15 = fixedDateTimeZone14.toString();
        long long17 = fixedDateTimeZone14.previousTransition(0L);
        java.util.TimeZone timeZone18 = fixedDateTimeZone14.toTimeZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime36 = property26.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = property47.getDifference(readableInstant48);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        int int55 = property47.getMaximumTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime57 = property47.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.plusMillis(0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.yearOfEra();
        org.joda.time.ReadableInstant readableInstant68 = null;
        int int69 = property67.getDifference(readableInstant68);
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        int int75 = property67.getMaximumTextLength(locale73);
        org.joda.time.LocalDateTime localDateTime77 = property67.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        boolean boolean80 = dateTime59.isBefore(readableInstant78);
        boolean boolean81 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology82 = dateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime59.getZone();
        int int84 = fixedDateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str85 = dateTime59.toString();
        int int86 = property7.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.ReadableInstant readableInstant87 = null;
        int int88 = property7.getDifference(readableInstant87);
        int int89 = property7.get();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str15, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2122-02-11T09:43:17.345+00:00:00.841" + "'", str39, "2122-02-11T09:43:17.345+00:00:00.841");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2122-02-11T09:43:17.345+00:00:00.841" + "'", str85, "2122-02-11T09:43:17.345+00:00:00.841");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2022 + "'", int89 == 2022);
    }

    @Test
    public void test12528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12528");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        int int8 = localDateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test12529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12529");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITA", strMap1);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        int int6 = strSet5.size();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.TimeZone[] timeZoneArray10 = new java.util.TimeZone[] {};
        java.util.TimeZone[] timeZoneArray11 = strSet9.toArray(timeZoneArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("coreano", strMap13);
        boolean boolean15 = strSet9.contains((java.lang.Object) strMap13);
        boolean boolean16 = strSet9.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale locale31 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale41.getLanguage();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.util.Locale locale57 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str58 = locale57.getDisplayScript();
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str63 = locale62.getDisplayScript();
        java.util.Locale locale67 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getLanguage();
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale34, locale36, locale37, locale41, locale44, locale46, locale50, locale52, locale57, locale62, locale67, locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        boolean boolean74 = strSet32.retainAll((java.util.Collection<java.util.Locale>) localeList72);
        java.util.stream.Stream<java.util.Locale> localeStream75 = localeList72.stream();
        boolean boolean76 = strSet9.removeAll((java.util.Collection<java.util.Locale>) localeList72);
        boolean boolean77 = strSet5.containsAll((java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList72);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Japanisch (Japan)" + "'", str4, "Japanisch (Japan)");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(timeZoneArray10);
        org.junit.Assert.assertNotNull(timeZoneArray11);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italienisch" + "'", str35, "Italienisch");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italienisch" + "'", str53, "Italienisch");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale67.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
    }

    @Test
    public void test12530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12530");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        int int11 = property8.getMaximumValue();
        java.util.Locale locale13 = new java.util.Locale("2022");
        java.lang.String str14 = property8.getAsShortText(locale13);
        java.util.Locale locale17 = new java.util.Locale("2122-02-11T09:35:49.336Z", "2122-02-11T08:00:17.784-01:35");
        java.lang.String str18 = property8.getAsText(locale17);
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertEquals(locale13.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "43" + "'", str14, "43");
        org.junit.Assert.assertEquals(locale17.toString(), "2122-02-11t09:35:49.336z_2122-02-11T08:00:17.784-01:35");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "43" + "'", str18, "43");
        org.junit.Assert.assertNotNull(charSet19);
    }

    @Test
    public void test12531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12531");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId6);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(10);
        int[] intArray17 = localDateTime14.getValues();
        java.util.Date date18 = localDateTime14.toDate();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date18);
        boolean boolean20 = timeZone9.inDaylightTime(date18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 1, 10, 34997478]");
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Jan 10 09:43:17 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12532");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet24);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = strSet29.remove(obj31);
        boolean boolean33 = strSet29.isEmpty();
        boolean boolean35 = strSet29.add("");
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet29, filteringMode36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap38);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = strSet43.remove(obj45);
        boolean boolean47 = strSet43.isEmpty();
        java.lang.Object[] objArray48 = strSet43.toArray();
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strSet43, filteringMode49);
        boolean boolean51 = strSet43.isEmpty();
        boolean boolean52 = fixedDateTimeZone4.equals((java.lang.Object) strSet43);
        java.util.Iterator<java.lang.String> strItor53 = strSet43.iterator();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[, hi!]");
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strItor53);
    }

    @Test
    public void test12533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12533");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setUnicodeLocaleKeyword("2122-02-11T09:35:08.397Z", "2122-02-11T09:39:38.259Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2122-02-11T09:35:08.397Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test12534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12534");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.withMaximumValue();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test12535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12535");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = builder7.build();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale13.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        java.lang.String str24 = property23.getAsShortText();
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime27 = property23.setCopy("35", locale26);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale28);
        java.lang.String str30 = locale26.getDisplayVariant(locale28);
        java.lang.String str31 = locale13.getDisplayScript(locale26);
        java.lang.String str34 = nameProvider9.getShortName(locale13, "2122-02-11T08:00:15.629", "hi! (HI!,hi!)");
        java.lang.String str35 = locale8.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet36 = locale13.getUnicodeLocaleAttributes();
        java.lang.String[] strArray38 = java.util.TimeZone.getAvailableIDs(56);
        boolean boolean39 = strSet36.equals((java.lang.Object) 56);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "43" + "'", str24, "43");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test12536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12536");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        int int8 = localDateTime4.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 34997584]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test12537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12537");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getVariant();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test12538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12538");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears(0);
        boolean boolean35 = dateTimeZone22.isLocalDateTimeGap(localDateTime32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.era();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusYears(43);
        org.joda.time.LocalDateTime.Property property40 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.plusHours(597);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMonthOfYear(2905);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2905 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test12539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12539");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMonths(29);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.monthOfYear();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(381);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.weekyear();
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology42);
        int int45 = localDateTime44.getSecondOfMinute();
        boolean boolean46 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears(215);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test12540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12540");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.DurationField durationField40 = property7.getLeapDurationField();
        int int41 = property7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = property7.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra(21);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246196835L + "'", long36 == 4800246196835L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test12541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12541");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2122-02-11T09:41:54.511Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:41:54.511z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12542");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property7.roundHalfFloorCopy();
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear(947);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test12543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12543");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra(52);
        int int15 = localDateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test12544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12544");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2122-02-11T09:36:55.841Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:36:55.841z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12545");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2022-02-11T09:40:31.560", "2122-02-11T09:38:22.207Z", 120, 107);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
    }

    @Test
    public void test12546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12546");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale.Builder builder26 = builder22.setLanguageTag("zh");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Builder builder28 = builder26.clearExtensions();
        boolean boolean29 = dateTime19.equals((java.lang.Object) builder28);
        java.util.Locale locale30 = builder28.build();
        java.util.Locale.Builder builder31 = builder28.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder31.setRegion("2122-02-11T09:37:24.552+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:37:24.552+00:00:00.032 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test12547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12547");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus(readablePeriod14);
        int int16 = localDateTime9.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusWeeks(386);
        org.joda.time.Chronology chronology19 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology19);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12548");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        boolean boolean28 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.plusMillis((int) (byte) 10);
        boolean boolean31 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        int int32 = localDateTime10.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime10.plus(readableDuration33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        int int37 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime4.withWeekOfWeekyear(381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 381 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 34997157 + "'", int32 == 34997157);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test12549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12549");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245714191L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone18.toTimeZone();
        java.lang.String str26 = fixedDateTimeZone18.toString();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        int int29 = fixedDateTimeZone18.getOffset((long) 28895840);
        long long31 = fixedDateTimeZone18.previousTransition(4800245834085L);
        java.lang.String str32 = fixedDateTimeZone18.getID();
        int int34 = fixedDateTimeZone18.getOffset(4800245878241L);
        int int36 = fixedDateTimeZone18.getOffset((long) 591);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5700089L + "'", long22 == 5700089L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str26, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800245834085L + "'", long31 == 4800245834085L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str32, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
    }

    @Test
    public void test12550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12550");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("+00:00:00.059");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2122-02-11T08:00:47.630-01:35");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2122-02-11T09:35:25.953Z");
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("2122-02-11T09:39:57.064Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeZone11);
    }

    @Test
    public void test12551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12551");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        int int20 = localDateTime17.getDayOfYear();
        int int21 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.DurationField durationField24 = property22.getDurationField();
        org.joda.time.DurationField durationField25 = property22.getRangeDurationField();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone30 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap42);
        boolean boolean44 = fixedDateTimeZone30.equals((java.lang.Object) strMap42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        int int58 = localDateTime57.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readableDuration60);
        boolean boolean62 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime61.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withYearOfCentury((int) (short) 0);
        boolean boolean66 = fixedDateTimeZone30.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        int int69 = fixedDateTimeZone30.getOffsetFromLocal(4800245855862L);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) property22, (org.joda.time.DateTimeZone) fixedDateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test12552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12552");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        java.lang.String str12 = fixedDateTimeZone4.getShortName(4800245771295L);
        boolean boolean13 = fixedDateTimeZone4.isFixed();
        java.util.TimeZone timeZone14 = fixedDateTimeZone4.toTimeZone();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12553");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) 1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        int int4 = localDateTime3.getYearOfCentury();
        int int5 = localDateTime3.getMillisOfSecond();
        int int6 = localDateTime3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        int int11 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        int[] intArray20 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusHours(9);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        boolean boolean63 = localDateTime55.isSupported(dateTimeFieldType62);
        int int64 = dateTime40.get(dateTimeFieldType62);
        int int65 = localDateTime16.get(dateTimeFieldType62);
        int int66 = localDateTime9.indexOf(dateTimeFieldType62);
        boolean boolean67 = localDateTime3.isSupported(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime3.withMillisOfDay(713);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        int int77 = localDateTime76.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.minuteOfHour();
        java.lang.String str80 = property79.getAsShortText();
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime83 = property79.setCopy("35", locale82);
        org.joda.time.LocalDateTime localDateTime84 = property79.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime85 = property79.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.plusYears(109);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.withSecondOfMinute((int) '#');
        int int91 = localDateTime70.compareTo((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime70.minusWeeks(34907647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 171 + "'", int5 == 171);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 17 + "'", int11 == 17);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 1, 10, 34997171]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2122-02-11T09:43:17.171+00:00:00.006" + "'", str41, "2122-02-11T09:43:17.171+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "43" + "'", str80, "43");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test12554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12554");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) 10);
        boolean boolean3 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        java.util.Locale locale17 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        int int19 = property11.getMaximumTextLength(locale17);
        org.joda.time.LocalDateTime localDateTime21 = property11.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        long long24 = dateTime23.getMillis();
        int int25 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withYearOfEra(263);
        int int46 = localDateTime41.getWeekyear();
        int int47 = localDateTime41.getYear();
        boolean boolean48 = dateTime23.equals((java.lang.Object) localDateTime41);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone53 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long55 = fixedDateTimeZone53.previousTransition((long) 9);
        java.lang.String str56 = fixedDateTimeZone53.getID();
        int int58 = fixedDateTimeZone53.getStandardOffset((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = localDateTime41.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone53);
        org.joda.time.LocalDateTime.Property property60 = localDateTime41.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800246197237L + "'", long24 == 4800246197237L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 9L + "'", long55 == 9L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str56, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
    }

    @Test
    public void test12555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12555");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = property5.get();
        java.lang.String str7 = property5.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
    }

    @Test
    public void test12556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12556");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        int int15 = localDateTime13.getMillisOfDay();
        int int16 = localDateTime13.getEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours(131);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears(0);
        boolean boolean32 = dateTimeZone19.isLocalDateTimeGap(localDateTime29);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone37 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str39 = fixedDateTimeZone37.getNameKey((long) (short) -1);
        long long41 = dateTimeZone19.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone37, 5700001L);
        int int43 = fixedDateTimeZone37.getOffset((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone37);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        int int47 = localDateTime18.indexOf(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime18.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2597355 + "'", int15 == 2597355);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian" + "'", str39, "Italian");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5699975L + "'", long41 == 5699975L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test12557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12557");
        java.util.Locale locale2 = new java.util.Locale("\u610f\u5927\u5229\u6587", "2122-02-11T09:35:07.696Z");
        java.util.Locale locale6 = new java.util.Locale("francese (Canada)", "Property[yearOfEra]", "ita");
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("9");
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.lang.String str11 = locale2.getDisplayVariant(locale6);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayName();
        java.lang.String str15 = locale2.getDisplayName(locale12);
        java.util.Set<java.lang.String> strSet16 = locale2.getUnicodeLocaleKeys();
        java.lang.Object[] objArray17 = strSet16.toArray();
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        org.junit.Assert.assertEquals(locale2.toString(), "\u610f\u5927\u5229\u6587_2122-02-11T09:35:07.696Z");
        org.junit.Assert.assertEquals(locale6.toString(), "francese (canada)_PROPERTY[YEAROFERA]_ita");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[YEAROFERA]" + "'", str10, "PROPERTY[YEAROFERA]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str14, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587 (2122-02-11T09:35:07.696Z)" + "'", str15, "\u610f\u5927\u5229\u6587 (2122-02-11T09:35:07.696Z)");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test12558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12558");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:41:59.806");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:41:59.806' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12559");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekyear();
        java.lang.String str10 = property9.toString();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str15 = dateTimeZone14.toString();
        int int17 = dateTimeZone14.getOffsetFromLocal((long) '4');
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime36 = property26.addToCopy((int) (byte) 100);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("hi!");
        int int39 = property26.getMaximumShortTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        java.lang.String str49 = property48.getAsShortText();
        org.joda.time.LocalDateTime localDateTime51 = property48.setCopy("35");
        int int52 = property48.getLeapAmount();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        int int54 = property48.getMaximumShortTextLength(locale53);
        java.lang.String str55 = locale38.getDisplayLanguage(locale53);
        java.util.Locale locale56 = locale53.stripExtensions();
        java.lang.String str57 = dateTimeZone14.getName((long) (short) 0, locale56);
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        int int59 = property9.getMaximumShortTextLength(locale56);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34997441 + "'", int8 == 34997441);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekyear]" + "'", str10, "Property[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:35" + "'", str15, "-01:35");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-5700000) + "'", int17 == (-5700000));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "43" + "'", str49, "43");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-01:35" + "'", str57, "-01:35");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
    }

    @Test
    public void test12560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12560");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        java.util.Iterator<java.lang.String> strItor32 = strSet15.iterator();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        boolean boolean50 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.secondOfMinute();
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = property52.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = property52.addToCopy(386);
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        boolean boolean58 = strSet15.remove((java.lang.Object) property52);
        java.lang.String str59 = property52.getAsText();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "43" + "'", str59, "43");
    }

    @Test
    public void test12561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12561");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(883);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(350);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusMonths(34709023);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 501 + "'", int3 == 501);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test12562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12562");
        java.util.Locale locale3 = new java.util.Locale("it", "GMT-01:35", "2122-02-11T09:35:20.746Z");
        java.lang.String str4 = locale3.getLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "it_GMT-01:35_2122-02-11T09:35:20.746Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
    }

    @Test
    public void test12563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12563");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        boolean boolean5 = timeZone4.observesDaylightTime();
        int int7 = timeZone4.getOffset(0L);
        java.time.ZoneId zoneId8 = timeZone4.toZoneId();
        int int10 = timeZone4.getOffset(4800245730860L);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.Locale locale16 = new java.util.Locale("2122-02-11T09:41:52.248Z", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = timeZone4.getDisplayName(true, 28920000, locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 28920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-5700000) + "'", int7 == (-5700000));
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-5700000) + "'", int10 == (-5700000));
        org.junit.Assert.assertEquals(locale16.toString(), "2122-02-11t09:41:52.248z");
    }

    @Test
    public void test12564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(323, (-798181));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -798181");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12565");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getOffset(4800245742947L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(13);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekyear();
        java.lang.String str11 = property10.getName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
    }

    @Test
    public void test12566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12566");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear(496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 496 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12567");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear(109);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(904);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusWeeks(904);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDateTime29.get(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test12568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12568");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = localDateTime14.isSupported(durationFieldType15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 838);
        int int21 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        int int31 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusHours(9);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        boolean boolean46 = localDateTime38.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime22.withField(dateTimeFieldType45, (int) 'a');
        boolean boolean49 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDurationAdded(readableDuration50, 20);
        int int53 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTime dateTime54 = localDateTime48.toDateTime();
        long long55 = dateTime54.getMillis();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withDayOfYear(20);
        int int64 = localDateTime63.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.weekyear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readableDuration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.plusDays(32);
        org.joda.time.DateTime dateTime87 = localDateTime81.toDateTime();
        int int88 = property65.getDifference((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = dateTime54.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 629 + "'", int21 == 629);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4011414197623L + "'", long55 == 4011414197623L);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 34997629 + "'", int64 == 34997629);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12569");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale.Builder builder16 = builder12.setLanguageTag("zh");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = fixedDateTimeZone4.getShortName(4800245729932L, locale17);
        long long20 = fixedDateTimeZone4.nextTransition(4800245708295L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.minuteOfHour();
        boolean boolean42 = property40.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime44.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.minusDays(292278993);
        boolean boolean50 = localDateTime43.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        int int51 = localDateTime43.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.minusMinutes(4);
        boolean boolean55 = fixedDateTimeZone4.equals((java.lang.Object) 4);
        int int57 = fixedDateTimeZone4.getOffset((long) 748);
        long long59 = fixedDateTimeZone4.previousTransition(0L);
        int int61 = fixedDateTimeZone4.getStandardOffset((long) 589);
        long long63 = fixedDateTimeZone4.previousTransition(39446997130616L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology64);
        int int66 = localDateTime65.getYearOfCentury();
        java.lang.String str67 = localDateTime65.toString();
        org.joda.time.DateTime dateTime68 = localDateTime65.toDateTime();
        org.joda.time.Instant instant69 = dateTime68.toInstant();
        org.joda.time.DateTimeZone dateTimeZone70 = instant69.getZone();
        int int71 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) instant69);
        org.joda.time.Chronology chronology72 = instant69.getChronology();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245708295L + "'", long20 == 4800245708295L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 39446997130616L + "'", long63 == 39446997130616L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:43:17.695" + "'", str67, "2022-02-11T09:43:17.695");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test12570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12570");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("secondOfMinute", "2122-02-11T09:35:10.520Z", 21, 93);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int7 = fixedDateTimeZone4.getStandardOffset((long) 997);
        long long10 = fixedDateTimeZone4.adjustOffset((long) 419, false);
        int int12 = fixedDateTimeZone4.getOffsetFromLocal((long) 829);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 93 + "'", int7 == 93);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 419L + "'", long10 == 419L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
    }

    @Test
    public void test12571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12571");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        long long4 = dateTimeZone1.adjustOffset(4800245929991L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 4800245929991L + "'", long4 == 4800245929991L);
    }

    @Test
    public void test12572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12572");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusHours(9);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        boolean boolean42 = localDateTime34.isSupported(dateTimeFieldType41);
        int int43 = dateTime19.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.monthOfYear();
        boolean boolean53 = dateTime19.equals((java.lang.Object) localDateTime48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = localDateTime48.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:17.752+00:00:00.006" + "'", str20, "2122-02-11T09:43:17.752+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
    }

    @Test
    public void test12573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(712);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("2022-02-11T09:37:41.782");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:37:41.782 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test12575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12575");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        int[] intArray14 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMinuteOfHour(0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.yearOfCentury();
        int int20 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        org.joda.time.DurationField durationField30 = property29.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime31 = property29.getLocalDateTime();
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minus(readableDuration33);
        boolean boolean35 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.monthOfYear();
        org.joda.time.Chronology chronology37 = localDateTime31.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 11, 34948000]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test12576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12576");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        int int11 = fixedDateTimeZone4.getStandardOffset((long) 183);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey((long) 661);
        java.util.TimeZone timeZone14 = fixedDateTimeZone4.toTimeZone();
        boolean boolean15 = fixedDateTimeZone4.isFixed();
        java.util.TimeZone timeZone16 = fixedDateTimeZone4.toTimeZone();
        boolean boolean17 = fixedDateTimeZone4.isFixed();
        java.lang.String str19 = fixedDateTimeZone4.getNameKey(4800245866171L);
        java.lang.String str21 = fixedDateTimeZone4.getNameKey((long) 844);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str19, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str21, "2122-02-11T08:00:12.990-01:35");
    }

    @Test
    public void test12577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12577");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime39.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246197866L + "'", long36 == 4800246197866L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
    }

    @Test
    public void test12578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12578");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property21.setCopy("21");
        org.joda.time.LocalDateTime localDateTime26 = property21.setCopy("32");
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(960);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField30 = localDateTime28.getField(6178242);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 6178242");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test12579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12579");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime19.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test12580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12580");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.String str9 = languageRange1.getRange();
        java.lang.String str10 = languageRange1.getRange();
        double double11 = languageRange1.getWeight();
        java.lang.String str12 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en" + "'", str7, "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
    }

    @Test
    public void test12581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12581");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.year();
        boolean boolean14 = property13.isLeap();
        int int15 = property13.getMaximumValue();
        java.lang.String str16 = property13.toString();
        long long17 = property13.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[year]" + "'", str16, "Property[year]");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3462197945L + "'", long17 == 3462197945L);
    }

    @Test
    public void test12582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12582");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        long long10 = fixedDateTimeZone4.previousTransition((long) 305);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        int int48 = property18.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime50 = property18.setCopy(100);
        org.joda.time.LocalDateTime localDateTime51 = property18.roundHalfCeilingCopy();
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = localDateTime51.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime51.weekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.getLocalDateTime();
        boolean boolean63 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime62);
        java.util.TimeZone timeZone64 = fixedDateTimeZone4.toTimeZone();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone("2122-02-11T09:35:20.783Z");
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        boolean boolean68 = timeZone64.hasSameRules(timeZone66);
        java.util.Locale locale69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = timeZone64.getDisplayName(locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 305L + "'", long10 == 305L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4800246197961L + "'", long47 == 4800246197961L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test12583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 442, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test12584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12584");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("coreano", strMap1);
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = strSet6.remove(obj8);
        boolean boolean10 = strSet6.isEmpty();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        strSet16.clear();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList26.stream();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.util.Locale>) localeList26);
        boolean boolean31 = strSet6.retainAll((java.util.Collection<java.util.Locale>) localeList26);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap33);
        org.joda.time.tz.Provider provider35 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider35);
        java.util.Set<java.lang.String> strSet37 = provider35.getAvailableIDs();
        java.util.Set<java.lang.String> strSet38 = provider35.getAvailableIDs();
        java.util.Set<java.lang.String> strSet39 = provider35.getAvailableIDs();
        java.lang.String str40 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap41);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!]");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(languageRangeList42);
    }

    @Test
    public void test12585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12585");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        boolean boolean7 = property6.isLeap();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.LocalDateTime localDateTime9 = property6.getLocalDateTime();
        int int10 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test12586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12586");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMonthOfYear(74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
    }

    @Test
    public void test12587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12587");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('x', "Italian");
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder11 = builder5.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder5.clear();
        java.util.Locale locale13 = builder12.build();
        java.lang.String str16 = nameProvider0.getShortName(locale13, "2122-02-11T09:35:34.362Z", "2122-02-11T08:01:35.748-01:35");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale locale21 = builder18.build();
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getISO3Country();
        java.lang.String str26 = nameProvider0.getShortName(locale21, "2122-02-11T09:38:36.908Z", "57");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test12588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12588");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str5 = locale0.getISO3Language();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale0.getDisplayName(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test12589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12589");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(13);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology13);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12590");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        java.util.Locale locale27 = new java.util.Locale("2122-02-11T09:35:31.445Z", "fr_CA", "");
        java.lang.String str30 = nameProvider0.getName(locale27, "292278993-02-11T09:37:41.728", "");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone35 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str37 = fixedDateTimeZone35.getNameKey((long) (short) -1);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = fixedDateTimeZone35.getName((-31L), locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str45 = nameProvider0.getName(locale39, "2122-02-11T09:37:37.897Z", "2122-02-11T09:42:11.376+00:00:00.032");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.006" + "'", str19, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale27.toString(), "2122-02-11t09:35:31.445z_FR_CA");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Italian" + "'", str37, "Italian");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.032" + "'", str40, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Italian" + "'", str42, "Italian");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test12591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12591");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int13 = fixedDateTimeZone11.getStandardOffset((long) 529);
        long long15 = fixedDateTimeZone11.previousTransition((long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = fixedDateTimeZone11.getName(4800245729437L, locale17);
        boolean boolean20 = property6.equals((java.lang.Object) fixedDateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.minuteOfHour();
        boolean boolean32 = property30.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra(729);
        int int41 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test12592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12592");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        int int10 = fixedDateTimeZone4.getStandardOffset(4800245725694L);
        java.lang.String str12 = fixedDateTimeZone4.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.setCopy(53);
        boolean boolean28 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfFloorCopy();
        java.util.Date date31 = localDateTime30.toDate();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 22 00:00:00 GMT-01:35 1970");
    }

    @Test
    public void test12593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12593");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246198259L + "'", long36 == 4800246198259L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test12594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12594");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        int int35 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withField(dateTimeFieldType41, 13);
        int int44 = localDateTime32.get(dateTimeFieldType41);
        int int45 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology46 = localDateTime32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime32.minus(readablePeriod47);
        int int49 = localDateTime48.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime51 = property50.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 18 + "'", int35 == 18);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 280 + "'", int49 == 280);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test12595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12595");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2122-02-11T09:42:58.788+00:00:00.006");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:42:58.788+00:00:00.006");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12596");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withSecondOfMinute(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 669);
        int int20 = localDateTime19.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.minuteOfHour();
        boolean boolean42 = property40.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime44.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.minusDays(292278993);
        boolean boolean50 = localDateTime43.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        int int51 = localDateTime43.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime43.minusMinutes(4);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears(34536263);
        int int57 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        int int58 = localDateTime19.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test12597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12597");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12598");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(13);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(496);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test12599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12599");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        boolean boolean19 = property18.isLeap();
        org.joda.time.DurationField durationField20 = property18.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test12600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12600");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(11);
        int int12 = localDateTime11.getYearOfCentury();
        int int13 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekOfWeekyear();
        int int15 = property14.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 438 + "'", int13 == 438);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test12601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12601");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfCeilingCopy();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "Italian");
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder17 = builder11.setLocale(locale16);
        java.util.Locale locale18 = builder11.build();
        java.util.Locale.Builder builder19 = builder11.clear();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder22 = builder11.setLocale(locale20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("hi!");
        int int43 = property30.getMaximumShortTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.String str53 = property52.getAsShortText();
        org.joda.time.LocalDateTime localDateTime55 = property52.setCopy("35");
        int int56 = property52.getLeapAmount();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        int int58 = property52.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale42.getDisplayLanguage(locale57);
        java.util.Locale.Builder builder60 = builder22.setLocale(locale42);
        java.util.Locale locale61 = builder22.build();
        int int62 = property8.getMaximumShortTextLength(locale61);
        java.lang.String str63 = property8.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "43" + "'", str53, "43");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "43" + "'", str63, "43");
    }

    @Test
    public void test12602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12602");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        java.lang.String str9 = fixedDateTimeZone4.getID();
        int int11 = fixedDateTimeZone4.getStandardOffset(380585000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str9, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12603");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        int int27 = property14.getMaximumShortTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime28 = property14.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property14.getFieldType();
        org.joda.time.LocalDateTime.Property property30 = localDateTime1.property(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        java.lang.String str32 = property30.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 505 + "'", int3 == 505);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
    }

    @Test
    public void test12604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12604");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withSecondOfMinute(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 669);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = property27.getDifference(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = property27.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDurationAdded(readableDuration31, 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays(292278993);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        boolean boolean56 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime45.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusHours(9);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        boolean boolean80 = localDateTime72.isSupported(dateTimeFieldType79);
        boolean boolean81 = localDateTime58.isSupported(dateTimeFieldType79);
        org.joda.time.LocalDateTime.Property property82 = localDateTime38.property(dateTimeFieldType79);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime33.withField(dateTimeFieldType79, 16);
        boolean boolean85 = localDateTime16.isSupported(dateTimeFieldType79);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime88 = localDateTime16.withPeriodAdded(readablePeriod86, 131);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime16.plus(readablePeriod89);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
    }

    @Test
    public void test12605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12605");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 594, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMonthOfYear(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test12606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12606");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        int int42 = localDateTime40.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246198589L + "'", long36 == 4800246198589L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test12607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12607");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = property7.getAsShortText(locale8);
        boolean boolean12 = property7.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(4800245713056L);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType17 = null;
        boolean boolean18 = localDateTime15.isSupported(durationFieldType17);
        boolean boolean19 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusMonths(2023);
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italian" + "'", str9, "Italian");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12608");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("10");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getScript();
        java.lang.String str10 = locale8.getCountry();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.lang.String str14 = locale11.getDisplayName();
        java.util.Locale.Builder builder15 = builder7.setLocale(locale11);
        java.util.Locale.Builder builder16 = builder7.clear();
        java.util.Locale.Builder builder17 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setLanguage("2122-02-11t09:36:02.100z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2122-02-11t09:36:02.100z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test12609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12609");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getLanguage();
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.Object obj16 = locale15.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str13, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "fr");
    }

    @Test
    public void test12610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12610");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        long long10 = fixedDateTimeZone4.previousTransition((long) 305);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        int int48 = property18.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime50 = property18.setCopy(100);
        org.joda.time.LocalDateTime localDateTime51 = property18.roundHalfCeilingCopy();
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        boolean boolean60 = localDateTime51.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime51.weekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.getLocalDateTime();
        boolean boolean63 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime62);
        java.util.TimeZone timeZone64 = fixedDateTimeZone4.toTimeZone();
        int int66 = fixedDateTimeZone4.getStandardOffset(4800245727014L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 305L + "'", long10 == 305L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4800246198674L + "'", long47 == 4800246198674L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test12611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12611");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear(782);
        int int24 = localDateTime21.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test12612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12612");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readableDuration8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test12613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12613");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs((-798861));
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12614");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.minuteOfHour();
        boolean boolean17 = property15.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4800245707737L + "'", long5 == 4800245707737L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test12615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12615");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:36:50.588Z", "English", 190, 34759000);
    }

    @Test
    public void test12616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12616");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292275054) + "'", int6 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test12617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12617");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 301 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12618");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.dayOfWeek();
        org.joda.time.Chronology chronology15 = localDateTime9.getChronology();
        int int16 = localDateTime9.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test12619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        java.lang.String str27 = property26.getAsShortText();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime30 = property26.setCopy("35", locale29);
        org.joda.time.LocalDateTime localDateTime31 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(432);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        int int36 = localDateTime35.getYearOfCentury();
        int int37 = localDateTime35.getMillisOfSecond();
        int int38 = localDateTime35.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusYears((int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime40.getFieldTypes();
        int int42 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withWeekyear(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfCentury();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        boolean boolean54 = localDateTime40.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime16.property(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "43" + "'", str27, "43");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 889 + "'", int37 == 889);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test12620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12620");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:36:41.861Z");
        java.lang.String str2 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
    }

    @Test
    public void test12621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12621");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property8.toInterval();
        java.lang.String str16 = property8.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleAttributes();
        int int21 = property8.getMaximumTextLength(locale17);
        int int22 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property8.withMinimumValue();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "43" + "'", str16, "43");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German" + "'", str18, "German");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12622");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        java.time.ZoneId zoneId7 = timeZone0.toZoneId();
        boolean boolean8 = timeZone0.observesDaylightTime();
        timeZone0.setRawOffset(34655990);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12623");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minus(readableDuration10);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12624");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.year();
        int int35 = localDateTime33.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withField(dateTimeFieldType41, 13);
        int int44 = localDateTime32.get(dateTimeFieldType41);
        int int45 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.Chronology chronology46 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime32.era();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime32.plusMonths(35199071);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test12625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12625");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.Interval interval9 = property7.toInterval();
        int int10 = property7.get();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test12626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12626");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset((long) 10, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) (byte) 0);
        boolean boolean29 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        int int30 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = dateTimeZone50.getName((long) 292278993, locale52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.minusHours(9);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        boolean boolean80 = localDateTime72.isSupported(dateTimeFieldType79);
        boolean boolean81 = localDateTime57.isSupported(dateTimeFieldType79);
        int int82 = localDateTime28.get(dateTimeFieldType79);
        int int83 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property84 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime28.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime28.withWeekyear(917);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.006" + "'", str53, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test12627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12627");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        int int12 = property10.getMinimumValue();
        int int13 = property10.getMaximumValue();
        java.util.Locale locale15 = new java.util.Locale("2022");
        java.lang.String str16 = property10.getAsShortText(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale0.getDisplayLanguage(locale15);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale locale24 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.lang.String str25 = locale19.getDisplayName(locale24);
        java.util.Set<java.lang.Character> charSet26 = locale19.getExtensionKeys();
        java.lang.String str27 = locale0.getDisplayLanguage(locale19);
        java.lang.String str28 = locale0.getCountry();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder29.setExtension('x', "Italian");
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder35 = builder29.setLocale(locale34);
        java.util.Locale locale36 = builder29.build();
        java.util.Locale locale37 = builder29.build();
        java.lang.String str38 = locale0.getDisplayCountry(locale37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertEquals(locale15.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "43" + "'", str16, "43");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German" + "'", str18, "German");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals(locale24.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (China)" + "'", str25, "Chinese (China)");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5fb7\u6587" + "'", str27, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test12628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12628");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(22);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(9);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(582);
        boolean boolean27 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = fixedDateTimeZone4.getName(4800245777628L, locale29);
        java.util.TimeZone timeZone31 = fixedDateTimeZone4.toTimeZone();
        int int33 = fixedDateTimeZone4.getStandardOffset((long) 997);
        boolean boolean34 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.006" + "'", str30, "+00:00:00.006");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test12629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12629");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withWeekyear(35);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plusMillis(200);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.withPeriodAdded(readablePeriod17, 29189876);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12630");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear((int) 'x');
        java.lang.String str11 = localDateTime6.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withDayOfYear(116);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.plusMonths(445);
        int int16 = localDateTime15.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMonths(21);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra(34599418);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withDurationAdded(readableDuration21, 974);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-10T09:43:10.225" + "'", str11, "2022-01-10T09:43:10.225");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12631");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.minuteOfHour();
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = property36.getAsShortText(locale40);
        int int43 = property8.getMaximumShortTextLength(locale40);
        java.lang.String str44 = locale40.getCountry();
        java.lang.String str46 = locale40.getExtension('x');
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "43" + "'", str42, "43");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "HI!" + "'", str44, "HI!");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test12632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12632");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours(962);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withHourOfDay((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12633");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        boolean boolean22 = property21.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test12634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12634");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = localDateTime2.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
    }

    @Test
    public void test12635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12635");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T08:02:10.472-01:35", "Italienisch");
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t08:02:10.472-01:35_ITALIENISCH");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2122-02-11t08:02:10.472-01:35" + "'", str3, "2122-02-11t08:02:10.472-01:35");
    }

    @Test
    public void test12636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12636");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withYearOfEra(263);
        int int33 = localDateTime28.getWeekyear();
        int int34 = localDateTime28.getYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean36 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime35);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("2122-02-11T09:36:29.975Z");
        boolean boolean39 = fixedDateTimeZone4.equals((java.lang.Object) timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId42 = timeZone41.toZoneId();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId44 = timeZone43.toZoneId();
        boolean boolean45 = timeZone41.hasSameRules(timeZone43);
        boolean boolean46 = timeZone40.hasSameRules(timeZone43);
        timeZone40.setRawOffset((int) 'u');
        java.time.ZoneId zoneId49 = timeZone40.toZoneId();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone(zoneId49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone(zoneId49);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone(zoneId49);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone(zoneId49);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone(zoneId49);
        boolean boolean55 = fixedDateTimeZone4.equals((java.lang.Object) timeZone54);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(zoneId49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test12637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12637");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.previousTransition((long) 'u');
        java.lang.String str14 = fixedDateTimeZone4.getNameKey((long) 191);
        long long16 = fixedDateTimeZone4.convertUTCToLocal(4800245810541L);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) 4800245754926L);
        int int20 = fixedDateTimeZone4.getStandardOffset((long) 44);
        int int22 = fixedDateTimeZone4.getOffset((-3339L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 117L + "'", long12 == 117L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4800245810573L + "'", long16 == 4800245810573L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test12638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12638");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.util.TimeZone timeZone7 = fixedDateTimeZone4.toTimeZone();
        int int9 = timeZone7.getOffset(4800245717279L);
        timeZone7.setRawOffset(0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test12639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12639");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) ' ');
        int int15 = localDateTime14.getMillisOfSecond();
        int int16 = localDateTime14.getYear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plus(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = dateTimeZone21.getShortName(10L, locale24);
        long long29 = dateTimeZone21.adjustOffset((long) 10, false);
        java.lang.String str31 = dateTimeZone21.getNameKey(362L);
        org.joda.time.DateTime dateTime32 = localDateTime18.toDateTime(dateTimeZone21);
        int int33 = localDateTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(4800245792209L, chronology34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-52594560), chronology34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 429 + "'", int15 == 429);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3220 + "'", int16 == 3220);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:35" + "'", str26, "-01:35");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 429 + "'", int33 == 429);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test12640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12640");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        int int14 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withYearOfEra(35);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withYear(25);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime18.getFields();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMillis(48);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test12641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12641");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "Italian");
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder13 = builder7.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder7.clearExtensions();
        java.util.Locale.Builder builder15 = builder7.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder15.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder19 = builder15.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale21);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test12642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12642");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.LocalDateTime localDateTime16 = property13.addToCopy((int) (short) -1);
        java.lang.String str17 = property13.getAsText();
        int int18 = property13.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField19 = property13.getField();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.minuteOfHour();
        java.lang.String str29 = property28.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime32 = property28.setCopy("35", locale31);
        org.joda.time.LocalDateTime localDateTime33 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int int42 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.weekyear();
        org.joda.time.Chronology chronology51 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.year();
        int int55 = localDateTime53.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = localDateTime56.getFieldTypes();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withField(dateTimeFieldType61, 13);
        int int64 = localDateTime52.get(dateTimeFieldType61);
        int int65 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime34.plus(readableDuration66);
        org.joda.time.DateTime dateTime68 = localDateTime34.toDateTime();
        long long69 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        java.lang.String str70 = dateTime68.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "42" + "'", str17, "42");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "43" + "'", str29, "43");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 19 + "'", int55 == 19);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-11T09:43:00.000+00:00:00.006" + "'", str70, "2022-02-11T09:43:00.000+00:00:00.006");
    }

    @Test
    public void test12643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12643");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        int int24 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime42 = property32.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusMillis(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfEra();
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = property53.getDifference(readableInstant54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        int int61 = property53.getMaximumTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime63 = property53.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.lang.String str68 = dateTimeZone65.getName((long) 292278993, locale67);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime(dateTimeZone65);
        boolean boolean71 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime70);
        long long72 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Instant instant73 = dateTime70.toInstant();
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = instant73.getZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.006" + "'", str68, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-99L) + "'", long72 == (-99L));
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
    }

    @Test
    public void test12644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12644");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        long long8 = fixedDateTimeZone4.previousTransition(897L);
        java.lang.String str10 = fixedDateTimeZone4.getNameKey(4800245992858L);
        long long12 = fixedDateTimeZone4.previousTransition(598L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 897L + "'", long8 == 897L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str10, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 598L + "'", long12 == 598L);
    }

    @Test
    public void test12645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12645");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        boolean boolean17 = property11.equals((java.lang.Object) builder16);
        java.util.Locale.Builder builder18 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("2022-02-10T01:37:51.001Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-10T01:37:51.001Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12646");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property8.toInterval();
        java.lang.String str16 = property8.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleAttributes();
        int int21 = property8.getMaximumTextLength(locale17);
        int int22 = property8.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property8.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "43" + "'", str16, "43");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German" + "'", str18, "German");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test12647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12647");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long7 = fixedDateTimeZone5.previousTransition((long) 9);
        java.lang.String str9 = fixedDateTimeZone5.getShortName(4800245716534L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone14 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long16 = fixedDateTimeZone5.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone14, (long) (byte) 0);
        long long19 = fixedDateTimeZone14.convertLocalToUTC((long) 373, false);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(4800246082468L, (org.joda.time.DateTimeZone) fixedDateTimeZone14);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone25 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int27 = fixedDateTimeZone25.getStandardOffset((long) 529);
        long long31 = fixedDateTimeZone25.convertLocalToUTC((long) (-1), false, (long) 100);
        int int33 = fixedDateTimeZone25.getOffset((long) ' ');
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId36 = timeZone35.toZoneId();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        boolean boolean39 = timeZone35.hasSameRules(timeZone37);
        boolean boolean40 = timeZone34.hasSameRules(timeZone37);
        java.time.ZoneId zoneId41 = timeZone34.toZoneId();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone(zoneId41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone(zoneId41);
        boolean boolean44 = timeZone43.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone43);
        boolean boolean46 = fixedDateTimeZone25.equals((java.lang.Object) timeZone43);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusMillis(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = property54.getDifference(readableInstant55);
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        int int62 = property54.getMaximumTextLength(locale60);
        java.lang.String str63 = property54.toString();
        org.joda.time.LocalDateTime localDateTime65 = property54.setCopy((int) (byte) 10);
        boolean boolean66 = fixedDateTimeZone25.equals((java.lang.Object) property54);
        boolean boolean67 = fixedDateTimeZone25.isFixed();
        long long69 = fixedDateTimeZone14.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone25, 4800245824633L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 9L + "'", long7 == 9L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.032" + "'", str9, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 26L + "'", long16 == 26L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 367L + "'", long19 == 367L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-33L) + "'", long31 == (-33L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[yearOfEra]" + "'", str63, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4800245824607L + "'", long69 == 4800245824607L);
    }

    @Test
    public void test12648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12648");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder24.setExtension('x', "Italian");
        java.util.Locale locale28 = builder27.build();
        int int29 = property19.getMaximumShortTextLength(locale28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMonths(272);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = localDateTime44.isSupported(durationFieldType45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy((long) 838);
        int int51 = localDateTime50.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        int int61 = localDateTime60.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.minusHours(9);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        boolean boolean76 = localDateTime68.isSupported(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime52.withField(dateTimeFieldType75, (int) 'a');
        boolean boolean79 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withDurationAdded(readableDuration80, 20);
        int int83 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.DateTime dateTime84 = localDateTime78.toDateTime();
        int int85 = property19.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDateTime localDateTime86 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime87 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusMonths(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 689 + "'", int51 == 689);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test12649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12649");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusMillis(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        org.joda.time.ReadableInstant readableInstant71 = null;
        int int72 = property70.getDifference(readableInstant71);
        java.util.Locale locale76 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        int int78 = property70.getMaximumTextLength(locale76);
        org.joda.time.LocalDateTime localDateTime80 = property70.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(readableInstant81);
        boolean boolean83 = dateTime62.isBefore(readableInstant81);
        boolean boolean84 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime62);
        long long85 = dateTime62.getMillis();
        boolean boolean86 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableInstant readableInstant87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int88 = dateTime19.compareTo(readableInstant87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:43:19.738+00:00:00.006" + "'", str42, "2122-02-11T09:43:19.738+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 4800246199732L + "'", long85 == 4800246199732L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12650");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long7 = fixedDateTimeZone5.previousTransition((long) 9);
        java.lang.String str8 = fixedDateTimeZone5.getID();
        boolean boolean9 = fixedDateTimeZone5.isFixed();
        long long11 = fixedDateTimeZone5.nextTransition(4800245735033L);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale.Builder builder17 = builder13.setLanguageTag("zh");
        java.util.Locale locale18 = builder13.build();
        java.lang.String str19 = fixedDateTimeZone5.getShortName(4800245729932L, locale18);
        long long21 = fixedDateTimeZone5.nextTransition(4800245708295L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMinuteOfHour(18);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime34.minuteOfHour();
        boolean boolean43 = property41.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = localDateTime45.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.minusDays(292278993);
        boolean boolean51 = localDateTime44.isEqual((org.joda.time.ReadablePartial) localDateTime50);
        int int52 = localDateTime44.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime44.minusMinutes(4);
        boolean boolean56 = fixedDateTimeZone5.equals((java.lang.Object) 4);
        int int58 = fixedDateTimeZone5.getOffset((long) 748);
        int int60 = fixedDateTimeZone5.getOffsetFromLocal(4800245812001L);
        java.lang.String str62 = fixedDateTimeZone5.getName((long) 401);
        long long64 = fixedDateTimeZone5.nextTransition((long) 749);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(4800245756712L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 9L + "'", long7 == 9L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str8, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735033L + "'", long11 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4800245708295L + "'", long21 == 4800245708295L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.032" + "'", str62, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 749L + "'", long64 == 749L);
    }

    @Test
    public void test12651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12651");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.getMaximumValue();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.Interval interval13 = property8.toInterval();
        long long14 = property8.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "43" + "'", str12, "43");
        org.junit.Assert.assertNotNull(interval13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 19796L + "'", long14 == 19796L);
    }

    @Test
    public void test12652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12652");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        java.util.Date date8 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withWeekyear(12);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int[] intArray36 = localDateTime35.getValues();
        int int37 = localDateTime35.getEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusYears(35);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime44.minuteOfHour();
        boolean boolean53 = property51.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        int[] intArray58 = localDateTime56.getValues();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readableDuration74);
        boolean boolean76 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime75.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime78.plusMillis(0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.yearOfEra();
        org.joda.time.ReadableInstant readableInstant86 = null;
        int int87 = property85.getDifference(readableInstant86);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = property85.getAsText(locale88);
        java.lang.String str90 = property77.getAsShortText(locale88);
        java.lang.String str91 = property77.toString();
        java.lang.String str92 = property77.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property77.getFieldType();
        int int94 = localDateTime56.indexOf(dateTimeFieldType93);
        int int95 = localDateTime39.indexOf(dateTimeFieldType93);
        org.joda.time.LocalDateTime.Property property96 = localDateTime32.property(dateTimeFieldType93);
        boolean boolean97 = localDateTime9.isSupported(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 34999816]");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jan 10 09:43:19 GMT-01:35 2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2022, 2, 11, 34999816]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1987 + "'", int40 == 1987);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 11, 34948000]");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022" + "'", str89, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "19" + "'", str90, "19");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Property[secondOfMinute]" + "'", str91, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "secondOfMinute" + "'", str92, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test12653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12653");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        strSet4.clear();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.stream.Stream<java.util.Locale> localeStream17 = localeList14.stream();
        boolean boolean18 = strSet4.retainAll((java.util.Collection<java.util.Locale>) localeList14);
        strSet4.clear();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getLanguage();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str61 = locale60.getDisplayScript();
        java.util.Locale locale65 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str66 = locale65.getDisplayScript();
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getLanguage();
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale37, locale39, locale40, locale44, locale47, locale49, locale53, locale55, locale60, locale65, locale70, locale73 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        boolean boolean77 = strSet35.retainAll((java.util.Collection<java.util.Locale>) localeList75);
        java.util.stream.Stream<java.util.Locale> localeStream78 = localeList75.parallelStream();
        boolean boolean79 = strSet4.retainAll((java.util.Collection<java.util.Locale>) localeList75);
        java.lang.String[] strArray85 = new java.lang.String[] { "2122-02-11T09:35:23.854Z", "feb", "2122-02-11T08:00:17.935-01:35", "2122-02-11T09:35:44.544Z", "2122-02-11T09:35:27.860Z" };
        java.lang.String[] strArray91 = new java.lang.String[] { "2122-02-11T09:35:23.854Z", "feb", "2122-02-11T08:00:17.935-01:35", "2122-02-11T09:35:44.544Z", "2122-02-11T09:35:27.860Z" };
        java.lang.String[][] strArray92 = new java.lang.String[][] { strArray85, strArray91 };
        java.lang.String[][] strArray93 = strSet4.toArray(strArray92);
        java.util.Spliterator<java.lang.String> strSpliterator94 = strSet4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime((java.lang.Object) strSpliterator94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Spliterators$EmptySpliterator$OfRef");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(localeStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Italian" + "'", str38, "Italian");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italian" + "'", str56, "Italian");
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strSpliterator94);
    }

    @Test
    public void test12654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12654");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        boolean boolean17 = property11.equals((java.lang.Object) builder16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.addUnicodeLocaleAttribute("2113-08-16T09:42:11.104");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2113-08-16T09:42:11.104 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12655");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        boolean boolean70 = dateTime19.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusMillis(0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.yearOfEra();
        org.joda.time.ReadableInstant readableInstant79 = null;
        int int80 = property78.getDifference(readableInstant79);
        java.util.Locale locale84 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        int int86 = property78.getMaximumTextLength(locale84);
        org.joda.time.LocalDateTime localDateTime88 = property78.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.millisOfDay();
        boolean boolean90 = dateTime19.equals((java.lang.Object) localDateTime88);
        org.joda.time.Chronology chronology91 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime92 = org.joda.time.LocalDateTime.now(chronology91);
        org.joda.time.LocalDateTime localDateTime93 = org.joda.time.LocalDateTime.now(chronology91);
        org.joda.time.LocalDateTime.Property property94 = localDateTime93.yearOfEra();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime93.plusMonths(34711372);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime96.minusSeconds(741);
        org.joda.time.LocalDateTime.Property property99 = localDateTime96.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:19.930+00:00:00.006" + "'", str20, "2122-02-11T09:43:19.930+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test12656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12656");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap16);
        boolean boolean18 = fixedDateTimeZone4.equals((java.lang.Object) strMap16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readableDuration34);
        boolean boolean36 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYearOfCentury((int) (short) 0);
        boolean boolean40 = fixedDateTimeZone4.equals((java.lang.Object) (short) 0);
        java.util.TimeZone timeZone41 = fixedDateTimeZone4.toTimeZone();
        java.util.TimeZone timeZone42 = fixedDateTimeZone4.toTimeZone();
        boolean boolean43 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test12657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12657");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        java.util.Locale locale32 = null;
        int int33 = property31.getMaximumTextLength(locale32);
        java.lang.String str34 = property31.getAsString();
        int int35 = property31.get();
        org.joda.time.DurationField durationField36 = property31.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property31.getFieldType();
        int int38 = localDateTime8.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime8.millisOfSecond();
        java.lang.String str40 = property39.getAsString();
        org.joda.time.ReadableInstant readableInstant41 = null;
        long long42 = property39.getDifferenceAsLong(readableInstant41);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "77" + "'", str40, "77");
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-2844009994L) + "'", long42 == (-2844009994L));
    }

    @Test
    public void test12658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int11 = localDateTime10.getDayOfYear();
        boolean boolean12 = dateTimeZone4.equals((java.lang.Object) int11);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale55);
        java.lang.String str57 = dateTimeZone4.getShortName((long) 16, locale55);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder59 = builder3.clear();
        java.util.Locale.Builder builder60 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder3.addUnicodeLocaleAttribute("2122-02-11T09:39:29.656Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2122-02-11T09:39:29.656Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "43" + "'", str47, "43");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.006" + "'", str57, "+00:00:00.006");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test12659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12659");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.util.Date date41 = localDateTime40.toDate();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.secondOfMinute();
        java.lang.String str43 = property42.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246200123L + "'", long36 == 4800246200123L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 01 00:00:00 GMT-01:35 2022");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
    }

    @Test
    public void test12660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12660");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMonths(362);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis(883);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone28.isLocalDateTimeGap(localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = property40.getAsText(locale43);
        int int45 = property32.getMaximumTextLength(locale43);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str50 = nameProvider46.getName(locale47, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale54 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str57 = nameProvider46.getShortName(locale54, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale54.getDisplayLanguage(locale58);
        java.lang.String str60 = locale54.getDisplayLanguage();
        java.lang.String str61 = property32.getAsText(locale54);
        java.lang.String str62 = locale54.getCountry();
        java.util.Set<java.lang.String> strSet63 = locale54.getUnicodeLocaleKeys();
        int int64 = property26.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yearOfEra" + "'", str27, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022" + "'", str44, "2022");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals(locale54.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str59, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2122-02-11t09:35:07.818z" + "'", str60, "2122-02-11t09:35:07.818z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Friday" + "'", str61, "Friday");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test12661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12661");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.weekyear();
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(9L, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 174, chronology18);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test12662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12662");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        int int64 = property56.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime48.isBefore(readableInstant67);
        boolean boolean70 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int71 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long73 = fixedDateTimeZone5.previousTransition(4800245716316L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((-3155679300L), (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfYear();
        org.joda.time.DurationField durationField76 = property75.getDurationField();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:43:20.204+00:00:00.006" + "'", str28, "2122-02-11T09:43:20.204+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800245716316L + "'", long73 == 4800245716316L);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test12663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12663");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(34909786, 0, 305, 34820337, 653, 277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34820337 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12664");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        int int64 = property56.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime48.isBefore(readableInstant67);
        boolean boolean70 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int71 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long73 = fixedDateTimeZone5.previousTransition(4800245716316L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((-3155679300L), (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long76 = fixedDateTimeZone5.convertUTCToLocal((long) 818);
        int int78 = fixedDateTimeZone5.getStandardOffset(3577314909L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:43:20.255+00:00:00.006" + "'", str28, "2122-02-11T09:43:20.255+00:00:00.006");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800245716316L + "'", long73 == 4800245716316L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 850L + "'", long76 == 850L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test12665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12665");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMinimumValue();
        long long9 = property6.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property6.setCopy(743);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 743 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2" + "'", str7, "2");
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 899000288L + "'", long9 == 899000288L);
    }

    @Test
    public void test12666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property11.getDifference(readableInstant12);
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        boolean boolean16 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusHours(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusSeconds(34682662);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test12667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12667");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str15 = fixedDateTimeZone4.getNameKey((long) 100);
        int int17 = fixedDateTimeZone4.getOffsetFromLocal(10001L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
    }

    @Test
    public void test12668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        boolean boolean23 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.secondOfMinute();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property24.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet44);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = strSet49.remove(obj51);
        boolean boolean53 = strSet49.isEmpty();
        boolean boolean55 = strSet49.add("");
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet49, filteringMode56);
        boolean boolean58 = localDateTime28.equals((java.lang.Object) languageRangeList30);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime28.minusSeconds(804);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test12669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12669");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) '4');
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        int int27 = property14.getMaximumShortTextLength(locale26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        java.lang.String str37 = property36.getAsShortText();
        org.joda.time.LocalDateTime localDateTime39 = property36.setCopy("35");
        int int40 = property36.getLeapAmount();
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        int int42 = property36.getMaximumShortTextLength(locale41);
        java.lang.String str43 = locale26.getDisplayLanguage(locale41);
        java.util.Locale locale44 = locale41.stripExtensions();
        java.lang.String str45 = dateTimeZone2.getName((long) (short) 0, locale44);
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusMillis(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = property54.getDifference(readableInstant55);
        java.util.Locale locale60 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        int int62 = property54.getMaximumTextLength(locale60);
        org.joda.time.LocalDateTime localDateTime64 = property54.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.lang.String str69 = dateTimeZone66.getName((long) 292278993, locale68);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = localDateTime64.toDateTime(dateTimeZone66);
        long long72 = dateTime71.getMillis();
        org.joda.time.Chronology chronology73 = dateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) strSet46, chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:35" + "'", str3, "-01:35");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-5700000) + "'", int5 == (-5700000));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "43" + "'", str37, "43");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:35" + "'", str45, "-01:35");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.006" + "'", str69, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 4800246200412L + "'", long72 == 4800246200412L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test12670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12670");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale2);
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        org.joda.time.LocalDateTime localDateTime17 = property14.withMaximumValue();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime17.weekOfWeekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone31 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int33 = fixedDateTimeZone31.getStandardOffset((long) 529);
        java.lang.String str35 = fixedDateTimeZone31.getNameKey(4800245719443L);
        org.joda.time.DateTime dateTime36 = localDateTime17.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone31);
        int int38 = fixedDateTimeZone31.getStandardOffset((long) 34565127);
        int int40 = fixedDateTimeZone31.getOffset(4800245903323L);
        boolean boolean41 = strSet5.remove((java.lang.Object) 4800245903323L);
        int int42 = strSet5.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:35" + "'", str24, "-01:35");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italian" + "'", str35, "Italian");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test12671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(235);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMillis((int) (short) 1);
        int int12 = localDateTime11.getHourOfDay();
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property14 = localDateTime2.hourOfDay();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12672");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.lang.String str38 = locale34.toLanguageTag();
        java.lang.String str39 = locale34.getLanguage();
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleKeys();
        boolean boolean42 = locale34.equals((java.lang.Object) "2122-02-11T09:38:24.037");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "43" + "'", str30, "43");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test12673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12673");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        java.lang.String str11 = property10.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
    }

    @Test
    public void test12674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12674");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str10 = locale5.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getVariant();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = property20.getAsText(locale23);
        java.lang.String str27 = nameProvider12.getName(locale23, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        int int43 = property35.getMaximumTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property35.addToCopy((int) (byte) 100);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("hi!");
        int int48 = property35.getMaximumShortTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.minuteOfHour();
        java.lang.String str58 = property57.getAsShortText();
        org.joda.time.LocalDateTime localDateTime60 = property57.setCopy("35");
        int int61 = property57.getLeapAmount();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        int int63 = property57.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale47.getDisplayLanguage(locale62);
        java.lang.String str65 = locale47.toLanguageTag();
        java.lang.String str68 = nameProvider12.getName(locale47, "hi!", "1");
        java.lang.String str69 = locale9.getDisplayScript(locale47);
        java.util.Locale.setDefault(category0, locale47);
        java.util.Locale locale71 = java.util.Locale.getDefault(category0);
        java.util.Locale locale72 = java.util.Locale.getDefault(category0);
        java.util.Locale locale73 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "43" + "'", str58, "43");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(charSet74);
    }

    @Test
    public void test12675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12675");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int11 = localDateTime10.getDayOfYear();
        boolean boolean12 = dateTimeZone4.equals((java.lang.Object) int11);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale55);
        java.lang.String str57 = dateTimeZone4.getShortName((long) 16, locale55);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder3.setScript("2122-02-11T08:00:12.990-01:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T08:00:12.990-01:35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "43" + "'", str47, "43");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.006" + "'", str57, "+00:00:00.006");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test12676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12676");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = property10.getAsText(locale13);
        java.lang.String str17 = nameProvider2.getName(locale13, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "Italian");
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder24 = builder18.setLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getCountry();
        java.lang.String str27 = locale23.getDisplayLanguage(locale25);
        java.lang.String str30 = nameProvider2.getName(locale23, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str34 = nameProvider2.getName(locale31, "yearOfEra", "France");
        java.lang.String str35 = locale0.getDisplayVariant(locale31);
        java.lang.String str36 = locale0.getDisplayName();
        java.lang.String str37 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test12677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12677");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(1512000000);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12678");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("56", "2022-02-11T09:36:26.472", 28847909, 0);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        int int7 = fixedDateTimeZone4.getOffset((long) 999);
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        java.util.TimeZone timeZone9 = fixedDateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+08:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 28847909 + "'", int7 == 28847909);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+08:00");
    }

    @Test
    public void test12679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12679");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = builder0.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder13 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("2122-02-11T09:37:41.278Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2122-02-11T09:37:41.278Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12680");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property12.setCopy(14);
        int int16 = localDateTime15.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDayOfWeek(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
    }

    @Test
    public void test12681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12681");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        boolean boolean4 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        java.lang.String str14 = property13.getAsShortText();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime17 = property13.setCopy("35", locale16);
        org.joda.time.LocalDateTime localDateTime18 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = property13.addToCopy(4800245713056L);
        int int21 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DurationField durationField22 = property3.getLeapDurationField();
        org.joda.time.DurationField durationField23 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "43" + "'", str14, "43");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNull(durationField23);
    }

    @Test
    public void test12682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12682");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone0.hasSameRules(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean9 = timeZone3.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone3);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12683");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours(9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        int int15 = localDateTime13.getMillisOfDay();
        int int16 = localDateTime13.getEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours(131);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime13.getFields();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2600732 + "'", int15 == 2600732);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test12684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12684");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property20 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.DurationField durationField23 = property20.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime25 = property20.addToCopy((long) 672);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale26.getDisplayLanguage(locale28);
        java.lang.String str32 = locale26.getDisplayVariant();
        java.lang.String str33 = property20.getAsText(locale26);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japanisch" + "'", str31, "Japanisch");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "751" + "'", str33, "751");
    }

    @Test
    public void test12685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12685");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+81:11:18.993");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test12686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12686");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) (byte) 1);
        long long4 = dateTimeZone0.nextTransition((long) 2022);
        java.lang.String str5 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(1L, false, (long) (byte) 100);
        int int11 = dateTimeZone0.getOffsetFromLocal(4800245759781L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone23 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long25 = fixedDateTimeZone23.nextTransition((long) (byte) 100);
        int int27 = fixedDateTimeZone23.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime28 = localDateTime18.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 13L);
        java.lang.String str33 = dateTimeZone0.getNameKey(4800245714191L);
        boolean boolean35 = dateTimeZone0.isStandardOffset((long) 504);
        java.lang.Object obj36 = null;
        boolean boolean37 = dateTimeZone0.equals(obj36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.006" + "'", str2, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2022L + "'", long4 == 2022L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano" + "'", str5, "italiano");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-5L) + "'", long9 == (-5L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 13L + "'", long31 == 13L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str33, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test12687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12687");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        int int4 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        int int9 = timeZone8.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = property19.getDifference(readableInstant20);
        java.util.Locale locale25 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        int int27 = property19.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = property19.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = dateTimeZone31.getName((long) 292278993, locale33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone31);
        long long37 = dateTime36.getMillis();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        int int39 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant40 = dateTime36.toInstant();
        long long41 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-5700000) + "'", int9 == (-5700000));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.006" + "'", str34, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4800246200890L + "'", long37 == 4800246200890L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-5700000) + "'", int39 == (-5700000));
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1199L) + "'", long41 == (-1199L));
    }

    @Test
    public void test12688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12688");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone7 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int9 = fixedDateTimeZone7.getStandardOffset((long) 529);
        long long13 = fixedDateTimeZone7.convertLocalToUTC((long) (-1), false, (long) 100);
        int int15 = fixedDateTimeZone7.getOffset((long) ' ');
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId18 = timeZone17.toZoneId();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId20 = timeZone19.toZoneId();
        boolean boolean21 = timeZone17.hasSameRules(timeZone19);
        boolean boolean22 = timeZone16.hasSameRules(timeZone19);
        java.time.ZoneId zoneId23 = timeZone16.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId23);
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone25);
        boolean boolean28 = fixedDateTimeZone7.equals((java.lang.Object) timeZone25);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId30 = timeZone29.toZoneId();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId32 = timeZone31.toZoneId();
        boolean boolean33 = timeZone29.hasSameRules(timeZone31);
        boolean boolean34 = timeZone25.hasSameRules(timeZone29);
        boolean boolean35 = strSet2.remove((java.lang.Object) timeZone29);
        java.util.TimeZone.setDefault(timeZone29);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-33L) + "'", long13 == (-33L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test12689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12689");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        int int12 = fixedDateTimeZone4.getOffset((long) ' ');
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId17 = timeZone16.toZoneId();
        boolean boolean18 = timeZone14.hasSameRules(timeZone16);
        boolean boolean19 = timeZone13.hasSameRules(timeZone16);
        java.time.ZoneId zoneId20 = timeZone13.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone(zoneId20);
        boolean boolean23 = timeZone22.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone22);
        boolean boolean25 = fixedDateTimeZone4.equals((java.lang.Object) timeZone22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        java.lang.String str42 = property33.toString();
        org.joda.time.LocalDateTime localDateTime44 = property33.setCopy((int) (byte) 10);
        boolean boolean45 = fixedDateTimeZone4.equals((java.lang.Object) property33);
        long long47 = fixedDateTimeZone4.previousTransition((long) 11);
        long long49 = fixedDateTimeZone4.nextTransition(0L);
        java.util.Locale locale52 = new java.util.Locale("34750303", "2122-02-11T09:38:20.057Z");
        boolean boolean53 = fixedDateTimeZone4.equals((java.lang.Object) "34750303");
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[yearOfEra]" + "'", str42, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 11L + "'", long47 == 11L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals(locale52.toString(), "34750303_2122-02-11T09:38:20.057Z");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12690");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(675);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12691");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.weekyear();
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        int int40 = localDateTime39.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.weekyear();
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (byte) 100, chronology58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(9L, chronology58);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime39, chronology58);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.year();
        int int65 = localDateTime63.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime.Property property70 = localDateTime66.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime63.withField(dateTimeFieldType71, 13);
        int int74 = localDateTime62.get(dateTimeFieldType71);
        int int75 = localDateTime16.indexOf(dateTimeFieldType71);
        int int76 = localDateTime16.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 43 + "'", int40 == 43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20 + "'", int65 == 20);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
    }

    @Test
    public void test12692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12692");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T09:36:31.949+00:00:00.032");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test12693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12693");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.getCountry();
        java.lang.String str54 = property14.getAsShortText(locale35);
        java.lang.String str55 = locale35.getDisplayScript();
        java.util.Locale locale59 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        int int66 = localDateTime65.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        java.lang.String str69 = property68.getAsShortText();
        int int70 = property68.getMaximumValue();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = property68.getAsShortText(locale71);
        java.lang.String str73 = locale59.getDisplayScript(locale71);
        java.lang.String str74 = locale71.getDisplayName();
        java.lang.String str76 = locale71.getExtension('u');
        java.lang.String str77 = locale35.getDisplayLanguage(locale71);
        java.lang.String str78 = locale71.getISO3Language();
        java.lang.String str79 = locale71.getDisplayVariant();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "43" + "'", str46, "43");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Fri" + "'", str54, "Fri");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale59.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "43" + "'", str69, "43");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "43" + "'", str72, "43");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "German (Germany)" + "'", str74, "German (Germany)");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "deu" + "'", str78, "deu");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test12694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12694");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        int int32 = strSet15.size();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet15.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet15.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = strSet15.add("cor\351en");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(strSpliterator34);
    }

    @Test
    public void test12695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12695");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale8.getDisplayVariant(locale10);
        java.util.Locale locale16 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        java.lang.String str26 = property25.getAsShortText();
        int int27 = property25.getMaximumValue();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = property25.getAsShortText(locale28);
        java.lang.String str30 = locale16.getDisplayScript(locale28);
        java.lang.String str31 = locale28.toLanguageTag();
        java.lang.String str32 = locale10.getDisplayName(locale28);
        java.lang.String str33 = fixedDateTimeZone4.getName((long) 122, locale28);
        java.lang.Object obj34 = locale28.clone();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "43" + "'", str26, "43");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "43" + "'", str29, "43");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "de-DE" + "'", str31, "de-DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinesisch" + "'", str32, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.032" + "'", str33, "+00:00:00.032");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "de_DE");
    }

    @Test
    public void test12696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12696");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getOffset(4800245742947L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        java.util.TimeZone timeZone8 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12697");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("35");
        int int14 = property10.getLeapAmount();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        int int16 = property10.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = dateTimeZone0.getShortName((long) 0, locale15);
        boolean boolean19 = dateTimeZone0.isFixed();
        long long22 = dateTimeZone0.convertLocalToUTC((long) '#', false);
        long long25 = dateTimeZone0.convertLocalToUTC(4800245888226L, true);
        boolean boolean27 = dateTimeZone0.isStandardOffset(77L);
        java.lang.String str29 = dateTimeZone0.getName(4800246078413L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "43" + "'", str11, "43");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4800245888194L + "'", long25 == 4800245888194L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.032" + "'", str29, "+00:00:00.032");
    }

    @Test
    public void test12698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12698");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime16.withDate(34536098, 974, 2252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 974 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test12699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12699");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.secondOfMinute();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime21 = property19.getLocalDateTime();
        int int22 = localDateTime21.getMonthOfYear();
        org.joda.time.Chronology chronology23 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(1L, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMonths(34657421);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test12700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12700");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(235);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMillis((int) (short) 1);
        int int12 = localDateTime11.getHourOfDay();
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        int int17 = localDateTime15.getMillisOfSecond();
        int int18 = localDateTime15.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        int int23 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray32 = localDateTime28.getValues();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = property40.getDifference(readableInstant41);
        java.util.Locale locale46 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        int int48 = property40.getMaximumTextLength(locale46);
        org.joda.time.LocalDateTime localDateTime50 = property40.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        int int60 = localDateTime59.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readableDuration62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusHours(9);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        boolean boolean75 = localDateTime67.isSupported(dateTimeFieldType74);
        int int76 = dateTime52.get(dateTimeFieldType74);
        int int77 = localDateTime28.get(dateTimeFieldType74);
        int int78 = localDateTime21.indexOf(dateTimeFieldType74);
        boolean boolean79 = localDateTime15.isSupported(dateTimeFieldType74);
        int int80 = localDateTime2.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime.Property property81 = localDateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 297 + "'", int17 == 297);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[2022, 1, 10, 35001297]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2122-02-11T09:43:21.297+00:00:00.032" + "'", str53, "2122-02-11T09:43:21.297+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test12701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12701");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withYearOfEra(263);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        int int22 = localDateTime19.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test12702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12702");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = dateTimeZone20.getShortName((-3155679300L), locale22);
        java.lang.String str24 = locale22.getCountry();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int[] intArray26 = localDateTime25.getValues();
        int int27 = localDateTime25.getEra();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusHours(22);
        int int37 = localDateTime36.size();
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = localDateTime36.isSupported(durationFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minus(readablePeriod40);
        int int42 = localDateTime41.getDayOfWeek();
        int int43 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        int int44 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime.Property property45 = localDateTime25.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale46.getDisplayVariant(locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        int int58 = localDateTime57.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        java.lang.String str61 = property60.getAsShortText();
        org.joda.time.LocalDateTime localDateTime63 = property60.setCopy("35");
        int int64 = property60.getLeapAmount();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        int int66 = property60.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale65.getDisplayCountry();
        java.lang.String str68 = dateTimeZone50.getShortName((long) 0, locale65);
        java.lang.String str69 = locale47.getDisplayName(locale65);
        boolean boolean70 = locale65.hasExtensions();
        java.lang.String str71 = property45.getAsShortText(locale65);
        java.util.Set<java.lang.String> strSet72 = locale65.getUnicodeLocaleKeys();
        java.lang.String str73 = locale65.getDisplayScript();
        java.lang.String str74 = locale22.getDisplayName(locale65);
        java.lang.String str75 = locale22.toLanguageTag();
        java.lang.String str76 = locale22.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.032" + "'", str23, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CN" + "'", str24, "CN");
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 11, 35001365]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "43" + "'", str61, "43");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.032" + "'", str68, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "italiano" + "'", str69, "italiano");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "cinese (Cina)" + "'", str74, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zh-CN" + "'", str75, "zh-CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh_CN" + "'", str76, "zh_CN");
    }

    @Test
    public void test12703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12703");
        java.util.Locale locale2 = new java.util.Locale("feb", "2122-02-11T09:36:24.357Z");
        java.util.Locale locale6 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale2.getDisplayVariant(locale6);
        java.lang.String str9 = locale2.getDisplayScript();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("zh");
        java.util.Locale locale15 = builder10.build();
        java.util.Locale.Builder builder16 = builder10.clearExtensions();
        java.util.Locale locale17 = builder10.build();
        java.lang.String str18 = locale2.getDisplayVariant(locale17);
        java.lang.String str19 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "feb_2122-02-11T09:36:24.357Z");
        org.junit.Assert.assertEquals(locale6.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "feb_2122-02-11T09:36:24.357Z" + "'", str19, "feb_2122-02-11T09:36:24.357Z");
    }

    @Test
    public void test12704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12704");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("292278993-02-11T09:41:24.471");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test12705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12705");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245715938L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        int int4 = localDateTime1.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
    }

    @Test
    public void test12706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12706");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        java.util.Iterator<java.lang.String> strItor32 = strSet15.iterator();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        boolean boolean50 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.secondOfMinute();
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = property52.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = property52.addToCopy(386);
        org.joda.time.DurationField durationField57 = property52.getDurationField();
        boolean boolean58 = strSet15.remove((java.lang.Object) property52);
        long long59 = property52.remainder();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 21445L + "'", long59 == 21445L);
    }

    @Test
    public void test12707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12707");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:36:25.503Z", "2022-02-11T09:35:42.902", "2122-02-11T09:37:39.912Z");
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale3.getDisplayScript(locale8);
        java.lang.String str11 = locale3.toLanguageTag();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long18 = fixedDateTimeZone16.previousTransition((long) 9);
        long long20 = fixedDateTimeZone16.nextTransition(4800245711010L);
        long long22 = fixedDateTimeZone16.previousTransition((long) 305);
        boolean boolean23 = fixedDateTimeZone16.isFixed();
        boolean boolean24 = locale3.equals((java.lang.Object) boolean23);
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:36:25.503z_2022-02-11T09:35:42.902_2122-02-11T09:37:39.912Z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2122-02-11t09:36:25.503z" + "'", str9, "2122-02-11t09:36:25.503z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245711010L + "'", long20 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 305L + "'", long22 == 305L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12708");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusDays((int) 'a');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.lang.String str12 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dopo Cristo" + "'", str11, "dopo Cristo");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dopo Cristo" + "'", str12, "dopo Cristo");
    }

    @Test
    public void test12709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12709");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusDays((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withDurationAdded(readableDuration6, 137);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(813);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 531 + "'", int3 == 531);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12710");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone5 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        boolean boolean23 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.secondOfMinute();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property24.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet44);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = strSet49.remove(obj51);
        boolean boolean53 = strSet49.isEmpty();
        boolean boolean55 = strSet49.add("");
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet49, filteringMode56);
        boolean boolean58 = localDateTime28.equals((java.lang.Object) languageRangeList30);
        boolean boolean59 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        int int66 = localDateTime65.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        org.joda.time.DurationField durationField69 = property68.getRangeDurationField();
        int int70 = property68.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime72 = property68.setCopy(13);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusMillis(912);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        int int81 = localDateTime80.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withFields((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minus(readableDuration83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property89 = localDateTime86.weekyear();
        org.joda.time.Chronology chronology90 = localDateTime86.getChronology();
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(chronology90);
        org.joda.time.LocalDateTime localDateTime92 = org.joda.time.LocalDateTime.now(chronology90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime74.withFields((org.joda.time.ReadablePartial) localDateTime92);
        boolean boolean94 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime93);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test12711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12711");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths(7);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test12712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12712");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        java.lang.String str63 = dateTime19.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        int int68 = localDateTime67.getYearOfCentury();
        int int69 = localDateTime67.getMillisOfSecond();
        int int70 = localDateTime67.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.minus(readablePeriod71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime67.withDurationAdded(readableDuration73, 21);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra(859);
        boolean boolean78 = dateTimeZone64.isLocalDateTimeGap(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:21.636+00:00:00.032" + "'", str20, "2122-02-11T09:43:21.636+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2122-02-11T09:43:21.636+00:00:00.032" + "'", str63, "2122-02-11T09:43:21.636+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 636 + "'", int69 == 636);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test12713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12713");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.yearOfCentury();
        java.lang.String str20 = property19.getAsShortText();
        boolean boolean21 = property19.isLeap();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = property29.getDifference(readableInstant30);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        int int37 = property29.getMaximumTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = property29.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusHours(9);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        boolean boolean64 = localDateTime56.isSupported(dateTimeFieldType63);
        int int65 = dateTime41.get(dateTimeFieldType63);
        int int66 = property19.compareTo((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = property19.getAsShortText(locale67);
        java.lang.String str69 = locale67.getLanguage();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22" + "'", str20, "22");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:43:21.673+00:00:00.032" + "'", str42, "2122-02-11T09:43:21.673+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "22" + "'", str68, "22");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test12714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12714");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        boolean boolean22 = dateTime19.equals((java.lang.Object) builder21);
        java.util.Locale.Builder builder24 = builder21.setLanguage("deu");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale locale26 = builder24.build();
        java.util.Locale.Builder builder27 = builder24.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("2022-02-11T09:41:57.711");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:41:57.711 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "deu");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "deu");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test12715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12715");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str5 = fixedDateTimeZone4.toString();
        long long7 = fixedDateTimeZone4.previousTransition(0L);
        java.util.Locale locale11 = new java.util.Locale("2122-02-11T08:00:14.119-01:35", "2122-02-11T09:35:20.005Z");
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = property19.getAsShortText(locale20);
        java.util.Set<java.lang.Character> charSet24 = locale20.getExtensionKeys();
        java.lang.String str25 = locale11.getDisplayName(locale20);
        java.lang.String str26 = fixedDateTimeZone4.getShortName(4800245722839L, locale11);
        int int28 = fixedDateTimeZone4.getStandardOffset(0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str5, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals(locale11.toString(), "2122-02-11t08:00:14.119-01:35_2122-02-11T09:35:20.005Z");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "italiano" + "'", str21, "italiano");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2122-02-11t08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)" + "'", str25, "2122-02-11t08:00:14.119-01:35 (2122-02-11T09:35:20.005Z)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.032" + "'", str26, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test12716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12716");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = dateTimeZone1.getName((long) 292278993, locale3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property13.getDifference(readableInstant14);
        org.joda.time.LocalDateTime localDateTime16 = property13.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime16.toDateTime(dateTimeZone22);
        int int25 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime24);
        long long28 = dateTimeZone1.convertLocalToUTC(4800245980400L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.032" + "'", str4, "+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:35" + "'", str23, "-01:35");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4800245980368L + "'", long28 == 4800245980368L);
    }

    @Test
    public void test12717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12717");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.convertLocalToUTC(4800245721875L, true);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str15 = fixedDateTimeZone13.getNameKey((long) (short) -1);
        long long17 = fixedDateTimeZone13.previousTransition(4800245714301L);
        int int19 = fixedDateTimeZone13.getStandardOffset(4800245725694L);
        java.lang.String str21 = fixedDateTimeZone13.getShortName(0L);
        int int23 = fixedDateTimeZone13.getStandardOffset((long) 182);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone1, (org.joda.time.DateTimeZone) fixedDateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.032" + "'", str5, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245721843L + "'", long8 == 4800245721843L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4800245714301L + "'", long17 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.032" + "'", str21, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test12718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12718");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plusMonths(709);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plus(readablePeriod15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withYearOfCentury(926);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 926 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12719");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str4 = dateTimeZone2.getShortName(4800245902951L);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-5700000) + "'", int1 == (-5700000));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:35" + "'", str4, "-01:35");
    }

    @Test
    public void test12720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12720");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        int int9 = fixedDateTimeZone4.getStandardOffset((long) (byte) 0);
        int int11 = fixedDateTimeZone4.getStandardOffset(4800245767090L);
        java.util.TimeZone timeZone12 = fixedDateTimeZone4.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDate localDate15 = localDateTime13.toLocalDate();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test12721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12721");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMillis(394);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        long long15 = property14.remainder();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale locale54 = locale51.stripExtensions();
        java.util.Locale.setDefault(locale54);
        java.lang.String str56 = locale54.getScript();
        java.util.Locale.setDefault(locale54);
        int int58 = property14.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "43" + "'", str47, "43");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
    }

    @Test
    public void test12722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12722");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) ' ');
        boolean boolean16 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTime dateTime17 = localDateTime0.toDateTime();
        int int18 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDateTime0.toString("2022-02-11T09:48:39.201");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 861 + "'", int18 == 861);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12723");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        boolean boolean7 = strSet3.isEmpty();
        java.lang.Object[] objArray8 = strSet3.toArray();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int15 = fixedDateTimeZone13.getStandardOffset((long) 529);
        long long19 = fixedDateTimeZone13.convertLocalToUTC((long) (-1), false, (long) 100);
        long long21 = fixedDateTimeZone13.previousTransition((long) 'u');
        boolean boolean22 = fixedDateTimeZone13.isFixed();
        long long24 = fixedDateTimeZone13.nextTransition((long) 538);
        boolean boolean25 = strSet3.equals((java.lang.Object) 538);
        int int26 = strSet3.size();
        strSet3.clear();
        boolean boolean29 = strSet3.add("2122-02-11T08:02:09.444-01:35");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[, hi!]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-33L) + "'", long19 == (-33L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 117L + "'", long21 == 117L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 538L + "'", long24 == 538L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test12724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12724");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField18 = property7.getDurationField();
        java.lang.String str19 = property7.getName();
        java.lang.String str20 = property7.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        int int23 = localDateTime22.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (short) -1);
        int int26 = localDateTime25.getEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks(230);
        int int29 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.weekOfWeekyear();
        java.lang.String str31 = localDateTime25.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfEra" + "'", str19, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:43:20.952" + "'", str31, "2022-02-11T09:43:20.952");
    }

    @Test
    public void test12725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12725");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int7 = fixedDateTimeZone5.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = property36.getDifference(readableInstant37);
        java.util.Locale locale42 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        int int44 = property36.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime46 = property36.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMillis(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = property56.getDifference(readableInstant57);
        java.util.Locale locale62 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        int int64 = property56.getMaximumTextLength(locale62);
        org.joda.time.LocalDateTime localDateTime66 = property56.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(readableInstant67);
        boolean boolean69 = dateTime48.isBefore(readableInstant67);
        boolean boolean70 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int71 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long73 = fixedDateTimeZone5.previousTransition(4800245716316L);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((-3155679300L), (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int76 = fixedDateTimeZone5.getOffsetFromLocal(4800245806449L);
        int int78 = fixedDateTimeZone5.getStandardOffset(4800245983709L);
        int int80 = fixedDateTimeZone5.getOffset(292278993L);
        boolean boolean81 = fixedDateTimeZone5.isFixed();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:43:21.972+00:00:00.032" + "'", str28, "2122-02-11T09:43:21.972+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 4800245716316L + "'", long73 == 4800245716316L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12726");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.addToCopy(100);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder42 = builder40.clear();
        java.util.Locale.Builder builder44 = builder40.setLanguageTag("zh");
        java.util.Locale locale45 = builder40.build();
        java.util.Locale locale49 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str54 = locale49.getDisplayVariant(locale53);
        java.lang.String str55 = locale45.getDisplayCountry(locale53);
        int int56 = property7.getMaximumShortTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusMillis(0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfEra();
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = property64.getDifference(readableInstant65);
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        int int72 = property64.getMaximumTextLength(locale70);
        org.joda.time.LocalDateTime localDateTime74 = property64.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.lang.String str79 = dateTimeZone76.getName((long) 292278993, locale78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = localDateTime74.toDateTime(dateTimeZone76);
        long long82 = dateTime81.getMillis();
        long long83 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property7.getFieldType();
        org.joda.time.DurationField durationField85 = property7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime86 = property7.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withHourOfDay(963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 963 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246201999L + "'", long36 == 4800246201999L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.032" + "'", str79, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 4800246201999L + "'", long82 == 4800246201999L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-99L) + "'", long83 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNull(durationField85);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test12727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12727");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfYear();
        java.lang.String str12 = property11.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfYear]" + "'", str12, "Property[dayOfYear]");
    }

    @Test
    public void test12728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12728");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long6 = fixedDateTimeZone4.nextTransition((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.minuteOfHour();
        boolean boolean37 = property35.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime38 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.centuryOfEra();
        boolean boolean40 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime23.minusYears(529);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMonthOfYear(1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.era();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusDays(538);
        boolean boolean48 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDurationAdded(readableDuration49, 626);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date52 = localDateTime47.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -895 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test12729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12729");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(34941314L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 130 + "'", int3 == 130);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12730");
        java.util.Locale locale3 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale7.getVariant();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = property18.getAsText(locale21);
        java.lang.String str25 = nameProvider10.getName(locale21, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        int int46 = property33.getMaximumShortTextLength(locale45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        java.lang.String str56 = property55.getAsShortText();
        org.joda.time.LocalDateTime localDateTime58 = property55.setCopy("35");
        int int59 = property55.getLeapAmount();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        int int61 = property55.getMaximumShortTextLength(locale60);
        java.lang.String str62 = locale45.getDisplayLanguage(locale60);
        java.lang.String str63 = locale45.toLanguageTag();
        java.lang.String str66 = nameProvider10.getName(locale45, "hi!", "1");
        java.lang.String str67 = locale7.getDisplayScript(locale45);
        java.lang.String str68 = locale7.getDisplayCountry();
        java.lang.String str69 = locale7.getDisplayCountry();
        java.lang.String str70 = locale7.getDisplayCountry();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale72);
        java.lang.String str74 = locale7.getDisplayCountry(locale72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = locale7.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for HI!");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "43" + "'", str56, "43");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "HI!" + "'", str68, "HI!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "HI!" + "'", str69, "HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "HI!" + "'", str70, "HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "HI!" + "'", str74, "HI!");
    }

    @Test
    public void test12731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12731");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int11 = localDateTime10.getDayOfYear();
        boolean boolean12 = dateTimeZone4.equals((java.lang.Object) int11);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category14, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        int int37 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDateTime localDateTime49 = property46.setCopy("35");
        int int50 = property46.getLeapAmount();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str53 = locale36.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(category14, locale36);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category14, locale55);
        java.lang.String str57 = dateTimeZone4.getShortName((long) 16, locale55);
        java.util.Locale.Builder builder58 = builder3.setLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder3.setLanguage("2122-02-11T08:07:31.376-01:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2122-02-11T08:07:31.376-01:35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "43" + "'", str47, "43");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.032" + "'", str57, "+00:00:00.032");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test12732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12732");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        org.joda.time.LocalDateTime localDateTime11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getDurationField();
        boolean boolean13 = property8.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = dateTimeZone18.getShortName(10L, locale21);
        long long26 = dateTimeZone18.adjustOffset((long) 10, false);
        java.lang.String str28 = dateTimeZone18.getNameKey(362L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int int42 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        boolean boolean46 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.plusDays(292278993);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        int int51 = localDateTime50.getYearOfCentury();
        int int52 = localDateTime50.getMillisOfSecond();
        int int53 = localDateTime50.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusMillis(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfEra();
        org.joda.time.ReadableInstant readableInstant64 = null;
        int int65 = property63.getDifference(readableInstant64);
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        int int71 = property63.getMaximumTextLength(locale69);
        org.joda.time.LocalDateTime localDateTime73 = property63.addToCopy((int) (byte) 100);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("hi!");
        int int76 = property63.getMaximumShortTextLength(locale75);
        org.joda.time.LocalDateTime localDateTime77 = property63.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property63.getFieldType();
        org.joda.time.LocalDateTime.Property property79 = localDateTime50.property(dateTimeFieldType78);
        boolean boolean80 = localDateTime48.isSupported(dateTimeFieldType78);
        org.joda.time.LocalDateTime.Property property81 = localDateTime48.year();
        org.joda.time.LocalDateTime localDateTime82 = property81.getLocalDateTime();
        boolean boolean83 = dateTimeZone18.isLocalDateTimeGap(localDateTime82);
        org.joda.time.DateTime dateTime84 = localDateTime14.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(864L, dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:35" + "'", str23, "-01:35");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 204 + "'", int52 == 204);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test12733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12733");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str22 = property19.getAsString();
        int int23 = property19.get();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withSecondOfMinute((int) (byte) 10);
        int int33 = localDateTime30.getDayOfYear();
        int int34 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime();
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMonths(1);
        java.lang.String str41 = localDateTime37.toString("2022");
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plusMillis(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = property49.getDifference(readableInstant50);
        java.util.Locale locale55 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        int int57 = property49.getMaximumTextLength(locale55);
        org.joda.time.LocalDateTime localDateTime59 = property49.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        org.joda.time.DateTime dateTime63 = localDateTime37.toDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusMillis(0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.yearOfEra();
        org.joda.time.ReadableInstant readableInstant72 = null;
        int int73 = property71.getDifference(readableInstant72);
        java.util.Locale locale77 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        int int79 = property71.getMaximumTextLength(locale77);
        org.joda.time.LocalDateTime localDateTime81 = property71.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.lang.String str86 = dateTimeZone83.getName((long) 292278993, locale85);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDateTime81.toDateTime(dateTimeZone83);
        long long89 = dateTime88.getMillis();
        int int90 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime63.getZone();
        org.joda.time.DateTimeZone dateTimeZone92 = dateTime63.getZone();
        boolean boolean93 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:43:22.248+00:00:00.032" + "'", str36, "2022-02-11T09:43:22.248+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals(locale77.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.032" + "'", str86, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 4800246202217L + "'", long89 == 4800246202217L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test12734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12734");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = property26.getAsText(locale29);
        java.lang.String str31 = property18.getAsShortText(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property18.addToCopy(580);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        int int47 = localDateTime46.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readableDuration49);
        boolean boolean51 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds(9);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withPeriodAdded(readablePeriod54, 218);
        int int57 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int int58 = localDateTime56.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.withPeriodAdded(readablePeriod59, 566);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime56.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22" + "'", str31, "22");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
    }

    @Test
    public void test12735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12735");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDayOfYear(337);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property16.setCopy(35231558);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35231558 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test12736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12736");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        timeZone4.setID("2122-02-11T09:38:07.543Z");
        timeZone4.setID("2122-02-11T09:37:01.580+00:00:00.032");
        java.lang.String str11 = timeZone4.getID();
        int int12 = timeZone4.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2122-02-11T09:37:01.580+00:00:00.032" + "'", str11, "2122-02-11T09:37:01.580+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-5700000) + "'", int12 == (-5700000));
    }

    @Test
    public void test12737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12737");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property7.addToCopy((int) (byte) 100);
        int int23 = property7.get();
        boolean boolean24 = property7.isLeap();
        int int25 = property7.getLeapAmount();
        int int26 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = property7.getLocalDateTime();
        java.util.Locale locale31 = new java.util.Locale("GIAPPONESE (GIAPPONE)", "0035-02-11T08:04:18.142", "2022-02-11T09:39:02.470");
        java.lang.String str32 = property7.getAsText(locale31);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals(locale31.toString(), "giapponese (giappone)_0035-02-11T08:04:18.142_2022-02-11T09:39:02.470");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
    }

    @Test
    public void test12738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12738");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.Object obj5 = null;
        boolean boolean6 = strSet3.remove(obj5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet22);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = strSet27.remove(obj29);
        boolean boolean31 = strSet27.isEmpty();
        boolean boolean33 = strSet27.add("");
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet27, filteringMode34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap36);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = strSet41.remove(obj43);
        boolean boolean45 = strSet41.isEmpty();
        java.lang.Object[] objArray46 = strSet41.toArray();
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet41, filteringMode47);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = strSet52.remove(obj54);
        boolean boolean56 = strSet52.isEmpty();
        java.lang.Object[] objArray57 = strSet52.toArray();
        java.util.Locale locale61 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        strSet62.clear();
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.stream.Stream<java.util.Locale> localeStream75 = localeList72.stream();
        boolean boolean76 = strSet62.retainAll((java.util.Collection<java.util.Locale>) localeList72);
        boolean boolean77 = strSet52.retainAll((java.util.Collection<java.util.Locale>) localeList72);
        boolean boolean78 = strSet41.removeAll((java.util.Collection<java.util.Locale>) localeList72);
        boolean boolean79 = strSet3.containsAll((java.util.Collection<java.util.Locale>) localeList72);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone84 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int86 = fixedDateTimeZone84.getStandardOffset((long) 529);
        long long90 = fixedDateTimeZone84.convertLocalToUTC((long) (-1), false, (long) 100);
        boolean boolean91 = fixedDateTimeZone84.isFixed();
        java.lang.String str93 = fixedDateTimeZone84.getShortName(4800245743793L);
        boolean boolean94 = fixedDateTimeZone84.isFixed();
        boolean boolean95 = strSet3.contains((java.lang.Object) boolean94);
        org.joda.time.Chronology[] chronologyArray96 = new org.joda.time.Chronology[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Chronology[] chronologyArray97 = strSet3.toArray(chronologyArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[, hi!]");
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[, hi!]");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-33L) + "'", long90 == (-33L));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.032" + "'", str93, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(chronologyArray96);
    }

    @Test
    public void test12739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12739");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        long long8 = fixedDateTimeZone4.previousTransition(4800245714301L);
        int int10 = fixedDateTimeZone4.getStandardOffset(4800245725694L);
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str16 = locale15.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        java.lang.String str26 = property25.getAsShortText();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime29 = property25.setCopy("35", locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale28.getDisplayVariant(locale30);
        java.lang.String str33 = locale15.getDisplayScript(locale28);
        java.lang.String str36 = nameProvider11.getShortName(locale15, "2122-02-11T08:00:15.629", "hi! (HI!,hi!)");
        boolean boolean37 = fixedDateTimeZone4.equals((java.lang.Object) nameProvider11);
        java.lang.String str39 = fixedDateTimeZone4.getNameKey((long) 571);
        int int41 = fixedDateTimeZone4.getOffset(4800245959682L);
        java.lang.String str42 = fixedDateTimeZone4.getID();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245714301L + "'", long8 == 4800245714301L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "43" + "'", str26, "43");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian" + "'", str39, "Italian");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str42, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test12740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12740");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        boolean boolean30 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        int int31 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        java.util.Locale locale33 = null;
        int int34 = property32.getMaximumTextLength(locale33);
        java.lang.String str35 = property32.getAsString();
        int int36 = property32.get();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('x', "Italian");
        java.util.Locale locale41 = builder40.build();
        int int42 = property32.getMaximumShortTextLength(locale41);
        int int43 = property9.getMaximumTextLength(locale41);
        org.joda.time.DateTimeField dateTimeField44 = property9.getField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test12741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        java.lang.String str18 = property16.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "22" + "'", str18, "22");
    }

    @Test
    public void test12742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12742");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId3 = timeZone2.toZoneId();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.lang.String str5 = timeZone0.getID();
        timeZone0.setRawOffset(22);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean9 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setID("2122-02-11T09:41:32.837Z");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT-01:35" + "'", str5, "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12743");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = property10.getDifference(readableInstant11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = property10.getMaximumTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime20 = property10.addToCopy((int) (byte) 100);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        int int23 = property10.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy("35");
        int int36 = property32.getLeapAmount();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        int int38 = property32.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale22.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale41 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("2122-02-11T09:35:27.860Z");
        java.util.Locale.setDefault(category0, locale44);
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = locale44.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "43" + "'", str33, "43");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test12744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12744");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T09:43:17.237+00:00:00.841", "2122-02-11T09:37:19.287Z");
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:43:17.237+00:00:00.841_2122-02-11T09:37:19.287Z");
    }

    @Test
    public void test12745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12745");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.DurationField durationField14 = property13.getRangeDurationField();
        int int15 = property13.getMinimumValue();
        int int16 = property13.getMaximumValue();
        java.util.Locale locale18 = new java.util.Locale("2022");
        java.lang.String str19 = property13.getAsShortText(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale3.getDisplayLanguage(locale18);
        java.lang.String str22 = locale3.getDisplayVariant();
        java.lang.String str23 = locale0.getDisplayName(locale3);
        java.lang.String str24 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese (Japan)" + "'", str1, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertEquals(locale18.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "43" + "'", str19, "43");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanisch (Japan)" + "'", str23, "Japanisch (Japan)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese (Japan)" + "'", str24, "Japanese (Japan)");
    }

    @Test
    public void test12746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12746");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        long long18 = fixedDateTimeZone11.nextTransition(4800246006950L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4800246006950L + "'", long18 == 4800246006950L);
    }

    @Test
    public void test12747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12747");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = dateTimeZone29.getName((long) 292278993, locale31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.monthOfYear();
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = property37.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField41 = property37.getField();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayName();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        org.joda.time.DurationField durationField53 = property52.getRangeDurationField();
        int int54 = property52.getMinimumValue();
        int int55 = property52.getMaximumValue();
        java.util.Locale locale57 = new java.util.Locale("2022");
        java.lang.String str58 = property52.getAsShortText(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale42.getDisplayLanguage(locale57);
        java.util.Locale locale61 = locale42.stripExtensions();
        int int62 = property37.getMaximumTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime63 = property37.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.032" + "'", str5, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.032" + "'", str32, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 59 + "'", int55 == 59);
        org.junit.Assert.assertEquals(locale57.toString(), "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "43" + "'", str58, "43");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "German" + "'", str60, "German");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test12748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12748");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale17);
        int int19 = property13.getMaximumTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.US;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.lang.String str24 = locale17.getDisplayScript(locale20);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('x', "Italian");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder31 = builder25.setLocale(locale30);
        java.util.Locale locale32 = builder25.build();
        java.util.Locale.Builder builder33 = builder25.clearExtensions();
        java.util.Locale.Builder builder34 = builder25.clear();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.lang.String str39 = locale17.getDisplayScript(locale37);
        java.util.Locale.setDefault(locale17);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test12749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12749");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withYear(27);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test12750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12750");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        boolean boolean31 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        java.util.Locale locale34 = null;
        int int35 = property33.getMaximumTextLength(locale34);
        java.lang.String str36 = property33.getAsString();
        int int37 = property33.get();
        org.joda.time.DurationField durationField38 = property33.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property33.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime13.withField(dateTimeFieldType39, 754);
        org.joda.time.LocalDateTime.Property property42 = localDateTime13.yearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime13.withCenturyOfEra(825);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test12751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12751");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(durationFieldType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusYears(34558597);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12752");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.Date date20 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withMillisOfSecond(9);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Feb 11 09:43:23 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12753");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = property8.getAsText(locale11);
        java.lang.String str15 = nameProvider0.getName(locale11, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.clear();
        java.util.Locale.Builder builder21 = builder17.setLanguageTag("zh");
        java.util.Locale locale22 = builder17.build();
        java.lang.String str25 = nameProvider0.getShortName(locale22, "12", "2122-02-11T09:35:30.958Z");
        java.util.Locale locale28 = new java.util.Locale("2122-02-11T09:35:34.361Z", "");
        java.lang.String str31 = nameProvider0.getShortName(locale28, "", "2122-02-11T09:36:00.199Z");
        java.lang.String str32 = locale28.getDisplayName();
        java.util.Locale.setDefault(locale28);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        java.lang.String str43 = property42.getAsShortText();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime46 = property42.setCopy("35", locale45);
        org.joda.time.LocalDateTime localDateTime47 = property42.roundFloorCopy();
        java.lang.String str48 = property42.getAsShortText();
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category49, locale50);
        java.lang.String str52 = property42.getAsText(locale50);
        java.lang.String str53 = locale50.getLanguage();
        java.lang.String str54 = locale50.toLanguageTag();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.lang.String str58 = locale50.getDisplayLanguage(locale55);
        java.lang.String str59 = locale28.getDisplayCountry(locale55);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals(locale28.toString(), "2122-02-11t09:35:34.361z");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11t09:35:34.361z" + "'", str32, "2122-02-11t09:35:34.361z");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "43" + "'", str43, "43");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "43" + "'", str48, "43");
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category49.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "43" + "'", str52, "43");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "de" + "'", str53, "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de-DE" + "'", str54, "de-DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u5fb7\u6587" + "'", str58, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test12754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12754");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(6178242);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12755");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(0);
        boolean boolean24 = dateTimeZone11.isLocalDateTimeGap(localDateTime21);
        long long28 = dateTimeZone11.convertLocalToUTC((long) 1, true, 100L);
        long long30 = dateTimeZone2.getMillisKeepLocal(dateTimeZone11, 4800245711010L);
        java.lang.String str31 = dateTimeZone2.getID();
        boolean boolean33 = dateTimeZone2.isStandardOffset((long) 394);
        int int35 = dateTimeZone2.getOffset(0L);
        int int37 = dateTimeZone2.getStandardOffset((long) 445);
        boolean boolean39 = dateTimeZone2.isStandardOffset((long) 34694429);
        java.lang.String str41 = dateTimeZone2.getNameKey((long) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-31L) + "'", long28 == (-31L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4800240010978L + "'", long30 == 4800240010978L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:35" + "'", str31, "-01:35");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-5700000) + "'", int35 == (-5700000));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-5700000) + "'", int37 == (-5700000));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test12756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12756");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone6 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int8 = fixedDateTimeZone6.getStandardOffset((long) 529);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = property37.getDifference(readableInstant38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        int int45 = property37.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property37.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        boolean boolean70 = dateTime49.isBefore(readableInstant68);
        boolean boolean71 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int72 = fixedDateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime28);
        long long74 = fixedDateTimeZone6.previousTransition(4800245716316L);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((-3155679300L), (org.joda.time.DateTimeZone) fixedDateTimeZone6);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(0L, (org.joda.time.DateTimeZone) fixedDateTimeZone6);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfDay(900);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T09:43:23.010+00:00:00.032" + "'", str29, "2122-02-11T09:43:23.010+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 32 + "'", int72 == 32);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 4800245716316L + "'", long74 == 4800245716316L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test12757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12757");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusSeconds(779);
        int int5 = localDateTime2.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test12758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12758");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        int int20 = property12.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime22 = property12.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.DateTime dateTime26 = localDateTime0.toDateTime(dateTimeZone25);
        java.lang.String str27 = dateTimeZone25.getID();
        java.lang.String str28 = dateTimeZone25.toString();
        int int30 = dateTimeZone25.getStandardOffset(4800245752496L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str27, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str28, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test12759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12759");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis((-798211));
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMillis(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.minuteOfHour();
        boolean boolean39 = property37.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.centuryOfEra();
        boolean boolean42 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime25.minusYears(529);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withDayOfYear((int) '4');
        int int49 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime46.withWeekOfWeekyear(602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 602 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 127 + "'", int3 == 127);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test12760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12760");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        java.util.Date date47 = localDateTime44.toDate();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withMillisOfSecond(9);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond(34);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra(34703529);
        boolean boolean55 = localDateTime26.equals((java.lang.Object) localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Feb 11 09:43:24 GMT+00:00 2122");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test12761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12761");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale5.getDisplayCountry(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = locale13.getUnicodeLocaleType("German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: German (Germany)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test12762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12762");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("\u516c\u5143", "2122-02-11T08:00:15.629-01:35", (int) '#', 386);
        long long6 = fixedDateTimeZone4.nextTransition((long) 503);
        int int8 = fixedDateTimeZone4.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusMillis(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = property57.getDifference(readableInstant58);
        java.util.Locale locale63 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        int int65 = property57.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property57.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        long long70 = dateTime69.getMillis();
        int int71 = property41.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int72 = property33.getDifference((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime69.getZone();
        int int74 = fixedDateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean76 = fixedDateTimeZone4.equals((java.lang.Object) 4800245781656L);
        java.util.TimeZone timeZone77 = fixedDateTimeZone4.toTimeZone();
        java.lang.String str78 = timeZone77.getDisplayName();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 503L + "'", long6 == 503L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4800246203174L + "'", long70 == 4800246203174L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-100) + "'", int72 == (-100));
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GMT+00:00" + "'", str78, "GMT+00:00");
    }

    @Test
    public void test12763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12763");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMillis(394);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("-01:35", "22", 11, 582);
        int int20 = fixedDateTimeZone18.getOffset((long) '#');
        org.joda.time.DateTime dateTime21 = localDateTime11.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test12764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12764");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.centuryOfEra();
        int int6 = localDateTime4.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(34588512);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12765");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((int) '4');
        int int7 = localDateTime6.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDateTime6.isSupported(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 279 + "'", int3 == 279);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test12766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12766");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withMinuteOfHour(18);
        boolean boolean70 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        long long78 = dateTimeZone75.nextTransition((long) (short) 1);
        long long80 = dateTimeZone75.previousTransition((long) (short) -1);
        boolean boolean82 = dateTimeZone75.isStandardOffset((long) 362);
        java.lang.String str84 = dateTimeZone75.getName(4800245733251L);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime72, dateTimeZone75);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.weekOfWeekyear();
        long long87 = property86.remainder();
        org.joda.time.LocalDateTime localDateTime88 = property86.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246203285L + "'", long55 == 4800246203285L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-01:35" + "'", str84, "-01:35");
        org.junit.Assert.assertNotNull(property86);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 380603000L + "'", long87 == 380603000L);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test12767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12767");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zho");
        java.util.Locale locale5 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getLanguage();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getLanguage();
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale25, locale27, locale28, locale32, locale35, locale37, locale41, locale43, locale48, locale53, locale58, locale61 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        boolean boolean65 = strSet23.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.stream.Stream<java.util.Locale> localeStream77 = localeList74.stream();
        boolean boolean78 = strSet23.containsAll((java.util.Collection<java.util.Locale>) localeList74);
        boolean boolean79 = strSet6.removeAll((java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale locale86 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale86 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList88);
        boolean boolean91 = strSet6.retainAll((java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList88);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch" + "'", str26, "Italienisch");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italienisch" + "'", str44, "Italienisch");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(locale92);
    }

    @Test
    public void test12768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12768");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.addToCopy(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMonths(661);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusSeconds(679);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMinutes(526);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra(345290);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMinutes(765);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246203376L + "'", long36 == 4800246203376L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test12769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12769");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:42:25.736");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:42:25.736' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12770");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusYears(838);
        org.joda.time.Chronology chronology7 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.year();
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.centuryOfEra();
        long long10 = property9.remainder();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1511187396549L) + "'", long10 == (-1511187396549L));
    }

    @Test
    public void test12771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12771");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean25 = strSet20.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Collection<java.util.Locale> localeCollection29 = null;
        java.util.Locale locale30 = java.util.Locale.lookup(languageRangeList28, localeCollection29);
        org.joda.time.tz.Provider provider31 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet32 = provider31.getAvailableIDs();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList28, (java.util.Collection<java.lang.String>) strSet32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(4800245778100L);
        int int36 = localDateTime35.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        boolean boolean38 = strSet32.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withSecondOfMinute((int) (byte) 10);
        boolean boolean52 = strSet32.equals((java.lang.Object) localDateTime49);
        java.lang.Object obj53 = null;
        boolean boolean54 = strSet32.equals(obj53);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(provider31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12772");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str27 = nameProvider0.getShortName(locale24, "2022-01-09T11:35:10.211", "France");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long33 = dateTimeZone29.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        java.lang.String str34 = dateTimeZone29.getID();
        java.lang.String str35 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.dayOfMonth();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder50.setExtension('x', "Italian");
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder56 = builder50.setLocale(locale55);
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMillis(0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.minuteOfHour();
        boolean boolean67 = property65.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime68 = property65.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.year();
        org.joda.time.LocalDateTime localDateTime73 = property71.addWrapFieldToCopy(529);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale75);
        int int77 = property71.getMaximumTextLength(locale75);
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder79 = builder57.setLocale(locale75);
        int int80 = property49.getMaximumTextLength(locale75);
        java.lang.String str81 = dateTimeZone29.getShortName((long) 715, locale75);
        java.lang.String str84 = nameProvider0.getShortName(locale75, "6", "2122-02-11T09:35:44.951Z");
        java.util.Locale locale86 = new java.util.Locale("2122-02-11T09:36:25.013Z");
        java.lang.String str89 = nameProvider0.getName(locale86, "\uc911\uad6d\uc5b4", "2122-02-11T09:37:17.871Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4800245707737L + "'", long33 == 4800245707737L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals(locale86.toString(), "2122-02-11t09:36:25.013z");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test12773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12773");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:35:21.183");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(161);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withSecondOfMinute(619);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 619 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test12774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12774");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean64 = dateTime40.equals((java.lang.Object) 897);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime40.getZone();
        long long69 = dateTimeZone65.convertLocalToUTC(4800245980966L, true, 4800245714543L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:23.581+00:00:00.032" + "'", str20, "2122-02-11T09:43:23.581+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4800245980934L + "'", long69 == 4800245980934L);
    }

    @Test
    public void test12775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12775");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        int int41 = localDateTime40.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        boolean boolean49 = localDateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime53 = property50.addWrapFieldToCopy(529);
        int int54 = localDateTime53.getEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks(904);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusSeconds(531);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246203579L + "'", long36 == 4800246203579L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test12776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12776");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        int[] intArray7 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(272);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        int int11 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 1, 10, 35003647]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 272 + "'", int11 == 272);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12777");
        java.util.Locale locale2 = new java.util.Locale("2122-02-11T09:35:42.779Z", "2122-02-11T08:04:17.109-01:35");
        org.junit.Assert.assertEquals(locale2.toString(), "2122-02-11t09:35:42.779z_2122-02-11T08:04:17.109-01:35");
    }

    @Test
    public void test12778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12778");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T09:36:29.423Z");
        timeZone1.setID("14");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone8 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long10 = fixedDateTimeZone8.nextTransition((long) (byte) 100);
        int int12 = fixedDateTimeZone8.getOffsetFromLocal(4800245715085L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone8.toTimeZone();
        int int15 = fixedDateTimeZone8.getOffsetFromLocal(3576983560L);
        java.lang.String str17 = fixedDateTimeZone8.getNameKey(4800245852772L);
        java.util.TimeZone timeZone18 = fixedDateTimeZone8.toTimeZone();
        boolean boolean19 = timeZone1.hasSameRules(timeZone18);
        java.lang.String str20 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str17, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "14" + "'", str20, "14");
    }

    @Test
    public void test12779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12779");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long7 = fixedDateTimeZone5.previousTransition((long) 9);
        boolean boolean9 = fixedDateTimeZone5.isStandardOffset(4800245710661L);
        int int11 = fixedDateTimeZone5.getStandardOffset((long) (-798211));
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int13 = localDateTime12.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 9L + "'", long7 == 9L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test12780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12780");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2122-02-11T09:39:14.748Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12781");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property34 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.Interval interval36 = property34.toInterval();
        java.util.Locale locale40 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        boolean boolean41 = property34.equals((java.lang.Object) "Tempo universale coordinato");
        java.lang.String str42 = property34.getAsString();
        org.joda.time.LocalDateTime localDateTime43 = property34.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test12782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12782");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMillis((int) (byte) 10);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime4.plusSeconds((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plus(readablePeriod28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withCenturyOfEra(924);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test12783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12783");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(862, 5, 397, (int) (short) 1, 0, 55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 397 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12784");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setLanguageTag("zh");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        java.lang.String str17 = locale7.getDisplayCountry(locale15);
        java.lang.String str18 = locale7.toLanguageTag();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category20);
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale24);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Deutschland" + "'", str25, "Deutschland");
    }

    @Test
    public void test12785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12785");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:35:47.237", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:35:47.237");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12786");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(787);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12787");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusMillis((int) (byte) 10);
        boolean boolean27 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime13.plusYears(955);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.plus(readablePeriod30);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test12788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12788");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds(10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        int int14 = property13.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        java.lang.String str33 = property24.toString();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale34.getVariant();
        int int37 = property24.getMaximumShortTextLength(locale34);
        int int38 = property24.getMaximumValueOverall();
        java.lang.String str39 = property24.getAsShortText();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusHours(9);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        int int57 = property24.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int58 = property16.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[yearOfEra]" + "'", str33, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italienisch" + "'", str35, "Italienisch");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test12789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12789");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getCountry();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = property28.getAsText(locale31);
        java.lang.String str33 = property20.getAsShortText(locale31);
        java.lang.String str34 = locale0.getDisplayScript(locale31);
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale0.getDisplayLanguage(locale35);
        boolean boolean37 = locale0.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str42 = nameProvider38.getName(locale39, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str48 = nameProvider38.getName(locale44, "2122-02-11T09:35:10.520Z", "0035-02-11T09:35:18.575");
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder49.setExtension('x', "Italian");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder55 = builder49.setLocale(locale54);
        java.lang.String str58 = nameProvider38.getShortName(locale54, "2022-02-11T08:01:15.367", "hi!");
        java.lang.String str59 = locale0.getDisplayLanguage(locale54);
        java.util.Set<java.lang.String> strSet60 = locale0.getUnicodeLocaleKeys();
        boolean boolean62 = strSet60.contains((java.lang.Object) "2122-02-11T09:38:54.173Z");
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getDisplayVariant();
        java.lang.String str65 = locale63.toLanguageTag();
        java.util.Set<java.lang.String> strSet66 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        strSet71.clear();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale79 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale> localeStream84 = localeList81.stream();
        boolean boolean85 = strSet71.retainAll((java.util.Collection<java.util.Locale>) localeList81);
        boolean boolean86 = strSet66.retainAll((java.util.Collection<java.util.Locale>) localeList81);
        boolean boolean87 = strSet60.containsAll((java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale> localeStream88 = localeList81.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "23" + "'", str33, "23");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u6587" + "'", str36, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanese" + "'", str59, "Japanese");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko" + "'", str65, "ko");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localeStream88);
    }

    @Test
    public void test12790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12790");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.util.Date date41 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date41);
        java.util.Date date43 = localDateTime42.toDate();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear(529);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withDayOfYear(20);
        int int54 = localDateTime53.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusHours(22);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) ' ');
        int int70 = localDateTime69.getMillisOfSecond();
        int int71 = localDateTime69.getYear();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plus(readablePeriod72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str80 = locale79.getDisplayScript();
        java.lang.String str81 = dateTimeZone76.getShortName(10L, locale79);
        long long84 = dateTimeZone76.adjustOffset((long) 10, false);
        java.lang.String str86 = dateTimeZone76.getNameKey(362L);
        org.joda.time.DateTime dateTime87 = localDateTime73.toDateTime(dateTimeZone76);
        long long88 = dateTime87.getMillis();
        long long89 = property55.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime87);
        java.util.Locale locale92 = new java.util.Locale("", "2122-02-11T09:35:30.958Z");
        java.lang.String str93 = locale92.getDisplayCountry();
        int int94 = property55.getMaximumShortTextLength(locale92);
        org.joda.time.LocalDateTime localDateTime95 = property55.roundHalfFloorCopy();
        boolean boolean96 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime95);
        int int97 = localDateTime95.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246203895L + "'", long36 == 4800246203895L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Jan 01 00:00:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35003927 + "'", int54 == 35003927);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 927 + "'", int70 == 927);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3220 + "'", int71 == 3220);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:35" + "'", str81, "-01:35");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10L + "'", long84 == 10L);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 39446997490927L + "'", long88 == 39446997490927L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1197L) + "'", long89 == (-1197L));
        org.junit.Assert.assertEquals(locale92.toString(), "_2122-02-11T09:35:30.958Z");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2122-02-11T09:35:30.958Z" + "'", str93, "2122-02-11T09:35:30.958Z");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test12791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12791");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfDay();
        int int17 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDayOfYear((int) 'u');
        int int20 = localDateTime19.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test12792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12792");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withYear(35);
        org.joda.time.DateTime dateTime37 = localDateTime28.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime28.withSecondOfMinute(116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test12793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12793");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(11);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(42);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMonths(550);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(438);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMonths((-1));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test12794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12794");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        boolean boolean4 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy(507);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        int int8 = property7.get();
        org.joda.time.DurationField durationField9 = property7.getLeapDurationField();
        boolean boolean10 = property7.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 24 + "'", int8 == 24);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test12795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12795");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundFloorCopy();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category20, locale21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("hi!");
        int int43 = property30.getMaximumShortTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.String str53 = property52.getAsShortText();
        org.joda.time.LocalDateTime localDateTime55 = property52.setCopy("35");
        int int56 = property52.getLeapAmount();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        int int58 = property52.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale42.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(category20, locale42);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str65 = locale64.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        java.lang.String str75 = property74.getAsShortText();
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime78 = property74.setCopy("35", locale77);
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale79);
        java.lang.String str81 = locale77.getDisplayVariant(locale79);
        java.lang.String str82 = locale64.getDisplayScript(locale77);
        java.util.Locale.setDefault(category20, locale64);
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale84);
        java.lang.String str86 = locale64.getDisplayCountry(locale84);
        java.lang.String str87 = locale17.getDisplayLanguage(locale64);
        java.lang.String str89 = locale17.getExtension('u');
        java.lang.String str90 = locale16.getDisplayLanguage(locale17);
        java.lang.String str91 = property12.getAsText(locale16);
        java.util.Locale locale92 = null;
        java.lang.String str93 = property12.getAsText(locale92);
        org.joda.time.LocalDateTime localDateTime95 = property12.addToCopy(736);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Koreanisch" + "'", str19, "Koreanisch");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "43" + "'", str53, "43");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "43" + "'", str75, "43");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "HI!" + "'", str86, "HI!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Korean" + "'", str87, "Korean");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str90, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "42" + "'", str91, "42");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "42" + "'", str93, "42");
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test12796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12796");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.era();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test12797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12797");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMonths(28878766);
        int int11 = localDateTime5.getMinuteOfHour();
        int int12 = localDateTime5.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
    }

    @Test
    public void test12798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12798");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        int int15 = timeZone13.getRawOffset();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("35");
        boolean boolean18 = timeZone13.hasSameRules(timeZone17);
        int int20 = timeZone13.getOffset(4800245859813L);
        java.util.TimeZone.setDefault(timeZone13);
        java.lang.String str22 = timeZone13.getDisplayName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT+00:00" + "'", str22, "GMT+00:00");
    }

    @Test
    public void test12799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12799");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u516c\u5143");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test12800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12800");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean1 = strSet0.isEmpty();
        boolean boolean3 = strSet0.add("2122-02-11T09:35:29.877Z");
        strSet0.clear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        int int7 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfWeek();
        int int9 = localDateTime6.getYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minus(readableDuration10);
        int int12 = localDateTime11.getDayOfYear();
        boolean boolean13 = strSet0.contains((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(693);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime11.getFields();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test12801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12801");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.convertUTCToLocal((long) 21);
        java.lang.String str13 = fixedDateTimeZone4.getNameKey(4800245796621L);
        long long15 = fixedDateTimeZone4.nextTransition((-5699883L));
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusMillis(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = property25.getDifference(readableInstant26);
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = property25.getAsText(locale28);
        java.lang.String str32 = nameProvider17.getName(locale28, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder33.setExtension('x', "Italian");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder39 = builder33.setLocale(locale38);
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getCountry();
        java.lang.String str42 = locale38.getDisplayLanguage(locale40);
        java.lang.String str45 = nameProvider17.getName(locale38, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category46, locale47);
        java.lang.String str49 = locale38.getDisplayVariant(locale47);
        java.lang.String str50 = fixedDateTimeZone4.getShortName(0L, locale47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.util.Locale locale56 = builder54.build();
        java.lang.String str57 = dateTimeZone51.getName((long) 34520736, locale56);
        java.lang.String str58 = locale47.getDisplayScript(locale56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMillis(0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfEra();
        org.joda.time.ReadableInstant readableInstant67 = null;
        int int68 = property66.getDifference(readableInstant67);
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        int int74 = property66.getMaximumTextLength(locale72);
        org.joda.time.LocalDateTime localDateTime76 = property66.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        java.util.Locale.Builder builder79 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder79.clearExtensions();
        boolean boolean81 = dateTime78.equals((java.lang.Object) builder80);
        java.util.Locale.Builder builder83 = builder80.setLanguage("deu");
        java.util.Locale locale84 = builder83.build();
        java.util.Locale locale85 = builder83.build();
        java.util.Locale locale86 = locale85.stripExtensions();
        java.lang.String str87 = locale56.getDisplayScript(locale85);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 27L + "'", long11 == 27L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str13, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-5699883L) + "'", long15 == (-5699883L));
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.006" + "'", str50, "+00:00:00.006");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "deu");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "deu");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test12802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12802");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        int int3 = localDateTime1.getMillisOfSecond();
        int int4 = localDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(883);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(724);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusDays(34654409);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime8.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = property24.getDifference(readableInstant25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        int int32 = property24.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property24.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        long long37 = dateTime36.getMillis();
        long long38 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 203 + "'", int3 == 203);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2905-02-11T09:43:24.203" + "'", str14, "2905-02-11T09:43:24.203");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4800246204203L + "'", long37 == 4800246204203L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 40855L + "'", long38 == 40855L);
    }

    @Test
    public void test12803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12803");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:37:45.548Z", "2122-02-11T09:35:38.617Z", 691, 453);
        boolean boolean5 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test12804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12804");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        boolean boolean34 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusMinutes((-100));
        int int38 = localDateTime37.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusDays(0);
        boolean boolean41 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime11.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property45 = localDateTime11.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test12805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12805");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(12);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusHours(28870402);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12806");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property21.setCopy("21");
        org.joda.time.LocalDateTime localDateTime26 = property21.setCopy("32");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = property21.setCopy(784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 784 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12807");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setRegion("2122-02-11T09:42:29.928Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:42:29.928Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test12808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12808");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int13 = localDateTime12.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekyear(100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(11);
        int int18 = localDateTime17.size();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusSeconds(42);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withPeriodAdded(readablePeriod21, 386);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusHours(9);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property43.getFieldType();
        boolean boolean45 = localDateTime37.isSupported(dateTimeFieldType44);
        boolean boolean46 = localDateTime17.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDateTime.Property property47 = localDateTime7.property(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test12809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12809");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str6 = fixedDateTimeZone4.getNameKey((long) (short) -1);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = fixedDateTimeZone4.getName((-31L), locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.032" + "'", str9, "+00:00:00.032");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test12810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12810");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property26.getDifference(readableInstant27);
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        int int34 = property26.getMaximumTextLength(locale32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime52 = property42.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        long long55 = dateTime54.getMillis();
        int int56 = property26.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime58 = property26.setCopy(100);
        boolean boolean59 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime16.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime16.withPeriodAdded(readablePeriod61, 77);
        java.util.Date date64 = localDateTime16.toDate();
        int int65 = localDateTime16.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime16.minus(readableDuration66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime16.plus(readablePeriod68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMillis(34877854);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 4800246204406L + "'", long55 == 4800246204406L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(date64);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Fri Feb 11 09:43:25 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test12811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12811");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        int int15 = property11.getMaximumTextLength(locale13);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('x', "Italian");
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
        java.util.Locale locale23 = builder16.build();
        java.util.Locale.Builder builder24 = builder16.clearExtensions();
        java.util.Locale.Builder builder25 = builder16.clear();
        java.util.Locale locale26 = builder25.build();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str29 = locale26.getDisplayScript(locale28);
        int int30 = property11.getMaximumShortTextLength(locale28);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.clear();
        java.util.Locale.Builder builder35 = builder31.setLanguageTag("zh");
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("ko");
        java.util.Locale locale38 = builder35.build();
        java.lang.String str39 = locale28.getDisplayCountry(locale38);
        java.lang.String str40 = locale28.getCountry();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test12812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12812");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.util.TimeZone timeZone6 = fixedDateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.secondOfMinute();
        org.joda.time.DurationField durationField26 = property25.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime27 = property25.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = property25.addWrapFieldToCopy(5);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet45);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.lang.Object obj52 = null;
        boolean boolean53 = strSet50.remove(obj52);
        boolean boolean54 = strSet50.isEmpty();
        boolean boolean56 = strSet50.add("");
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet50, filteringMode57);
        boolean boolean59 = localDateTime29.equals((java.lang.Object) languageRangeList31);
        boolean boolean60 = fixedDateTimeZone5.equals((java.lang.Object) localDateTime29);
        java.lang.String str62 = fixedDateTimeZone5.getName((-5700000L));
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 656, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long66 = fixedDateTimeZone5.convertLocalToUTC((long) 837, false);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("");
        java.lang.String str70 = fixedDateTimeZone5.getName((long) 814, locale69);
        int int72 = fixedDateTimeZone5.getStandardOffset((long) 39);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.032" + "'", str62, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 805L + "'", long66 == 805L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.032" + "'", str70, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test12813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12813");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245715938L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(5735993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5735993 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12814");
        java.util.Locale locale3 = new java.util.Locale("\u610f\u5927\u5229\u6587", "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:13.839-01:35");
        java.lang.String str4 = locale3.getDisplayName();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u610f\u5927\u5229\u6587\u610f\u5927\u5229\u6587_2122-02-11T08:00:13.839-01:35");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u610f\u5927\u5229\u6587\u610f\u5927\u5229\u6587,2122-02-11T08:00:13.839-01:35)" + "'", str4, "\u610f\u5927\u5229\u6587\u610f\u5927\u5229\u6587,2122-02-11T08:00:13.839-01:35)");
    }

    @Test
    public void test12815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12815");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        boolean boolean22 = dateTime19.equals((java.lang.Object) builder21);
        java.util.Locale.Builder builder24 = builder21.setLanguage("deu");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale locale26 = builder24.build();
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getDisplayName();
        java.lang.String str29 = locale26.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "deu");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "deu");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "deu" + "'", str29, "deu");
    }

    @Test
    public void test12816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12816");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 4);
        long long5 = dateTimeZone1.convertUTCToLocal((long) 999);
        long long8 = dateTimeZone1.convertLocalToUTC(0L, true);
        java.lang.String str10 = dateTimeZone1.getNameKey((long) 875);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 999L + "'", long5 == 999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test12817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12817");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = dateTimeZone0.getID();
        long long5 = dateTimeZone0.adjustOffset(137L, true);
        int int7 = dateTimeZone0.getOffsetFromLocal(4800245748782L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 137L + "'", long5 == 137L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12818");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(6);
        org.joda.time.DateTime dateTime15 = localDateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.lang.String str22 = dateTimeZone16.getName((long) 34520736, locale21);
        long long25 = dateTimeZone16.adjustOffset((long) (byte) 0, false);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusMillis(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfEra();
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = property53.getDifference(readableInstant54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        int int61 = property53.getMaximumTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime63 = property53.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime45.isBefore(readableInstant64);
        org.joda.time.Instant instant67 = dateTime45.toInstant();
        java.lang.String str68 = dateTime45.toString();
        int int69 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plusMillis(0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime70.minuteOfHour();
        boolean boolean79 = property77.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime80 = property77.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.dayOfYear();
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime();
        boolean boolean83 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean84 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Instant instant85 = dateTime15.toInstant();
        java.lang.String str86 = instant85.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2122-02-11T09:43:24.662Z" + "'", str68, "2122-02-11T09:43:24.662Z");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(instant85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0000-02-11T09:43:24.662Z" + "'", str86, "0000-02-11T09:43:24.662Z");
    }

    @Test
    public void test12819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12819");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 756);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.centuryOfEra();
        java.lang.String str11 = property10.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("0100-03-29T09:40:46.424");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0100-03-29T09:40:46.424\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "20" + "'", str11, "20");
    }

    @Test
    public void test12820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12820");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        boolean boolean40 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int int41 = localDateTime29.getYearOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime29.yearOfCentury();
        java.lang.String str43 = property42.getAsShortText();
        boolean boolean44 = property42.isLeap();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusMillis(0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfEra();
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = property52.getDifference(readableInstant53);
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        int int60 = property52.getMaximumTextLength(locale58);
        org.joda.time.LocalDateTime localDateTime62 = property52.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readableDuration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minusHours(9);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property85.getFieldType();
        boolean boolean87 = localDateTime79.isSupported(dateTimeFieldType86);
        int int88 = dateTime64.get(dateTimeFieldType86);
        int int89 = property42.compareTo((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean90 = property22.equals((java.lang.Object) property42);
        org.joda.time.LocalDateTime localDateTime91 = property42.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22" + "'", str43, "22");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2122-02-11T09:43:24.798Z" + "'", str65, "2122-02-11T09:43:24.798Z");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test12821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12821");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test12822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12822");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime2.minuteOfHour();
        long long16 = property15.remainder();
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = property15.compareTo(readablePartial17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 24861L + "'", long16 == 24861L);
    }

    @Test
    public void test12823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12823");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int[] intArray1 = localDateTime0.getValues();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        java.lang.String str5 = property2.toString();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str10 = nameProvider6.getName(locale7, "2122-02-11T08:00:12.990-01:35", "");
        java.lang.String str11 = locale7.getDisplayLanguage();
        int int12 = property2.getMaximumTextLength(locale7);
        java.util.Locale.setDefault(locale7);
        java.util.Set<java.lang.String> strSet14 = locale7.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("German");
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = strSet20.remove(obj22);
        boolean boolean24 = strSet20.isEmpty();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths(1);
        java.lang.String str29 = localDateTime25.toString("2022");
        boolean boolean30 = strSet20.equals((java.lang.Object) "2022");
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = strSet34.remove(obj36);
        boolean boolean38 = strSet34.isEmpty();
        java.lang.Object[] objArray39 = strSet34.toArray();
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        strSet44.clear();
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList54);
        java.util.stream.Stream<java.util.Locale> localeStream57 = localeList54.stream();
        boolean boolean58 = strSet44.retainAll((java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean59 = strSet34.retainAll((java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean60 = strSet20.removeAll((java.util.Collection<java.util.Locale>) localeList54);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean62 = strSet14.retainAll((java.util.Collection<java.util.Locale>) localeList54);
        org.junit.Assert.assertNotNull(intArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[2022, 2, 11, 35004887]");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[weekOfWeekyear]" + "'", str5, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "italiano" + "'", str11, "italiano");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[, hi!]");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(localeStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test12824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12824");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = property28.getDifference(readableInstant29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        int int36 = property28.getMaximumTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime38 = property28.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        boolean boolean61 = dateTime40.isBefore(readableInstant59);
        boolean boolean62 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = dateTime19.isAfter(readableInstant63);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime19.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey(4800245972289L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2122-02-11T09:43:24.942Z" + "'", str20, "2122-02-11T09:43:24.942Z");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
    }

    @Test
    public void test12825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12825");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("35");
        int int12 = property8.getLeapAmount();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.lang.String str17 = property8.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property8.addToCopy(3576950127L);
        org.joda.time.LocalDateTime localDateTime20 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears(521);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "43" + "'", str17, "43");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test12826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12826");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2122-02-11T09:36:28.950Z");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test12827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12827");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes(22);
        boolean boolean19 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        int int20 = localDateTime13.getEra();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readableDuration36);
        boolean boolean38 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        int int39 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusMillis(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = property47.getDifference(readableInstant48);
        java.util.Locale locale53 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        int int55 = property47.getMaximumTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusMillis(0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfEra();
        org.joda.time.ReadableInstant readableInstant64 = null;
        int int65 = property63.getDifference(readableInstant64);
        java.util.Locale locale69 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        int int71 = property63.getMaximumTextLength(locale69);
        org.joda.time.LocalDateTime localDateTime73 = property63.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime(readableInstant74);
        long long76 = dateTime75.getMillis();
        int int77 = property47.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalDateTime localDateTime79 = property47.setCopy(100);
        boolean boolean80 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime37.plusWeeks(538);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime37.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property86 = localDateTime37.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusDays(34599937);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = localDateTime87.getValue(279);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 279");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 4800246204999L + "'", long76 == 4800246204999L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test12828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12828");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(4800245713056L, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis(635);
        int int7 = localDateTime6.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
    }

    @Test
    public void test12829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12829");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(567);
        java.lang.String str3 = dateTimeZone1.getNameKey(4800245779341L);
        java.lang.String str5 = dateTimeZone1.getName(4800245707617L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.567" + "'", str5, "+00:00:00.567");
    }

    @Test
    public void test12830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12830");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long7 = fixedDateTimeZone5.previousTransition((long) 9);
        java.lang.String str8 = fixedDateTimeZone5.getID();
        boolean boolean9 = fixedDateTimeZone5.isFixed();
        long long11 = fixedDateTimeZone5.nextTransition(4800245735033L);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale.Builder builder17 = builder13.setLanguageTag("zh");
        java.util.Locale locale18 = builder13.build();
        java.lang.String str19 = fixedDateTimeZone5.getShortName(4800245729932L, locale18);
        long long21 = fixedDateTimeZone5.nextTransition(4800245708295L);
        java.lang.String str22 = fixedDateTimeZone5.toString();
        java.util.Locale locale26 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        int int28 = strSet27.size();
        java.util.Iterator<java.lang.String> strItor29 = strSet27.iterator();
        boolean boolean30 = fixedDateTimeZone5.equals((java.lang.Object) strSet27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(4800245874303L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(278);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 9L + "'", long7 == 9L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str8, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735033L + "'", long11 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.032" + "'", str19, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4800245708295L + "'", long21 == 4800245708295L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str22, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test12831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12831");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears(34588443);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12832");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4800245736066L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withSecondOfMinute(58);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(743);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(904);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test12833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12833");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property12.getDifference(readableInstant13);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = property12.getAsText(locale15);
        int int17 = property4.getMaximumTextLength(locale15);
        org.joda.time.Interval interval18 = property4.toInterval();
        java.util.Locale locale22 = new java.util.Locale("it", "GMT-01:35", "2122-02-11T09:35:20.746Z");
        java.lang.String str23 = property4.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime24 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertEquals(locale22.toString(), "it_GMT-01:35_2122-02-11T09:35:20.746Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "venerd\354" + "'", str23, "venerd\354");
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12834");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap17);
        boolean boolean19 = fixedDateTimeZone5.equals((java.lang.Object) strMap17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.minuteOfHour();
        java.lang.String str29 = property28.getAsShortText();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime32 = property28.setCopy("35", locale31);
        org.joda.time.LocalDateTime localDateTime33 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property28.roundHalfFloorCopy();
        int int35 = localDateTime34.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.weekOfWeekyear();
        boolean boolean37 = fixedDateTimeZone5.equals((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(4800245743691L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        boolean boolean39 = fixedDateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "43" + "'", str29, "43");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test12835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12835");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property8.toInterval();
        java.lang.String str16 = property8.getAsShortText();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleAttributes();
        int int21 = property8.getMaximumTextLength(locale17);
        org.joda.time.DurationField durationField22 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime23 = property8.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readableDuration24);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "43" + "'", str16, "43");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco" + "'", str18, "tedesco");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test12836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12836");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(15);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra((int) 'x');
        int int9 = localDateTime6.size();
        int int10 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        java.lang.String str17 = dateTimeZone11.getName((long) 34520736, locale16);
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime(dateTimeZone11);
        long long21 = dateTimeZone11.adjustOffset(4800245781637L, false);
        long long24 = dateTimeZone11.adjustOffset(4800245747102L, true);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) long24);
        int int26 = localDateTime25.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4800245781637L + "'", long21 == 4800245781637L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4800245747102L + "'", long24 == 4800245747102L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2122 + "'", int26 == 2122);
    }

    @Test
    public void test12837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12837");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusMillis((int) (byte) 10);
        boolean boolean27 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime13.plusYears(955);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        java.lang.String str31 = property30.getAsString();
        java.lang.String str32 = property30.getAsShortText();
        org.joda.time.DurationField durationField33 = property30.getDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "43" + "'", str31, "43");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "43" + "'", str32, "43");
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test12838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12838");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(34529046);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMinutes(22);
        int int18 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusDays(692);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((int) '4');
        boolean boolean23 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDurationAdded(readableDuration24, 193);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekOfWeekyear(975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 975 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12839");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusWeeks(59);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.minuteOfHour();
        boolean boolean19 = property17.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(10);
        java.lang.String str23 = localDateTime20.toString();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime26 = property24.addWrapFieldToCopy(615);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime26.toString(dateTimeFormatter27);
        int int29 = localDateTime26.getWeekOfWeekyear();
        boolean boolean30 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2023 + "'", int9 == 2023);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:43:00.000" + "'", str23, "2022-02-11T09:43:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2637-02-11T09:43:00.000" + "'", str28, "2637-02-11T09:43:00.000");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test12840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12840");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap17);
        boolean boolean19 = fixedDateTimeZone5.equals((java.lang.Object) strMap17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        boolean boolean37 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        int int38 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withYearOfCentury((int) (short) 0);
        boolean boolean41 = fixedDateTimeZone5.equals((java.lang.Object) (short) 0);
        java.lang.String str43 = fixedDateTimeZone5.getNameKey((long) 292278993);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime44.minuteOfHour();
        boolean boolean53 = property51.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DurationField durationField58 = property57.getDurationField();
        boolean boolean59 = fixedDateTimeZone5.equals((java.lang.Object) durationField58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime60.getFieldTypes();
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.year();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withWeekyear((int) (short) 0);
        boolean boolean67 = fixedDateTimeZone5.equals((java.lang.Object) localDateTime66);
        long long69 = fixedDateTimeZone5.nextTransition((long) 88);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1641807401264L, (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str43, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 88L + "'", long69 == 88L);
    }

    @Test
    public void test12841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12841");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("2122-02-11T09:35:32.577Z");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusHours(2122);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getName((long) (byte) 1);
        long long20 = dateTimeZone16.nextTransition((long) 2022);
        java.lang.String str22 = dateTimeZone16.getShortName((long) (short) 1);
        java.lang.String str24 = dateTimeZone16.getNameKey((long) (short) 0);
        org.joda.time.DateTime dateTime25 = localDateTime11.toDateTime(dateTimeZone16);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone16.getShortName(4800245715085L, locale30);
        long long34 = dateTimeZone16.convertUTCToLocal(4800245735269L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        boolean boolean36 = strSet6.equals((java.lang.Object) localDateTime35);
        java.lang.Object[] objArray37 = strSet6.toArray();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2022L + "'", long20 == 2022L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4800245735269L + "'", long34 == 4800245735269L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
    }

    @Test
    public void test12842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12842");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        int int7 = localDateTime6.getDayOfYear();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) int7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMinutes(22);
        int int15 = localDateTime11.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plus(readablePeriod16);
        int int18 = localDateTime11.size();
        boolean boolean19 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusMinutes(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 350 + "'", int15 == 350);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12843");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.yearOfCentury();
        java.lang.String str20 = property19.getAsShortText();
        java.lang.String str21 = property19.getAsShortText();
        int int22 = property19.getMinimumValueOverall();
        int int23 = property19.getMaximumValueOverall();
        java.util.Locale locale25 = new java.util.Locale("2122-02-11T09:37:46.844Z");
        java.lang.String str26 = property19.getAsText(locale25);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22" + "'", str20, "22");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
        org.junit.Assert.assertEquals(locale25.toString(), "2122-02-11t09:37:46.844z");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "22" + "'", str26, "22");
    }

    @Test
    public void test12844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12844");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str10 = locale5.getDisplayVariant(locale9);
        java.lang.String str11 = locale9.getVariant();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = property20.getDifference(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = property20.getAsText(locale23);
        java.lang.String str27 = nameProvider12.getName(locale23, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        int int43 = property35.getMaximumTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property35.addToCopy((int) (byte) 100);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("hi!");
        int int48 = property35.getMaximumShortTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.minuteOfHour();
        java.lang.String str58 = property57.getAsShortText();
        org.joda.time.LocalDateTime localDateTime60 = property57.setCopy("35");
        int int61 = property57.getLeapAmount();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        int int63 = property57.getMaximumShortTextLength(locale62);
        java.lang.String str64 = locale47.getDisplayLanguage(locale62);
        java.lang.String str65 = locale47.toLanguageTag();
        java.lang.String str68 = nameProvider12.getName(locale47, "hi!", "1");
        java.lang.String str69 = locale9.getDisplayScript(locale47);
        java.util.Locale.setDefault(category0, locale47);
        java.util.Locale locale71 = java.util.Locale.getDefault(category0);
        java.util.Locale locale72 = java.util.Locale.getDefault(category0);
        java.util.Locale locale73 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.plusMillis(0);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.yearOfEra();
        org.joda.time.ReadableInstant readableInstant82 = null;
        int int83 = property81.getDifference(readableInstant82);
        java.util.Locale locale87 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleAttributes();
        int int89 = property81.getMaximumTextLength(locale87);
        org.joda.time.LocalDateTime localDateTime91 = property81.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField92 = property81.getDurationField();
        java.lang.String str93 = property81.getName();
        java.lang.String str94 = property81.toString();
        java.util.Locale locale95 = java.util.Locale.JAPAN;
        java.lang.String str96 = locale95.getDisplayName();
        int int97 = property81.getMaximumShortTextLength(locale95);
        java.util.Locale.setDefault(category0, locale95);
        java.util.Locale locale99 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "43" + "'", str58, "43");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "yearOfEra" + "'", str93, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Property[yearOfEra]" + "'", str94, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Japanese (Japan)" + "'", str96, "Japanese (Japan)");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 9 + "'", int97 == 9);
        org.junit.Assert.assertNotNull(locale99);
        org.junit.Assert.assertEquals(locale99.toString(), "ja_JP");
    }

    @Test
    public void test12845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12845");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((-798861), 623, 729, 859, 34782446, 34952340, 34655990, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 859 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test12846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12846");
        java.util.Locale locale1 = new java.util.Locale("hi! (HI!,hi!)");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plusMonths(709);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plus(readablePeriod17);
        int int19 = localDateTime18.getEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(34536263);
        boolean boolean22 = locale1.equals((java.lang.Object) 34536263);
        org.junit.Assert.assertEquals(locale1.toString(), "hi! (hi!,hi!)");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test12847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12847");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(durationFieldType3);
        int[] intArray5 = localDateTime2.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(35);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusHours(78);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(904);
        int int12 = localDateTime9.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2022, 1, 11, 35005526]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test12848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12848");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        int int2 = localDateTime1.getYearOfEra();
        int int3 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(1);
        java.lang.String str8 = localDateTime4.toString("2022");
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.DateTime dateTime30 = localDateTime4.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusMillis(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = property38.getDifference(readableInstant39);
        java.util.Locale locale44 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        int int46 = property38.getMaximumTextLength(locale44);
        org.joda.time.LocalDateTime localDateTime48 = property38.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = dateTimeZone50.getName((long) 292278993, locale52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime(dateTimeZone50);
        long long56 = dateTime55.getMillis();
        int int57 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime30.getZone();
        org.joda.time.DateTime dateTime59 = localDateTime1.toDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime59.getZone();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(4800245734361L, dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean65 = dateTimeZone63.isStandardOffset(4800245930100L);
        long long67 = dateTimeZone60.getMillisKeepLocal(dateTimeZone63, 4800246053266L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 25 + "'", int3 == 25);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 4800246205544L + "'", long56 == 4800246205544L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4800246053266L + "'", long67 == 4800246053266L);
    }

    @Test
    public void test12849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12849");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        int int20 = localDateTime17.getDayOfYear();
        int int21 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusHours(22);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) ' ');
        int int37 = localDateTime36.getMillisOfSecond();
        int int38 = localDateTime36.getYear();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plus(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = dateTimeZone43.getShortName(10L, locale46);
        long long51 = dateTimeZone43.adjustOffset((long) 10, false);
        java.lang.String str53 = dateTimeZone43.getNameKey(362L);
        org.joda.time.DateTime dateTime54 = localDateTime40.toDateTime(dateTimeZone43);
        long long55 = dateTime54.getMillis();
        java.lang.String str56 = dateTime54.toString();
        long long57 = dateTime54.getMillis();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime54.getZone();
        int int59 = property22.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime60 = property22.withMinimumValue();
        int int61 = property22.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 605 + "'", int37 == 605);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3220 + "'", int38 == 3220);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:35" + "'", str48, "-01:35");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 39446997490605L + "'", long55 == 39446997490605L);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "3220-01-10T09:43:10.605-01:35" + "'", str56, "3220-01-10T09:43:10.605-01:35");
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 39446997490605L + "'", long57 == 39446997490605L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 28 + "'", int61 == 28);
    }

    @Test
    public void test12850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12850");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readableDuration16);
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        int int19 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMillis(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.minuteOfHour();
        boolean boolean31 = property29.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.centuryOfEra();
        boolean boolean34 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusWeeks(4);
        org.joda.time.Chronology chronology37 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(4800245818170L, chronology37);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear(34763065);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test12851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12851");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfDay(779);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240011010L + "'", long31 == 4800240011010L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test12852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12852");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusDays(20);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.millisOfSecond();
        int int17 = localDateTime10.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test12853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12853");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.minuteOfHour();
        boolean boolean11 = property9.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.lang.String str23 = property9.getAsText(locale21);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet24, filteringMode25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.minuteOfHour();
        boolean boolean36 = property34.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.weekOfWeekyear();
        boolean boolean40 = strSet24.contains((java.lang.Object) localDateTime37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.era();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "43" + "'", str23, "43");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test12854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12854");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(11);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withPeriodAdded(readablePeriod7, 228);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localDateTime9.getField(928);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 928");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test12855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12855");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.removeUnicodeLocaleAttribute("2022-02-11T09:36:21.380");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:36:21.380 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12856");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        java.util.Locale locale11 = builder0.build();
        java.util.Locale locale12 = builder0.build();
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguageTag("2122-02-11T09:43:12.771+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2122 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12857");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        int int10 = fixedDateTimeZone4.getStandardOffset((long) (-798211));
        boolean boolean11 = fixedDateTimeZone4.isFixed();
        long long13 = fixedDateTimeZone4.previousTransition((long) 787);
        boolean boolean14 = fixedDateTimeZone4.isFixed();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 787L + "'", long13 == 787L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test12858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12858");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfEra();
        int int2 = localDateTime0.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury(104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 104 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 25 + "'", int2 == 25);
    }

    @Test
    public void test12859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12859");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks(1);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusHours(22);
        int int47 = localDateTime46.getYear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        int int49 = localDateTime46.getCenturyOfEra();
        boolean boolean50 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int int51 = localDateTime46.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test12860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12860");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property8.addWrapFieldToCopy(595);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12861");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(100L);
        java.lang.String str14 = dateTimeZone10.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        int int22 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        java.lang.String str25 = property24.getAsShortText();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime28 = property24.setCopy("35", locale27);
        org.joda.time.LocalDateTime localDateTime29 = property24.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekyear();
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.year();
        int int51 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.withField(dateTimeFieldType57, 13);
        int int60 = localDateTime48.get(dateTimeFieldType57);
        int int61 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.Chronology chronology62 = localDateTime48.getChronology();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime48.minus(readablePeriod63);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = localDateTime48.toString("+00:00:00.011", locale66);
        java.lang.String str68 = dateTimeZone10.getShortName((long) 524, locale66);
        java.util.TimeZone timeZone69 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = timeZone69.getOffset(432, 187, 856, 756, 623, 649);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 432");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "43" + "'", str25, "43");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 25 + "'", int51 == 25);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.011" + "'", str67, "+00:00:00.011");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone70);
    }

    @Test
    public void test12862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12862");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime13.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYear(32);
        java.util.Date date18 = localDateTime13.toDate();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMillis(277);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(153);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Jan 10 09:43:26 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12863");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        java.lang.String str4 = localDateTime0.toString("2022");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMonths(42);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(4800245773888L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        int int19 = localDateTime8.indexOf(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test12864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12864");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.millisOfSecond();
        java.lang.String str22 = localDateTime16.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:43:25.968" + "'", str22, "2022-02-11T09:43:25.968");
    }

    @Test
    public void test12865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12865");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale8 = new java.util.Locale("2122-02-11T09:35:07.818Z", "", "Property[yearOfEra]");
        java.lang.String str11 = nameProvider0.getShortName(locale8, "ita", "2122-02-11T09:35:10.520Z");
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.lang.String str18 = nameProvider0.getShortName(locale12, "und", "2122-02-11T09:35:41.308Z");
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getCountry();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        int int37 = localDateTime36.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        boolean boolean41 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = property50.getAsText(locale53);
        java.lang.String str55 = property42.getAsShortText(locale53);
        java.lang.String str56 = locale22.getDisplayScript(locale53);
        java.util.Locale.Builder builder57 = builder19.setLocale(locale22);
        java.util.Locale locale60 = new java.util.Locale("2122-02-11T09:35:07.696Z", "2022-02-11T09:35:19.652");
        java.lang.String str61 = locale60.getDisplayVariant();
        java.lang.String str62 = locale22.getDisplayCountry(locale60);
        java.lang.String str65 = nameProvider0.getName(locale60, "", "Giappone");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals(locale8.toString(), "2122-02-11t09:35:07.818z__Property[yearOfEra]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "26" + "'", str55, "26");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals(locale60.toString(), "2122-02-11t09:35:07.696z_2022-02-11T09:35:19.652");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test12866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12866");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.String str32 = property31.getAsShortText();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime35 = property31.setCopy("35", locale34);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = locale34.getDisplayVariant(locale36);
        int int39 = property21.getMaximumTextLength(locale34);
        org.joda.time.DateTimeField dateTimeField40 = property21.getField();
        java.util.Locale locale44 = new java.util.Locale("2122-02-11T09:35:08.397Z", "UTC", "hi!");
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale49 = new java.util.Locale("2122-02-11T09:36:25.503Z", "2022-02-11T09:35:42.902", "2122-02-11T09:37:39.912Z");
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale44.getDisplayScript(locale49);
        java.util.Set<java.lang.Character> charSet52 = locale44.getExtensionKeys();
        java.lang.String str53 = property21.getAsShortText(locale44);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "43" + "'", str32, "43");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "2122-02-11t09:35:08.397z_UTC_hi!");
        org.junit.Assert.assertEquals(locale49.toString(), "2122-02-11t09:36:25.503z_2022-02-11T09:35:42.902_2122-02-11T09:37:39.912Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2122-02-11t09:36:25.503z" + "'", str50, "2122-02-11t09:36:25.503z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(charSet52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "43" + "'", str53, "43");
    }

    @Test
    public void test12867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12867");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        java.lang.String str13 = property11.getAsText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "34990074" + "'", str13, "34990074");
    }

    @Test
    public void test12868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12868");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusMillis(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = property27.getDifference(readableInstant28);
        java.util.Locale locale33 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        int int35 = property27.getMaximumTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime37 = property27.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        boolean boolean40 = dateTime19.isBefore(readableInstant38);
        org.joda.time.Instant instant41 = dateTime19.toInstant();
        java.lang.String str42 = dateTime19.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime43.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours((int) ' ');
        boolean boolean59 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTime dateTime60 = localDateTime43.toDateTime();
        boolean boolean61 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = dateTime19.isAfter(readableInstant62);
        long long64 = dateTime19.getMillis();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122-02-11T09:43:26.091Z" + "'", str42, "2122-02-11T09:43:26.091Z");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 4800246206091L + "'", long64 == 4800246206091L);
    }

    @Test
    public void test12869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12869");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(15);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        java.util.Date date8 = localDateTime6.toDate();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime6.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        int int12 = localDateTime11.getYearOfCentury();
        int int13 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(1);
        java.lang.String str20 = localDateTime16.toString("2022");
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withSecondOfMinute(5);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withWeekyear(5735993);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusWeeks(97);
        boolean boolean30 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime6.year();
        org.joda.time.LocalDateTime.Property property32 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfCeilingCopy();
        int int34 = property32.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:43:27 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120 + "'", int13 == 120);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test12870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12870");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = property8.getDifference(readableInstant9);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        int int16 = property8.getMaximumTextLength(locale14);
        java.lang.String str17 = property8.toString();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale18.getVariant();
        int int21 = property8.getMaximumShortTextLength(locale18);
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray23 = strSet22.toArray();
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider24);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider24);
        boolean boolean27 = strSet22.contains((java.lang.Object) nameProvider24);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider24);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        java.lang.String str38 = property37.getAsShortText();
        int int39 = property37.getMaximumValue();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = property37.getAsShortText(locale40);
        java.lang.String str42 = locale40.getDisplayName();
        java.lang.String str43 = locale40.getVariant();
        java.lang.String str46 = nameProvider24.getName(locale40, "2122-02-11T09:36:05.921Z", "2122-02-11T09:35:31.033Z");
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusMillis(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime47.minuteOfHour();
        boolean boolean56 = property54.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime57 = property54.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMillis(0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.yearOfEra();
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.lang.String str67 = property65.getAsShortText(locale66);
        java.lang.String str68 = property54.getAsText(locale66);
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str72 = nameProvider24.getName(locale66, "15", "2022-02-11T09:36:53.760");
        boolean boolean73 = locale0.equals((java.lang.Object) "15");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "italiano" + "'", str19, "italiano");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "43" + "'", str38, "43");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "43" + "'", str41, "43");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tedesco (Germania)" + "'", str42, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022" + "'", str67, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "43" + "'", str68, "43");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12871");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str27 = nameProvider0.getShortName(locale24, "2022-01-09T11:35:10.211", "France");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long33 = dateTimeZone29.convertLocalToUTC(4800245707737L, false, 4800245707617L);
        java.lang.String str34 = dateTimeZone29.getID();
        java.lang.String str35 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.dayOfMonth();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder50.setExtension('x', "Italian");
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder56 = builder50.setLocale(locale55);
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMillis(0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.minuteOfHour();
        boolean boolean67 = property65.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime68 = property65.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.year();
        org.joda.time.LocalDateTime localDateTime73 = property71.addWrapFieldToCopy(529);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale75);
        int int77 = property71.getMaximumTextLength(locale75);
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder79 = builder57.setLocale(locale75);
        int int80 = property49.getMaximumTextLength(locale75);
        java.lang.String str81 = dateTimeZone29.getShortName((long) 715, locale75);
        java.lang.String str84 = nameProvider0.getShortName(locale75, "6", "2122-02-11T09:35:44.951Z");
        java.lang.String str85 = locale75.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4800245707737L + "'", long33 == 4800245707737L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12872");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-64));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12873");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:42:37.754", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12874");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh", strMap1);
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = strSet6.remove(obj8);
        boolean boolean10 = strSet6.isEmpty();
        boolean boolean12 = strSet6.add("");
        strSet6.clear();
        boolean boolean14 = strSet6.isEmpty();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Iterator<java.lang.String> strItor16 = strSet6.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale locale31 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = strSet37.remove(obj39);
        boolean boolean42 = strSet37.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap44);
        java.util.Collection<java.util.Locale> localeCollection46 = null;
        java.util.Locale locale47 = java.util.Locale.lookup(languageRangeList45, localeCollection46);
        java.util.Collection<java.lang.String> strCollection48 = null;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList45, strCollection48);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.stream.Stream<java.util.Locale> localeStream61 = localeList58.stream();
        java.util.stream.Stream<java.util.Locale> localeStream62 = localeList58.parallelStream();
        java.util.Locale locale63 = java.util.Locale.lookup(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList58);
        boolean boolean64 = strSet6.retainAll((java.util.Collection<java.util.Locale>) localeList58);
        java.util.stream.Stream<java.util.Locale> localeStream65 = localeList58.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream66 = localeList58.parallelStream();
        java.util.stream.Stream<java.util.Locale> localeStream67 = localeList58.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeStream61);
        org.junit.Assert.assertNotNull(localeStream62);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeStream65);
        org.junit.Assert.assertNotNull(localeStream66);
        org.junit.Assert.assertNotNull(localeStream67);
    }

    @Test
    public void test12875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12875");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(305);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.DateTime dateTime26 = localDateTime23.toDateTime();
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test12876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12876");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 4800246037787L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.800246037787E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12877");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = property10.getDifference(readableInstant13);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test12878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12878");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(529);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale17);
        int int19 = property13.getMaximumTextLength(locale17);
        java.util.Locale locale20 = java.util.Locale.US;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.lang.String str24 = locale17.getDisplayScript(locale20);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('x', "Italian");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder31 = builder25.setLocale(locale30);
        java.util.Locale locale32 = builder25.build();
        java.util.Locale.Builder builder33 = builder25.clearExtensions();
        java.util.Locale.Builder builder34 = builder25.clear();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.lang.String str39 = locale17.getDisplayScript(locale37);
        java.lang.String str40 = locale17.getDisplayScript();
        boolean boolean42 = locale17.equals((java.lang.Object) "2122-02-11T09:37:39.210Z");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test12879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12879");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        org.joda.time.DurationField durationField11 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test12880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12880");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale locale7 = builder4.build();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = property15.getDifference(readableInstant16);
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        int int23 = property15.getMaximumTextLength(locale21);
        org.joda.time.LocalDateTime localDateTime25 = property15.addToCopy((int) (byte) 100);
        int int26 = localDateTime25.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.era();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property28.withMinimumValue();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "Italian");
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder37 = builder31.setLocale(locale36);
        java.util.Locale locale38 = builder31.build();
        java.util.Locale.Builder builder39 = builder31.clearExtensions();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = builder40.build();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.String str44 = property28.getAsText(locale43);
        java.lang.String str45 = locale7.getDisplayName(locale43);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AD" + "'", str44, "AD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test12881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12881");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(292278993);
        int int10 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property7.withMinimumValue();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withCenturyOfEra(34914092);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34914092 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test12882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12882");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("hi!");
        int int36 = property23.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy("35");
        int int49 = property45.getLeapAmount();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale35.getDisplayLanguage(locale50);
        java.lang.String str53 = locale35.getCountry();
        java.lang.String str54 = property14.getAsShortText(locale35);
        int int55 = property14.getMaximumValue();
        org.joda.time.Interval interval56 = property14.toInterval();
        java.lang.String str57 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "43" + "'", str46, "43");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Fri" + "'", str54, "Fri");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven" + "'", str57, "ven");
    }

    @Test
    public void test12883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12883");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfYear(20);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.minuteOfHour();
        boolean boolean19 = property17.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(10);
        java.lang.String str23 = localDateTime20.toString();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        int int31 = localDateTime30.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        java.lang.String str34 = property33.getAsShortText();
        org.joda.time.LocalDateTime localDateTime36 = property33.setCopy("35");
        int int37 = property33.getLeapAmount();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        int int39 = property33.getMaximumShortTextLength(locale38);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = property33.getAsText(locale41);
        int int43 = property24.getMaximumShortTextLength(locale41);
        java.lang.String str44 = property9.getAsShortText(locale41);
        org.joda.time.LocalDateTime localDateTime45 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.weekOfWeekyear();
        java.lang.String str48 = property47.getAsString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35006486 + "'", int8 == 35006486);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:43:00.000" + "'", str23, "2022-02-11T09:43:00.000");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "43" + "'", str34, "43");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "43" + "'", str42, "43");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "dopo Cristo" + "'", str44, "dopo Cristo");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
    }

    @Test
    public void test12884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        java.lang.String str20 = fixedDateTimeZone18.getNameKey((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone18, 5700001L);
        int int24 = fixedDateTimeZone18.getStandardOffset(4800245714191L);
        java.util.TimeZone timeZone25 = fixedDateTimeZone18.toTimeZone();
        java.lang.String str26 = fixedDateTimeZone18.toString();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.DateTimeZone) fixedDateTimeZone18);
        java.lang.String str29 = fixedDateTimeZone18.getNameKey(4800245824048L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian" + "'", str20, "Italian");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5699969L + "'", long22 == 5699969L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str26, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian" + "'", str29, "Italian");
    }

    @Test
    public void test12885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12885");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        boolean boolean33 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = property42.getDifference(readableInstant43);
        java.util.Locale locale48 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        int int50 = property42.getMaximumTextLength(locale48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusMillis(0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.ReadableInstant readableInstant59 = null;
        int int60 = property58.getDifference(readableInstant59);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        int int66 = property58.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime68 = property58.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        long long71 = dateTime70.getMillis();
        int int72 = property42.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalDateTime localDateTime74 = property42.setCopy(100);
        boolean boolean75 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withCenturyOfEra(669);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.yearOfEra();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.minusWeeks(237);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.withDurationAdded(readableDuration84, 34561314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4800246206537L + "'", long71 == 4800246206537L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test12886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12886");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setExtension('#', "2022-02-10T01:38:29.870");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test12887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12887");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "Italian");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.clear();
        java.util.Locale.Builder builder10 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        java.lang.String str27 = property18.toString();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getVariant();
        int int31 = property18.getMaximumShortTextLength(locale28);
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        boolean boolean37 = strSet32.contains((java.lang.Object) nameProvider34);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider34);
        java.util.Locale locale39 = java.util.Locale.PRC;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale.setDefault(locale39);
        java.lang.String str44 = nameProvider34.getShortName(locale39, "2122-02-11T08:00:16.821-01:35", "2122-02-11T08:00:11.407-01:35");
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale39.getDisplayName(locale45);
        java.util.Locale.Builder builder47 = builder0.setLocale(locale45);
        java.util.Locale.Builder builder48 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder0.setRegion("2122-02-11T09:43:23.581+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2122-02-11T09:43:23.581+00:00:00.032 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[yearOfEra]" + "'", str27, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "italiano" + "'", str29, "italiano");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str46, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test12888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12888");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2122-02-11T09:40:56.668+00:00:00.032", (double) 3576983555L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.576983555E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12889");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2637-02-11T09:39:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2637-02-11t09:39:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12890");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withMillisOfDay(117);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusWeeks(109);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks(468);
        int int25 = localDateTime22.size();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusSeconds(29121139);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test12891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12891");
        java.util.Locale locale3 = new java.util.Locale("2022-02-10T01:43:10.001Z", "2122-02-11T09:40:29.563Z", "Germany");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-10t01:43:10.001z_2122-02-11T09:40:29.563Z_Germany");
    }

    @Test
    public void test12892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12892");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property23.getDifference(readableInstant24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = property23.getMaximumTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = property23.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        long long36 = dateTime35.getMillis();
        int int37 = property7.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = property7.setCopy(100);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfCeilingCopy();
        java.lang.String str41 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime42 = property7.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusMonths(360000000);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minusSeconds(709);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 4800246206695L + "'", long36 == 4800246206695L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test12893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12893");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2021-05-24T08:04:08.541", "ja-JP", 679, 828);
    }

    @Test
    public void test12894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12894");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(1987);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readableDuration13);
        int int15 = localDateTime8.getYear();
        int int16 = localDateTime8.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withWeekOfWeekyear(350);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 350 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test12895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12895");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDateTime10.indexOf(dateTimeFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMinutes(305);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readableDuration42);
        boolean boolean44 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        int int53 = localDateTime52.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readableDuration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(9);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        boolean boolean68 = localDateTime60.isSupported(dateTimeFieldType67);
        boolean boolean69 = localDateTime46.isSupported(dateTimeFieldType67);
        int int70 = localDateTime22.get(dateTimeFieldType67);
        int int71 = dateTime20.get(dateTimeFieldType67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime17.withField(dateTimeFieldType67, 7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = localDateTime73.withTime(381, 34840955, 984, 834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 381 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 70 + "'", int70 == 70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test12896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12896");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property7.getAsShortText(locale8);
        int int10 = property7.getMaximumValueOverall();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.lang.String str14 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfCeilingCopy();
        java.lang.String str16 = property7.getName();
        org.joda.time.LocalDateTime localDateTime17 = property7.roundCeilingCopy();
        long long18 = property7.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfEra" + "'", str16, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3577406786L + "'", long18 == 3577406786L);
    }

    @Test
    public void test12897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12897");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Object[] objArray17 = strSet15.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.stream.Stream<java.util.Locale> localeStream29 = localeList28.stream();
        boolean boolean30 = strSet15.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        boolean boolean31 = strSet15.isEmpty();
        strSet15.clear();
        boolean boolean33 = strSet15.isEmpty();
        java.util.Iterator<java.lang.String> strItor34 = strSet15.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet15.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet15.spliterator();
        java.util.Collection<java.util.Locale> localeCollection37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strSet15.containsAll(localeCollection37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(strSpliterator36);
    }

    @Test
    public void test12898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12898");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getVariant();
        int int20 = property7.getMaximumShortTextLength(locale17);
        int int21 = property7.getMaximumValueOverall();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = dateTimeZone23.getName((long) 292278993, locale25);
        java.lang.String str27 = locale25.getDisplayScript();
        java.lang.String str28 = locale25.toLanguageTag();
        java.lang.String str29 = locale25.getScript();
        int int30 = property7.getMaximumTextLength(locale25);
        boolean boolean31 = property7.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str18, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "de-DE" + "'", str28, "de-DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test12899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes(2);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        boolean boolean24 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusMillis((int) (byte) 10);
        boolean boolean27 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime13.plusYears(955);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = localDateTime29.toString("2122-02-11T09:43:12.771+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test12900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 756);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12901");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime17 = property7.addToCopy((int) (byte) 100);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        int int20 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy("35");
        int int33 = property29.getLeapAmount();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property29.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale19.getDisplayLanguage(locale34);
        java.lang.String str37 = locale19.toLanguageTag();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.util.Locale locale42 = new java.util.Locale("35");
        java.lang.String str43 = dateTimeZone39.getShortName((long) 150, locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale19.getDisplayName(locale42);
        java.lang.String str46 = locale42.getScript();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "43" + "'", str30, "43");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals(locale42.toString(), "35");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test12902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12902");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusDays(20);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear(12);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-798211));
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra(9);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(1970);
        boolean boolean24 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withYear(2252);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(204);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test12903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12903");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("34565005");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=34565005");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12904");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        boolean boolean2 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(130);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        int int8 = localDateTime7.getDayOfMonth();
        java.util.Date date9 = localDateTime7.toDate();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date9);
        boolean boolean11 = timeZone0.inDaylightTime(date9);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:43:27 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12905");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.nextTransition(1L);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        int int16 = timeZone13.getOffset(4800245834431L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone21 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long24 = fixedDateTimeZone21.convertLocalToUTC((long) (-798211), true);
        long long26 = fixedDateTimeZone21.previousTransition(2022L);
        java.util.TimeZone timeZone27 = fixedDateTimeZone21.toTimeZone();
        java.util.TimeZone timeZone28 = fixedDateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        java.time.ZoneId zoneId34 = timeZone33.toZoneId();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone(zoneId34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone(zoneId34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone(zoneId34);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone(zoneId34);
        boolean boolean39 = timeZone28.hasSameRules(timeZone38);
        boolean boolean40 = timeZone13.hasSameRules(timeZone38);
        timeZone13.setID("2022-02-11T08:01:34.406");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-798217L) + "'", long24 == (-798217L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2022L + "'", long26 == 2022L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12906");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        int int41 = property33.getMaximumTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property33.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusMillis(0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfEra();
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = property53.getDifference(readableInstant54);
        java.util.Locale locale59 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        int int61 = property53.getMaximumTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime63 = property53.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        boolean boolean66 = dateTime45.isBefore(readableInstant64);
        org.joda.time.Instant instant67 = dateTime45.toInstant();
        java.lang.String str68 = dateTime45.toString();
        int int69 = property24.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime70 = property24.roundFloorCopy();
        int int71 = property24.getMaximumValue();
        java.lang.Object obj72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = localDateTime73.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusHours(23);
        int int79 = localDateTime78.size();
        org.joda.time.Chronology chronology80 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(obj72, chronology80);
        int int82 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2122-02-11T09:43:27.007Z" + "'", str68, "2122-02-11T09:43:27.007Z");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test12907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12907");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(2371197, 34859734, 565, 426, 939, 531, 34725203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 426 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12908");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2122-02-11T09:36:00.828Z");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("0109-02-08T09:26:08.285");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test12909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12909");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(0);
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int14 = localDateTime10.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.plusWeeks(58);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMonths(669);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusDays(34610766);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(59);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusSeconds(2371197);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        int int37 = property35.getMinimumValue();
        int int38 = property35.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = property35.addWrapFieldToCopy(28);
        boolean boolean41 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:43:27.082" + "'", str16, "2022-02-11T09:43:27.082");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test12910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12910");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(4800245713056L);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        int int12 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test12911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12911");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minus(readableDuration36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.monthOfYear();
        int int39 = property38.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone40.isLocalDateTimeGap(localDateTime41);
        java.lang.String str43 = dateTimeZone40.getID();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plusHours(0);
        boolean boolean57 = dateTimeZone40.isLocalDateTimeGap(localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMillis(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = localDateTime65.getFields();
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime();
        long long68 = property58.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime67);
        int int69 = property38.getDifference((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = dateTime67.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test12912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12912");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusMillis(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property13.getDifference(readableInstant14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        int int21 = property13.getMaximumTextLength(locale19);
        org.joda.time.LocalDateTime localDateTime23 = property13.addToCopy((int) (byte) 100);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("hi!");
        int int26 = property13.getMaximumShortTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime28 = property13.addToCopy((int) (byte) 100);
        org.joda.time.DurationField durationField29 = property13.getLeapDurationField();
        java.lang.String str30 = property13.getAsString();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.getCountry();
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale31.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getISO3Country();
        java.lang.String str37 = property13.getAsShortText(locale31);
        java.lang.String str38 = locale31.getCountry();
        java.util.Locale.Builder builder39 = builder5.setLocale(locale31);
        java.util.Locale.Builder builder41 = builder5.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("2022-02-11T09:37:07.841");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:37:07.841 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test12913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12913");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property9.getDifference(readableInstant10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = property9.getMaximumTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property9.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = property30.getDifference(readableInstant31);
        java.util.Locale locale36 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        int int38 = property30.getMaximumTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime40 = property30.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = property50.getDifference(readableInstant51);
        java.util.Locale locale56 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        int int58 = property50.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime60 = property50.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        boolean boolean63 = dateTime42.isBefore(readableInstant61);
        boolean boolean64 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology65 = dateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 6, chronology65);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(4800245710519L, chronology65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusSeconds(748);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMinutes(569);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2122-02-11T09:43:27.236Z" + "'", str22, "2122-02-11T09:43:27.236Z");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test12914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12914");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        java.lang.String str17 = fixedDateTimeZone11.getID();
        java.util.TimeZone timeZone18 = fixedDateTimeZone11.toTimeZone();
        long long20 = fixedDateTimeZone11.previousTransition((long) 582);
        java.lang.String str21 = fixedDateTimeZone11.getID();
        boolean boolean22 = fixedDateTimeZone11.isFixed();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 582L + "'", long20 == 582L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "italiano" + "'", str21, "italiano");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test12915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12915");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs((-52596480));
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12916");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        java.lang.String str33 = property7.getAsShortText();
        java.lang.String str34 = property7.getAsString();
        org.joda.time.LocalDateTime localDateTime35 = property7.withMinimumValue();
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMonths(34691244);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0001-02-11T09:43:27.297" + "'", str36, "0001-02-11T09:43:27.297");
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test12917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12917");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = property18.getAsShortText(locale19);
        java.lang.String str21 = property7.getAsText(locale19);
        long long22 = property7.remainder();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "43" + "'", str21, "43");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 27322L + "'", long22 == 27322L);
    }

    @Test
    public void test12918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12918");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(25);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.lang.String str5 = dateTimeZone2.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(4800245851344L, dateTimeZone2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        int int9 = localDateTime8.getYearOfCentury();
        int int10 = localDateTime8.getMillisOfSecond();
        int int11 = localDateTime8.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((int) '4');
        int int14 = localDateTime8.getDayOfYear();
        int int15 = localDateTime8.getEra();
        int int16 = localDateTime8.getYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.minusDays(35);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(34529046);
        boolean boolean22 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = localDateTime21.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 340 + "'", int10 == 340);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35007340 + "'", int23 == 35007340);
    }

    @Test
    public void test12919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12919");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        int int4 = localDateTime3.getYearOfCentury();
        java.lang.String str5 = localDateTime3.toString();
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property14.getDifference(readableInstant15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        int int22 = property14.getMaximumTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime24 = property14.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = property34.getDifference(readableInstant35);
        java.util.Locale locale40 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = property34.getMaximumTextLength(locale40);
        org.joda.time.LocalDateTime localDateTime44 = property34.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        boolean boolean47 = dateTime26.isBefore(readableInstant45);
        org.joda.time.Instant instant48 = dateTime26.toInstant();
        boolean boolean49 = dateTime6.isEqual((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone50.isLocalDateTimeGap(localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = property54.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property54.getFieldType();
        boolean boolean57 = instant48.isSupported(dateTimeFieldType56);
        int int58 = localDateTime1.indexOf(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime1.plusMonths(200);
        int int61 = localDateTime60.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:43:27.359" + "'", str5, "2022-02-11T09:43:27.359");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1986 + "'", int61 == 1986);
    }

    @Test
    public void test12920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12920");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        java.lang.String str31 = dateTime30.toString();
        java.lang.String str32 = dateTime30.toString();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = property41.getAsText(locale44);
        java.lang.String str48 = nameProvider33.getName(locale44, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder49.setExtension('x', "Italian");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("2122-02-11T08:00:11.407-01:35");
        java.util.Locale.Builder builder55 = builder49.setLocale(locale54);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getCountry();
        java.lang.String str58 = locale54.getDisplayLanguage(locale56);
        java.lang.String str61 = nameProvider33.getName(locale54, "\u610f\u5927\u5229\u6587", "2122-02-11T08:00:17.260-01:35");
        boolean boolean62 = dateTime30.equals((java.lang.Object) nameProvider33);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        int int69 = localDateTime68.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.weekyear();
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        boolean boolean79 = dateTime30.equals((java.lang.Object) chronology78);
        boolean boolean80 = fixedDateTimeZone4.equals((java.lang.Object) chronology78);
        int int82 = fixedDateTimeZone4.getOffset((long) '#');
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime84.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime();
        int int90 = localDateTime89.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime88.withFields((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime.Property property92 = localDateTime89.monthOfYear();
        org.joda.time.DateTime dateTime93 = localDateTime89.toDateTime();
        int int94 = localDateTime89.size();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime89.minusHours(363);
        boolean boolean97 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime96);
        int int99 = fixedDateTimeZone4.getStandardOffset((long) 34900623);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2122-02-11T09:43:27.393Z" + "'", str31, "2122-02-11T09:43:27.393Z");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122-02-11T09:43:27.393Z" + "'", str32, "2122-02-11T09:43:27.393Z");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test12921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12921");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale7 = new java.util.Locale("2022-02-11T09:36:06.829");
        java.lang.String str8 = locale5.getDisplayVariant(locale7);
        java.lang.String str9 = locale5.getScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals(locale7.toString(), "2022-02-11t09:36:06.829");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test12922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12922");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setUnicodeLocaleKeyword("164", "2122-02-11T09:35:25.444Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 164 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test12923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12923");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long8 = fixedDateTimeZone4.previousTransition((long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.lang.String str12 = fixedDateTimeZone4.getName(4800245729437L, locale10);
        java.util.TimeZone timeZone13 = fixedDateTimeZone4.toTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        int int15 = timeZone13.getRawOffset();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("35");
        boolean boolean18 = timeZone13.hasSameRules(timeZone17);
        int int20 = timeZone13.getOffset(4800245859813L);
        java.util.TimeZone.setDefault(timeZone13);
        java.lang.String str22 = timeZone13.getID();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.032" + "'", str12, "+00:00:00.032");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str22, "2122-02-11T09:35:07.818Z");
    }

    @Test
    public void test12924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12924");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime10);
        int int15 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusMillis(336);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 773 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12925");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.getMaximumValue();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = property8.getAsShortText(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.lang.String str14 = locale11.getVariant();
        java.util.Set<java.lang.String> strSet15 = locale11.getUnicodeLocaleKeys();
        java.lang.String str16 = locale11.getScript();
        java.lang.String str17 = locale11.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "43" + "'", str12, "43");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str13, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "de_DE" + "'", str17, "de_DE");
    }

    @Test
    public void test12926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12926");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYearOfEra((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime5.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        boolean boolean33 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes((-100));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.minusDays(263);
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.dayOfMonth();
        org.joda.time.DurationField durationField40 = property39.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property39.getFieldType();
        int int42 = localDateTime5.indexOf(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:43:27.540" + "'", str14, "2022-02-11T09:43:27.540");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test12927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12927");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-876576));
    }

    @Test
    public void test12928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12928");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("German");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale12 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet21);
        strSet21.clear();
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet21);
        java.lang.Object[] objArray25 = strSet21.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = strSet21.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
    }

    @Test
    public void test12929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12929");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str10 = nameProvider0.getName(locale6, "2122-02-11T09:35:10.520Z", "0035-02-11T09:35:18.575");
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category11);
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str18 = nameProvider0.getShortName(locale14, "2122-02-11T09:38:42.752Z", "2122-02-11T09:41:11.894+00:00:00.070");
        java.lang.String str19 = locale14.getISO3Language();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "deu" + "'", str19, "deu");
    }

    @Test
    public void test12930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12930");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        int int4 = localDateTime2.getValue((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withDurationAdded(readableDuration5, 9);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.plusSeconds(305);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.minusSeconds(394);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12931");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(292278993);
        boolean boolean17 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears((int) (short) 0);
        boolean boolean32 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        int int33 = localDateTime21.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime21.plusWeeks(34990423);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test12932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12932");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(11L);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMonths(1);
        int int5 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime2);
        int int6 = localDateTime2.getMillisOfSecond();
        java.util.Date date7 = localDateTime2.toDate();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromDateFields(date7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readablePeriod9);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 679 + "'", int6 == 679);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:43:28 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getCountry();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readableDuration20);
        boolean boolean22 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMillis(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = property31.getDifference(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = property31.getAsText(locale34);
        java.lang.String str36 = property23.getAsShortText(locale34);
        java.lang.String str37 = locale3.getDisplayScript(locale34);
        java.util.Locale.Builder builder38 = builder0.setLocale(locale3);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = property46.getDifference(readableInstant47);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        int int54 = property46.getMaximumTextLength(locale52);
        org.joda.time.LocalDateTime localDateTime56 = property46.addToCopy((int) (byte) 100);
        int int57 = localDateTime56.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.dayOfMonth();
        java.lang.String str59 = property58.getAsShortText();
        org.joda.time.DurationField durationField60 = property58.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField61 = property58.getField();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime62.getFieldTypes();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.lang.String str69 = locale68.getScript();
        java.lang.String str70 = locale68.getVariant();
        java.lang.String str71 = property66.getAsText(locale68);
        int int72 = property58.getMaximumShortTextLength(locale68);
        java.util.Locale.Builder builder73 = builder38.setLocale(locale68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder75 = builder38.setVariant("2122-02-11T09:37:08.282Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2122-02-11T09:37:08.282Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "27" + "'", str36, "27");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "11" + "'", str59, "11");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022" + "'", str71, "2022");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test12934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12934");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53);
        int int3 = dateTimeZone1.getOffset(0L);
        java.lang.String str4 = dateTimeZone1.getID();
        boolean boolean5 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.053" + "'", str4, "+00:00:00.053");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test12935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12935");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId5);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId5);
        java.lang.String str9 = timeZone8.getID();
        java.util.TimeZone.setDefault(timeZone8);
        int int12 = timeZone8.getOffset((long) 328);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT-01:35" + "'", str9, "GMT-01:35");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-5700000) + "'", int12 == (-5700000));
    }

    @Test
    public void test12936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12936");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        int int21 = localDateTime20.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusDays(0);
        int int24 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withYearOfEra(1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 762 + "'", int24 == 762);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12937");
        java.util.Locale locale3 = new java.util.Locale("2122-02-11T08:01:14.514-01:35", "50", "GIAPPONESE (GIAPPONE)");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        int int14 = property12.getMaximumValue();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = property12.getAsShortText(locale15);
        java.lang.String str17 = locale3.getDisplayScript(locale15);
        java.lang.String str18 = locale15.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "2122-02-11t08:01:14.514-01:35_50_GIAPPONESE (GIAPPONE)");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "43" + "'", str13, "43");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "43" + "'", str16, "43");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test12938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12938");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 9);
        java.lang.String str5 = dateTimeZone1.getName((long) 13);
        long long8 = dateTimeZone1.adjustOffset(4800245710661L, false);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = property17.getDifference(readableInstant18);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = property17.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property17.addToCopy((int) (byte) 100);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = dateTimeZone29.getName((long) 292278993, locale31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusWeeks(529);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.monthOfYear();
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) property37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(272);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusWeeks(1987);
        int int52 = property37.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property53 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime47.minusYears(5735993);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusYears(205);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.032" + "'", str5, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245710661L + "'", long8 == 4800245710661L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.032" + "'", str32, "+00:00:00.032");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12939");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("zh");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("2122-02-11T09:39:38.498Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2122-02-11T09:39:38.498Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Koreanisch" + "'", str8, "Koreanisch");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12940");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.yearOfCentury();
        org.joda.time.Chronology chronology23 = localDateTime16.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test12941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12941");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        int int5 = localDateTime1.getMillisOfSecond();
        int int6 = localDateTime1.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.minuteOfHour();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getScript();
        java.lang.String str11 = property7.getAsShortText(locale8);
        java.lang.String str12 = locale8.getVariant();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 900 + "'", int5 == 900);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "43" + "'", str11, "43");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test12942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12942");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(362);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test12943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12943");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(22);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYear((int) 'x');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(9);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(582);
        boolean boolean27 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = fixedDateTimeZone4.getName(4800245777628L, locale29);
        java.util.TimeZone timeZone31 = fixedDateTimeZone4.toTimeZone();
        boolean boolean32 = timeZone31.observesDaylightTime();
        int int33 = timeZone31.getDSTSavings();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.006" + "'", str30, "+00:00:00.006");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test12944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12944");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        int[] intArray8 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime26 = property16.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusHours(9);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        boolean boolean51 = localDateTime43.isSupported(dateTimeFieldType50);
        int int52 = dateTime28.get(dateTimeFieldType50);
        int int53 = localDateTime4.get(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime4.withCenturyOfEra(244);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localDateTime55.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 1, 10, 35007958]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2122-02-11T09:43:27.958+00:00:00.032" + "'", str29, "2122-02-11T09:43:27.958+00:00:00.032");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
    }

    @Test
    public void test12945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12945");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        java.lang.String str9 = property8.getAsShortText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("35", locale11);
        org.joda.time.LocalDateTime localDateTime13 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.lang.String str16 = property14.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[minuteOfHour]" + "'", str16, "Property[minuteOfHour]");
    }

    @Test
    public void test12946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12946");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundFloorCopy();
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.lang.String str23 = locale18.getDisplayVariant(locale22);
        java.lang.String str24 = locale22.getVariant();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = property33.getDifference(readableInstant34);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = property33.getAsText(locale36);
        java.lang.String str40 = nameProvider25.getName(locale36, "Etc/UTC", "\u610f\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusMillis(0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = property48.getDifference(readableInstant49);
        java.util.Locale locale54 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        int int56 = property48.getMaximumTextLength(locale54);
        org.joda.time.LocalDateTime localDateTime58 = property48.addToCopy((int) (byte) 100);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("hi!");
        int int61 = property48.getMaximumShortTextLength(locale60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        int int68 = localDateTime67.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.minuteOfHour();
        java.lang.String str71 = property70.getAsShortText();
        org.joda.time.LocalDateTime localDateTime73 = property70.setCopy("35");
        int int74 = property70.getLeapAmount();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        int int76 = property70.getMaximumShortTextLength(locale75);
        java.lang.String str77 = locale60.getDisplayLanguage(locale75);
        java.lang.String str78 = locale60.toLanguageTag();
        java.lang.String str81 = nameProvider25.getName(locale60, "hi!", "1");
        java.lang.String str82 = locale22.getDisplayScript(locale60);
        java.lang.String str83 = locale22.getDisplayCountry();
        java.lang.String str84 = locale22.getDisplayCountry();
        java.lang.String str85 = locale22.getDisplayCountry();
        int int86 = property12.getMaximumTextLength(locale22);
        java.lang.Object obj87 = null;
        boolean boolean88 = locale22.equals(obj87);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "43" + "'", str71, "43");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "und" + "'", str78, "und");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "HI!" + "'", str83, "HI!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "HI!" + "'", str84, "HI!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "HI!" + "'", str85, "HI!");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12947");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekyear((int) (short) 0);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone11 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long13 = fixedDateTimeZone11.nextTransition((long) (byte) 100);
        int int15 = fixedDateTimeZone11.getOffsetFromLocal(4800245715085L);
        org.joda.time.DateTime dateTime16 = localDateTime6.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime6.yearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusHours(9);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        boolean boolean43 = localDateTime35.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime19.withField(dateTimeFieldType42, (int) 'a');
        int int46 = localDateTime6.get(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test12948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12948");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.minuteOfHour();
        boolean boolean24 = property22.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.year();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clearExtensions();
        java.util.Locale locale34 = builder32.build();
        java.lang.String str35 = dateTimeZone29.getName((long) 34520736, locale34);
        long long38 = dateTimeZone29.adjustOffset((long) (byte) 0, false);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plusMillis(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = property46.getDifference(readableInstant47);
        java.util.Locale locale52 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        int int54 = property46.getMaximumTextLength(locale52);
        org.joda.time.LocalDateTime localDateTime56 = property46.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusMillis(0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfEra();
        org.joda.time.ReadableInstant readableInstant67 = null;
        int int68 = property66.getDifference(readableInstant67);
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        int int74 = property66.getMaximumTextLength(locale72);
        org.joda.time.LocalDateTime localDateTime76 = property66.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        boolean boolean79 = dateTime58.isBefore(readableInstant77);
        org.joda.time.Instant instant80 = dateTime58.toInstant();
        java.lang.String str81 = dateTime58.toString();
        int int82 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime58);
        java.lang.String str83 = dateTime58.toString();
        long long84 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime85 = property28.roundHalfCeilingCopy();
        boolean boolean86 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime13.plusMonths((-100));
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(instant80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2122-02-11T09:43:28.074Z" + "'", str81, "2122-02-11T09:43:28.074Z");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2122-02-11T09:43:28.074Z" + "'", str83, "2122-02-11T09:43:28.074Z");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-100L) + "'", long84 == (-100L));
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test12949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12949");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-5700000), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 756);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime8.toString(dateTimeFormatter9);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime8.isSupported(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:43:28.120" + "'", str10, "2022-02-11T09:43:28.120");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12950");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone3.getShortName(10L, locale6);
        long long11 = dateTimeZone3.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(0);
        boolean boolean25 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long29 = dateTimeZone12.convertLocalToUTC((long) 1, true, 100L);
        long long31 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 4800245711010L);
        int int33 = dateTimeZone3.getStandardOffset(4800245711010L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(4800245718651L, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        java.util.Date date37 = localDateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusDays(34520736);
        java.util.Date date40 = localDateTime36.toDate();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plusYears(34591664);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear(508);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withPeriodAdded(readablePeriod45, 34711614);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.withHourOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:35" + "'", str8, "-01:35");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4800240011010L + "'", long31 == 4800240011010L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5700000) + "'", int33 == (-5700000));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 11 08:00:18 GMT-01:35 2122");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Feb 11 08:00:18 GMT-01:35 2122");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test12951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12951");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2122-02-11T09:43:20.255+00:00:00.006");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2122-02-11t09:43:20.255+00:00:00.006");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12952");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) ' ');
        boolean boolean16 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(34520736);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime20.getFieldTypes();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = localDateTime20.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12953");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfWeek();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.lang.String str8 = property6.toString();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(341);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfWeek]" + "'", str8, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12954");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfSecond(27);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        java.lang.String str5 = property4.getAsText();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
    }

    @Test
    public void test12955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12955");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(dateTimeZone26);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(331, 422, 787, 871, 42070665, 766, 655, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 871 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test12956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12956");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "2122-02-11T08:00:12.990-01:35", "");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = dateTimeZone16.getName((long) 292278993, locale18);
        int int20 = property14.getMaximumTextLength(locale18);
        java.lang.String str23 = nameProvider0.getName(locale18, "2022-02-11T09:35:19.652", "\u516c\u5143");
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.lang.String str26 = locale24.toLanguageTag();
        java.lang.String str29 = nameProvider0.getShortName(locale24, "2122-02-11T09:36:03.602Z", "2122-02-11T09:35:56.503Z");
        java.util.Locale locale33 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.lang.String str36 = nameProvider0.getName(locale33, "22", "2122-02-11T09:35:57.511Z");
        java.lang.String str37 = locale33.toLanguageTag();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko" + "'", str26, "ko");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
    }

    @Test
    public void test12957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12957");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList8);
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap28);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean31 = strSet30.isEmpty();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str39 = nameProvider35.getName(locale36, "2122-02-11T08:00:12.990-01:35", "");
        java.lang.String str40 = locale36.getDisplayName();
        java.util.Locale.setDefault(category34, locale36);
        java.util.Set<java.lang.String> strSet42 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale50 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale locale58 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet59);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        java.lang.Object obj66 = null;
        boolean boolean67 = strSet64.remove(obj66);
        boolean boolean69 = strSet64.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet64);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap72 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList73 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap72);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "italiano" + "'", str40, "italiano");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(languageRangeList73);
    }

    @Test
    public void test12958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12958");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:35:23.304", "Tempo universale coordinato", "2122-02-11T08:00:15.544-01:35");
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:35:23.304_TEMPO UNIVERSALE COORDINATO_2122-02-11T08:00:15.544-01:35");
    }

    @Test
    public void test12959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12959");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = property7.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        boolean boolean32 = property7.equals((java.lang.Object) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        int int41 = localDateTime40.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusYears(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMonths(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime50.getFieldTypes();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        boolean boolean56 = dateTime49.isSupported(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime34.property(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime34.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType59 = null;
        boolean boolean60 = localDateTime34.isSupported(durationFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime34.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test12960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12960");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.tz.Provider provider2 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider2);
        java.util.Set<java.lang.String> strSet4 = provider2.getAvailableIDs();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap6);
        java.util.Collection<java.util.Locale> localeCollection8 = null;
        java.util.Locale.FilteringMode filteringMode9 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter(languageRangeList1, localeCollection8, filteringMode9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(provider2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + filteringMode9 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode9.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
    }

    @Test
    public void test12961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12961");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2122-02-11T08:00:14.119-01:35");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId7 = timeZone6.toZoneId();
        boolean boolean8 = timeZone4.hasSameRules(timeZone6);
        java.time.ZoneId zoneId9 = timeZone4.toZoneId();
        timeZone4.setRawOffset(59);
        java.time.ZoneId zoneId12 = timeZone4.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        boolean boolean14 = timeZone1.hasSameRules(timeZone4);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12962");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime10.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime10.weekOfWeekyear();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int26 = fixedDateTimeZone24.getStandardOffset((long) 529);
        java.lang.String str28 = fixedDateTimeZone24.getNameKey(4800245719443L);
        org.joda.time.DateTime dateTime29 = localDateTime10.toDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone24);
        java.util.TimeZone timeZone30 = fixedDateTimeZone24.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2122-02-11T09:35:07.818Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:35" + "'", str17, "-01:35");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italian" + "'", str28, "Italian");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12963");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(22);
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusHours(9);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        boolean boolean51 = localDateTime43.isSupported(dateTimeFieldType50);
        boolean boolean52 = localDateTime29.isSupported(dateTimeFieldType50);
        int int53 = localDateTime8.get(dateTimeFieldType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        int int56 = localDateTime55.getYearOfCentury();
        int int57 = localDateTime55.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusDays((int) (short) 0);
        boolean boolean60 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime8.withMillisOfSecond(638);
        org.joda.time.LocalDateTime.Property property63 = localDateTime8.year();
        int int64 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 532 + "'", int57 == 532);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test12964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12964");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str19 = locale17.getVariant();
        int int20 = property7.getMaximumShortTextLength(locale17);
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        boolean boolean26 = strSet21.contains((java.lang.Object) nameProvider23);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider23);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category31, locale32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = property41.getDifference(readableInstant42);
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        int int49 = property41.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime51 = property41.addToCopy((int) (byte) 100);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("hi!");
        int int54 = property41.getMaximumShortTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        int int61 = localDateTime60.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        java.lang.String str64 = property63.getAsShortText();
        org.joda.time.LocalDateTime localDateTime66 = property63.setCopy("35");
        int int67 = property63.getLeapAmount();
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        int int69 = property63.getMaximumShortTextLength(locale68);
        java.lang.String str70 = locale53.getDisplayLanguage(locale68);
        java.util.Locale.setDefault(category31, locale53);
        java.util.Locale locale72 = java.util.Locale.US;
        java.util.Locale.setDefault(category31, locale72);
        java.lang.String str74 = locale29.getDisplayScript(locale72);
        java.lang.String str77 = nameProvider23.getName(locale72, "2122-02-11T09:35:39.500Z", "2122-02-11T08:00:43.631-01:35");
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime78.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime84.withCenturyOfEra(20);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property90 = localDateTime88.dayOfMonth();
        java.util.Locale locale91 = java.util.Locale.FRANCE;
        java.lang.String str92 = property90.getAsText(locale91);
        java.lang.String str93 = locale72.getDisplayCountry(locale91);
        java.util.Locale locale94 = locale91.stripExtensions();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "43" + "'", str64, "43");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "11" + "'", str92, "11");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Etats-Unis" + "'", str93, "Etats-Unis");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "fr_FR");
    }

    @Test
    public void test12965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12965");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale.Builder builder16 = builder12.setLanguageTag("zh");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = fixedDateTimeZone4.getShortName(4800245729932L, locale17);
        long long20 = fixedDateTimeZone4.nextTransition(4800245708295L);
        int int22 = fixedDateTimeZone4.getStandardOffset(4800245744866L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(0);
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plusMinutes(11);
        int int34 = localDateTime33.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusHours(35);
        boolean boolean37 = fixedDateTimeZone4.equals((java.lang.Object) localDateTime36);
        long long39 = fixedDateTimeZone4.nextTransition((long) 34599937);
        java.lang.String str41 = fixedDateTimeZone4.getNameKey(4800245855889L);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int44 = fixedDateTimeZone4.getOffset((long) 692);
        java.lang.Class<?> wildcardClass45 = fixedDateTimeZone4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.032" + "'", str18, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4800245708295L + "'", long20 == 4800245708295L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 34599937L + "'", long39 == 34599937L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Italian" + "'", str41, "Italian");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test12966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12966");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset(0L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale15.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale23.getCountry();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale15.getDisplayCountry(locale23);
        java.lang.String str28 = dateTimeZone2.getShortName(4800245779159L, locale23);
        boolean boolean30 = dateTimeZone2.isStandardOffset((long) 34520736);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        java.lang.String str41 = property40.getAsShortText();
        int int42 = property40.getMaximumValue();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = property40.getAsShortText(locale43);
        java.lang.String str45 = locale43.getDisplayName();
        java.lang.String str46 = locale43.getVariant();
        java.util.Set<java.lang.String> strSet47 = locale43.getUnicodeLocaleKeys();
        java.lang.String str48 = locale43.getScript();
        java.lang.String str49 = dateTimeZone2.getName((long) 455, locale43);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals(locale20.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:35" + "'", str28, "-01:35");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "8" + "'", str41, "8");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8" + "'", str44, "8");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German (Germany)" + "'", str45, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-01:35" + "'", str49, "-01:35");
    }

    @Test
    public void test12967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12967");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        java.lang.String str7 = fixedDateTimeZone4.getID();
        boolean boolean8 = fixedDateTimeZone4.isFixed();
        long long10 = fixedDateTimeZone4.nextTransition(4800245735033L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        int int13 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds(566);
        boolean boolean20 = fixedDateTimeZone4.isLocalDateTimeGap(localDateTime19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDateTime19.toString(dateTimeFormatter21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.yearOfEra();
        int int24 = localDateTime19.getEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minusHours(98);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str7, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4800245735033L + "'", long10 == 4800245735033L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T08:15:57.656" + "'", str22, "2022-02-11T08:15:57.656");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12968");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property5.setCopy(77950143);
        java.lang.String str8 = property5.getAsShortText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "29307680" + "'", str8, "29307680");
    }

    @Test
    public void test12969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12969");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("italiano", "2122-02-11T08:00:12.990-01:35", 6, (int) (short) 1);
        long long7 = fixedDateTimeZone4.convertLocalToUTC((long) (-798211), true);
        long long9 = fixedDateTimeZone4.previousTransition(2022L);
        long long11 = fixedDateTimeZone4.previousTransition(4800245735513L);
        boolean boolean13 = fixedDateTimeZone4.equals((java.lang.Object) 292278993);
        java.lang.String str15 = fixedDateTimeZone4.getName((long) 589);
        java.lang.String str17 = fixedDateTimeZone4.getShortName(4800245770773L);
        boolean boolean19 = fixedDateTimeZone4.isStandardOffset(417L);
        java.lang.String str21 = fixedDateTimeZone4.getNameKey(4800245847385L);
        java.lang.String str23 = fixedDateTimeZone4.getNameKey((-292276971L));
        java.lang.String str24 = fixedDateTimeZone4.toString();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-798217L) + "'", long7 == (-798217L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2022L + "'", long9 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4800245735513L + "'", long11 == 4800245735513L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.006" + "'", str15, "+00:00:00.006");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.006" + "'", str17, "+00:00:00.006");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str21, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2122-02-11T08:00:12.990-01:35" + "'", str23, "2122-02-11T08:00:12.990-01:35");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "italiano" + "'", str24, "italiano");
    }

    @Test
    public void test12970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12970");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 305);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMinutes(305);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.weekyear();
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime17.getFields();
        org.joda.time.Chronology chronology23 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.Chronology chronology25 = localDateTime17.getChronology();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test12971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12971");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusSeconds((int) '#');
        int int11 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DurationField durationField14 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test12972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12972");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        boolean boolean8 = fixedDateTimeZone4.isStandardOffset(4800245710661L);
        long long10 = fixedDateTimeZone4.nextTransition(2022L);
        int int12 = fixedDateTimeZone4.getOffsetFromLocal(4800246199307L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test12973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12973");
        java.util.Locale locale2 = new java.util.Locale("4", "IT");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "4_IT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test12974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12974");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = property18.getDifference(readableInstant19);
        java.util.Locale locale24 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        int int26 = property18.getMaximumTextLength(locale24);
        org.joda.time.LocalDateTime localDateTime28 = property18.addToCopy((int) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        int int31 = property18.getMaximumShortTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property18.addToCopy((int) (byte) 100);
        int int34 = property18.get();
        boolean boolean35 = fixedDateTimeZone4.equals((java.lang.Object) int34);
        int int37 = fixedDateTimeZone4.getOffset((long) 822);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test12975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12975");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(622);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test12976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12976");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long6 = fixedDateTimeZone4.previousTransition((long) 9);
        long long8 = fixedDateTimeZone4.nextTransition(4800245711010L);
        long long10 = fixedDateTimeZone4.previousTransition((long) 305);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(4);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone18 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int20 = fixedDateTimeZone18.getStandardOffset((long) 529);
        long long22 = fixedDateTimeZone18.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone23 = fixedDateTimeZone18.toTimeZone();
        java.util.TimeZone timeZone24 = fixedDateTimeZone18.toTimeZone();
        boolean boolean25 = localDateTime11.equals((java.lang.Object) fixedDateTimeZone18);
        long long27 = fixedDateTimeZone18.nextTransition((long) 838);
        int int29 = fixedDateTimeZone18.getOffsetFromLocal((long) 34899327);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9L + "'", long6 == 9L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4800245711010L + "'", long8 == 4800245711010L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 305L + "'", long10 == 305L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 838L + "'", long27 == 838L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
    }

    @Test
    public void test12977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12977");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        java.lang.String str10 = property9.getAsShortText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime13 = property9.setCopy("35", locale12);
        org.joda.time.LocalDateTime localDateTime14 = property9.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        int int17 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.LocalDateTime localDateTime33 = property30.setCopy("35");
        int int34 = property30.getLeapAmount();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        int int36 = property30.getMaximumShortTextLength(locale35);
        java.lang.String str37 = locale35.getDisplayCountry();
        java.lang.String str38 = dateTimeZone20.getShortName((long) 0, locale35);
        boolean boolean39 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone20);
        long long42 = dateTimeZone20.previousTransition((long) 'a');
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 317, dateTimeZone20);
        boolean boolean44 = property18.equals((java.lang.Object) dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8" + "'", str10, "8");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8" + "'", str31, "8");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-01:35" + "'", str38, "-01:35");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 97L + "'", long42 == 97L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12978");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int int18 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusMillis(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.minuteOfHour();
        boolean boolean30 = property28.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.centuryOfEra();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus(readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minus(readableDuration36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test12979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12979");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property7.getAsShortText(locale8);
        int int10 = property7.getMaximumValueOverall();
        java.lang.String str11 = property7.getAsShortText();
        int int12 = property7.getMaximumValue();
        java.lang.String str13 = property7.getAsText();
        org.joda.time.DurationField durationField14 = property7.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test12980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12980");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        boolean boolean17 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((-100));
        int int21 = localDateTime20.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusDays(0);
        java.lang.String str24 = localDateTime20.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T06:28:28.925" + "'", str24, "2022-02-11T06:28:28.925");
    }

    @Test
    public void test12981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12981");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        int int20 = localDateTime19.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test12982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12982");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(458);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12983");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = property7.getDifference(readableInstant8);
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property7.getMaximumTextLength(locale13);
        java.lang.String str16 = property7.toString();
        org.joda.time.LocalDateTime localDateTime18 = property7.setCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears(394);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[yearOfEra]" + "'", str16, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test12984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12984");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int6 = fixedDateTimeZone4.getStandardOffset((long) 529);
        long long10 = fixedDateTimeZone4.convertLocalToUTC((long) (-1), false, (long) 100);
        long long12 = fixedDateTimeZone4.previousTransition((long) 'u');
        long long14 = fixedDateTimeZone4.convertUTCToLocal((long) 6);
        int int16 = fixedDateTimeZone4.getOffsetFromLocal((long) 33);
        long long18 = fixedDateTimeZone4.previousTransition(0L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone24 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        long long26 = fixedDateTimeZone24.previousTransition((long) 9);
        java.lang.String str27 = fixedDateTimeZone24.getID();
        boolean boolean28 = fixedDateTimeZone24.isFixed();
        long long30 = fixedDateTimeZone24.nextTransition(4800245735033L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        int int33 = localDateTime32.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds(566);
        boolean boolean40 = fixedDateTimeZone24.isLocalDateTimeGap(localDateTime39);
        java.util.Locale locale43 = new java.util.Locale("2122-02-11T09:35:59.916Z", "2022-01-11T09:37:35.974");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        boolean boolean45 = fixedDateTimeZone24.equals((java.lang.Object) locale43);
        java.lang.String str46 = fixedDateTimeZone4.getShortName((long) (-7044), locale43);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-33L) + "'", long10 == (-33L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 117L + "'", long12 == 117L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 38L + "'", long14 == 38L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2122-02-11T09:35:07.818Z" + "'", str27, "2122-02-11T09:35:07.818Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4800245735033L + "'", long30 == 4800245735033L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(locale43.toString(), "2122-02-11t09:35:59.916z_2022-01-11T09:37:35.974");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.032" + "'", str46, "+00:00:00.032");
    }

    @Test
    public void test12985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12985");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German (Germany)" + "'", str1, "German (Germany)");
    }

    @Test
    public void test12986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12986");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italian");
        org.joda.time.tz.Provider provider2 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider2);
        java.util.Set<java.lang.String> strSet4 = provider2.getAvailableIDs();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("zh", strMap9);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.Object obj16 = null;
        boolean boolean17 = strSet14.remove(obj16);
        boolean boolean18 = strSet14.isEmpty();
        boolean boolean20 = strSet14.add("");
        strSet14.clear();
        boolean boolean22 = strSet14.isEmpty();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Iterator<java.lang.String> strItor24 = strSet14.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale31 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale locale39 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet40);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.lang.Object obj47 = null;
        boolean boolean48 = strSet45.remove(obj47);
        boolean boolean50 = strSet45.equals((java.lang.Object) true);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap52);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.Locale locale55 = java.util.Locale.lookup(languageRangeList53, localeCollection54);
        java.util.Collection<java.lang.String> strCollection56 = null;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags(languageRangeList53, strCollection56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale64 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.stream.Stream<java.util.Locale> localeStream69 = localeList66.stream();
        java.util.stream.Stream<java.util.Locale> localeStream70 = localeList66.parallelStream();
        java.util.Locale locale71 = java.util.Locale.lookup(languageRangeList53, (java.util.Collection<java.util.Locale>) localeList66);
        boolean boolean72 = strSet14.retainAll((java.util.Collection<java.util.Locale>) localeList66);
        java.util.stream.Stream<java.util.Locale> localeStream73 = localeList66.parallelStream();
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList66);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(provider2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeStream69);
        org.junit.Assert.assertNotNull(localeStream70);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeStream73);
        org.junit.Assert.assertNotNull(localeList74);
    }

    @Test
    public void test12987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12987");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMonths(1);
        int int4 = localDateTime2.getValue((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withDurationAdded(readableDuration5, 9);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(22);
        int int19 = localDateTime18.size();
        org.joda.time.DurationFieldType durationFieldType20 = null;
        boolean boolean21 = localDateTime18.isSupported(durationFieldType20);
        int int22 = localDateTime18.getCenturyOfEra();
        java.lang.String str23 = localDateTime18.toString();
        int int24 = localDateTime18.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.plus(readableDuration25);
        int int27 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime2.withCenturyOfEra(513);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(159);
        int[] intArray32 = localDateTime29.getValues();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-09T10:08:10.127" + "'", str23, "2022-01-09T10:08:10.127");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[51322, 1, 11, 29309127]");
    }

    @Test
    public void test12988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12988");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = null;
        boolean boolean2 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.era();
        boolean boolean21 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusHours(0);
        boolean boolean24 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        int[] intArray25 = localDateTime3.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime3.minusHours(852);
        int int28 = localDateTime3.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 11, 29309151]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test12989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12989");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfMonth();
        java.util.Date date3 = localDateTime1.toDate();
        int int4 = localDateTime1.getHourOfDay();
        int int5 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours(22);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYear((int) 'x');
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withDayOfYear(116);
        boolean boolean20 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime1.secondOfMinute();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 08:08:29 GMT 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 172 + "'", int5 == 172);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-10T08:08:10.172" + "'", str17, "2022-01-10T08:08:10.172");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test12990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12990");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(2112, 16330033, 976, 320, 34802617, 243);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 320 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12991");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test12992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12992");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.minuteOfHour();
        boolean boolean9 = property7.equals((java.lang.Object) 100.0d);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        int[] intArray14 = localDateTime12.getValues();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMinuteOfHour(0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.yearOfCentury();
        int int20 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        org.joda.time.DurationField durationField30 = property29.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime31 = property29.getLocalDateTime();
        int int32 = localDateTime31.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minus(readableDuration33);
        boolean boolean35 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime12.plusYears(98);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds(829);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 11, 29248000]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test12993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12993");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = dateTimeZone2.getShortName(10L, locale5);
        long long10 = dateTimeZone2.adjustOffset((long) 10, false);
        java.lang.String str11 = dateTimeZone2.getID();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone16 = new org.joda.time.tz.FixedDateTimeZone("2122-02-11T09:35:07.818Z", "Italian", (int) ' ', (int) (byte) 0);
        int int18 = fixedDateTimeZone16.getStandardOffset((long) 529);
        long long20 = fixedDateTimeZone16.previousTransition((long) (short) 1);
        int int22 = fixedDateTimeZone16.getStandardOffset(4800245746509L);
        long long24 = dateTimeZone2.getMillisKeepLocal((org.joda.time.DateTimeZone) fixedDateTimeZone16, (long) 912);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readableDuration40);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusMillis(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfEra();
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = property51.getDifference(readableInstant52);
        java.util.Locale locale57 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        int int59 = property51.getMaximumTextLength(locale57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.plusMillis(0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.yearOfEra();
        org.joda.time.ReadableInstant readableInstant68 = null;
        int int69 = property67.getDifference(readableInstant68);
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        int int75 = property67.getMaximumTextLength(locale73);
        org.joda.time.LocalDateTime localDateTime77 = property67.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        long long80 = dateTime79.getMillis();
        int int81 = property51.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.LocalDateTime localDateTime83 = property51.setCopy(100);
        boolean boolean84 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime41.dayOfWeek();
        boolean boolean86 = dateTimeZone2.isLocalDateTimeGap(localDateTime41);
        int int87 = localDateTime41.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime41.plusHours(468);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:35" + "'", str7, "-01:35");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:35" + "'", str11, "-01:35");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-5699120L) + "'", long24 == (-5699120L));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 4800246209249L + "'", long80 == 4800246209249L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test12994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12994");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId5 = timeZone4.toZoneId();
        boolean boolean6 = timeZone4.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone4.getDisplayName(true, 34717067);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 34717067");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:35");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test12995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12995");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusSeconds((int) 'u');
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale8);
        int int10 = property6.getMaximumShortTextLength(locale8);
        java.lang.String str11 = locale8.getCountry();
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        java.lang.String str22 = property21.getAsShortText();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        org.joda.time.LocalDateTime localDateTime25 = property21.setCopy("35", locale24);
        org.joda.time.LocalDateTime localDateTime26 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfDay();
        boolean boolean30 = strSet12.contains((java.lang.Object) property29);
        boolean boolean32 = strSet12.equals((java.lang.Object) 4800245843309L);
        java.util.Locale locale35 = new java.util.Locale("2122-02-11T09:38:09.248Z", "2122-02-11T08:03:27.029-01:35");
        boolean boolean36 = strSet12.remove((java.lang.Object) "2122-02-11T08:03:27.029-01:35");
        java.util.Iterator<java.lang.String> strItor37 = strSet12.iterator();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8" + "'", str22, "8");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "2122-02-11t09:38:09.248z_2122-02-11T08:03:27.029-01:35");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor37);
    }

    @Test
    public void test12996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12996");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusHours((-1));
        int int11 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.hourOfDay();
        java.lang.String str13 = localDateTime6.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T08:08:29.342" + "'", str13, "2022-02-11T08:08:29.342");
    }

    @Test
    public void test12997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12997");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(22);
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(692);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = property16.getDifference(readableInstant17);
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        int int24 = property16.getMaximumTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusMillis(0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = property32.getDifference(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = property32.getMaximumTextLength(locale38);
        org.joda.time.LocalDateTime localDateTime42 = property32.addToCopy((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        long long45 = dateTime44.getMillis();
        int int46 = property16.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime48 = property16.setCopy(100);
        org.joda.time.LocalDateTime localDateTime49 = property16.roundHalfCeilingCopy();
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        boolean boolean58 = localDateTime49.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy(2022);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfYear();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.centuryOfEra();
        boolean boolean64 = property8.equals((java.lang.Object) property63);
        org.joda.time.LocalDateTime localDateTime65 = property63.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 46 + "'", int5 == 46);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!_hi!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4800246209359L + "'", long45 == 4800246209359L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test12998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12998");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusHours(632);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYear(3);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusMonths(257);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusHours(9);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((int) (byte) -1);
        boolean boolean28 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        java.lang.String str29 = localDateTime27.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 29 + "'", int1 == 29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-10T23:08:29.398" + "'", str29, "2022-02-10T23:08:29.398");
    }

    @Test
    public void test12999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12999");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(25);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = timeZone2.getOffset((long) 372);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test13000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test13000");
        java.util.Locale locale3 = new java.util.Locale("22", "2122-02-11T09:35:07.818Z", "2122-02-11T08:00:11.407-01:35");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDate(2022, (int) (short) 1, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.lang.String str13 = property12.getAsShortText();
        int int14 = property12.getMaximumValue();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = property12.getAsShortText(locale15);
        java.lang.String str17 = locale3.getDisplayScript(locale15);
        java.lang.String str18 = locale15.getDisplayName();
        java.lang.String str20 = locale15.getExtension('u');
        java.lang.String str22 = locale15.getExtension('u');
        org.junit.Assert.assertEquals(locale3.toString(), "22_2122-02-11T09:35:07.818Z_2122-02-11T08:00:11.407-01:35");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8" + "'", str13, "8");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8" + "'", str16, "8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str18, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
    }
}
